
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Lv #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/lv.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 19, 20, 21, 39, 40, 41, 
	43, 45, 50, 55, 60, 65, 69, 73, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	91, 92, 94, 99, 106, 111, 112, 113, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	133, 135, 137, 139, 141, 143, 145, 147, 
	149, 151, 153, 155, 157, 159, 161, 164, 
	166, 168, 170, 172, 174, 192, 193, 195, 
	196, 197, 198, 199, 200, 201, 202, 203, 
	204, 205, 206, 221, 223, 225, 227, 229, 
	231, 233, 235, 237, 239, 241, 243, 245, 
	247, 249, 251, 253, 255, 258, 260, 262, 
	264, 266, 268, 270, 272, 274, 276, 278, 
	280, 282, 284, 286, 288, 290, 292, 294, 
	296, 298, 300, 302, 304, 306, 308, 310, 
	312, 314, 316, 318, 320, 323, 325, 327, 
	329, 331, 333, 335, 337, 339, 341, 343, 
	345, 347, 349, 350, 351, 352, 353, 354, 
	355, 356, 357, 364, 367, 369, 371, 373, 
	375, 377, 379, 381, 383, 385, 387, 389, 
	391, 393, 395, 397, 399, 401, 403, 405, 
	406, 407, 408, 409, 410, 411, 413, 414, 
	415, 416, 417, 418, 419, 420, 421, 423, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	432, 433, 434, 435, 436, 437, 438, 453, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 479, 481, 483, 485, 
	487, 490, 492, 494, 496, 498, 500, 502, 
	504, 506, 508, 510, 512, 514, 516, 518, 
	520, 522, 524, 526, 528, 530, 532, 534, 
	536, 538, 540, 542, 544, 546, 548, 550, 
	552, 554, 555, 556, 571, 573, 575, 577, 
	579, 581, 583, 585, 587, 589, 591, 593, 
	595, 597, 599, 601, 603, 605, 608, 610, 
	612, 614, 616, 618, 620, 622, 624, 626, 
	628, 630, 632, 634, 636, 638, 640, 642, 
	644, 646, 648, 651, 653, 655, 657, 659, 
	661, 663, 665, 667, 670, 672, 674, 676, 
	678, 680, 682, 684, 686, 689, 691, 693, 
	695, 697, 699, 701, 703, 705, 707, 709, 
	711, 713, 715, 717, 719, 721, 723, 725, 
	727, 729, 730, 731, 732, 733, 734, 735, 
	736, 737, 738, 739, 743, 749, 752, 754, 
	760, 778, 780, 782, 784, 786, 788, 790, 
	792, 794, 796, 798, 800, 802, 804, 806, 
	808, 810, 812, 814, 816, 818, 820, 822, 
	825, 827, 829, 831, 833, 835, 837, 839, 
	841, 843, 845, 848, 850, 852, 854, 856, 
	858, 860, 862, 864, 867, 869, 871, 873, 
	875, 877, 879, 881, 883, 885, 887, 889, 
	891, 893, 895, 897, 899, 901, 903, 904, 
	905, 906, 907, 908, 909, 910, 911, 912, 
	913, 914, 915, 916, 917
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-17, 10, 32, 34, 35, 37, 42, 64, 
	66, 70, 74, 75, 80, 83, 84, 85, 
	124, 9, 13, -69, -65, 10, 32, 34, 
	35, 37, 42, 64, 66, 70, 74, 75, 
	80, 83, 84, 85, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 10, 13, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 101, 
	116, -60, 117, -85, -60, -115, 97, 58, 
	10, 10, 10, 32, 35, 37, 64, 70, 
	75, 80, 83, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, -60, 10, 117, -85, 10, -60, 10, 
	-115, 10, 10, 97, 10, 58, 10, 32, 
	34, 35, 37, 42, 64, 66, 70, 74, 
	75, 80, 83, 84, 85, 124, 9, 13, 
	97, 97, 111, 100, 110, 116, 101, 107, 
	115, 116, 115, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 66, 70, 74, 75, 
	83, 84, 85, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 101, 10, 116, -60, 
	10, 117, -85, 10, -60, 10, -115, 10, 
	10, 97, 10, 58, 10, 110, 10, 107, 
	10, 99, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	-60, 10, -127, 10, 10, 116, 10, 101, 
	10, 97, 10, 97, 10, 100, 10, 99, 
	10, 101, 10, 110, -60, 10, -127, 10, 
	10, 114, 10, 105, 10, 106, 10, 115, 
	10, 32, 58, 10, 112, -60, 10, -109, 
	10, 10, 99, 10, 32, 10, 112, 10, 
	97, 10, 114, 10, 97, 10, 117, 10, 
	103, 10, 110, 97, 105, 114, 97, 117, 
	103, 115, 58, 10, 10, 10, 32, 35, 
	70, 124, 9, 13, -60, 10, 117, -85, 
	10, -60, 10, -115, 10, 10, 97, 10, 
	58, 10, 110, 10, 107, 10, 99, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, -60, 10, -127, 
	10, 10, 116, 10, 101, 101, 109, -60, 
	-109, 114, 105, 99, 105, 101, 110, -60, 
	-127, 114, 105, 106, 115, 32, 58, 112, 
	-60, -109, 99, 32, 112, 97, 114, 97, 
	117, 103, 97, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 66, 70, 74, 75, 
	83, 84, 85, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 101, 10, 116, -60, 
	10, 117, -85, 10, -60, 10, -115, 10, 
	10, 97, 10, 58, 10, 110, 10, 107, 
	10, 99, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	-60, 10, -127, 10, 10, 116, 10, 101, 
	10, 97, 10, 97, 10, 100, 10, 99, 
	10, 101, 10, 110, -60, 10, -127, 10, 
	10, 114, 10, 105, 10, 106, 10, 115, 
	10, 110, 10, 10, 10, 32, 35, 37, 
	42, 64, 66, 70, 74, 75, 83, 84, 
	85, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 101, 10, 116, -60, 10, 117, 
	-85, 10, -60, 10, -115, 10, 10, 97, 
	10, 58, 10, 110, 10, 107, 10, 99, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -60, 10, 
	-127, 10, 10, 116, 10, 101, 10, 97, 
	10, 97, 111, 10, 100, 10, 110, 10, 
	116, 10, 101, 10, 107, 10, 115, 10, 
	116, 10, 115, 10, 99, 105, 10, 101, 
	10, 110, -60, 10, -127, 10, 10, 114, 
	10, 105, 10, 106, 10, 115, 10, 32, 
	58, 10, 112, -60, 10, -109, 10, 10, 
	99, 10, 32, 10, 112, 10, 97, 10, 
	114, 10, 97, 10, 117, 10, 103, 10, 
	116, 10, 117, -60, 10, -127, 10, 10, 
	99, 10, 105, 10, 106, 10, 97, 10, 
	110, 116, 117, -60, -127, 99, 105, 106, 
	97, 97, 110, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	10, 32, 34, 35, 37, 42, 64, 66, 
	70, 74, 75, 80, 83, 84, 85, 124, 
	9, 13, 10, 110, 10, 107, 10, 99, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -60, 10, 
	-127, 10, 10, 116, 10, 101, 10, 111, 
	10, 110, 10, 116, 10, 101, 10, 107, 
	10, 115, 10, 116, 10, 115, 10, 97, 
	105, 10, 114, 10, 97, 10, 117, 10, 
	103, 10, 101, 10, 109, -60, 10, -109, 
	10, 10, 114, 10, 105, 10, 99, 105, 
	10, 101, 10, 110, -60, 10, -127, 10, 
	10, 114, 10, 105, 10, 106, 10, 115, 
	10, 32, 58, 10, 112, -60, 10, -109, 
	10, 10, 99, 10, 32, 10, 112, 10, 
	97, 10, 114, 10, 97, 10, 117, 10, 
	103, 10, 116, 10, 117, -60, 10, -127, 
	10, 10, 99, 10, 105, 10, 106, 110, 
	107, 99, 105, 111, 110, 97, 108, 105, 
	116, -60, -127, 116, 101, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 17, 1, 1, 16, 1, 1, 2, 
	2, 3, 3, 3, 3, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 3, 5, 3, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 16, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 13, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 13, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 13, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 4, 3, 2, 4, 
	16, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 19, 21, 23, 41, 43, 45, 
	48, 51, 56, 61, 66, 71, 75, 79, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 112, 
	114, 116, 119, 124, 131, 136, 138, 140, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	168, 171, 174, 177, 180, 183, 186, 189, 
	192, 195, 198, 201, 204, 207, 210, 214, 
	217, 220, 223, 226, 229, 247, 249, 252, 
	254, 256, 258, 260, 262, 264, 266, 268, 
	270, 272, 274, 289, 292, 295, 298, 301, 
	304, 307, 310, 313, 316, 319, 322, 325, 
	328, 331, 334, 337, 340, 344, 347, 350, 
	353, 356, 359, 362, 365, 368, 371, 374, 
	377, 380, 383, 386, 389, 392, 395, 398, 
	401, 404, 407, 410, 413, 416, 419, 422, 
	425, 428, 431, 434, 437, 441, 444, 447, 
	450, 453, 456, 459, 462, 465, 468, 471, 
	474, 477, 480, 482, 484, 486, 488, 490, 
	492, 494, 496, 503, 507, 510, 513, 516, 
	519, 522, 525, 528, 531, 534, 537, 540, 
	543, 546, 549, 552, 555, 558, 561, 564, 
	566, 568, 570, 572, 574, 576, 579, 581, 
	583, 585, 587, 589, 591, 593, 595, 598, 
	600, 602, 604, 606, 608, 610, 612, 614, 
	616, 618, 620, 622, 624, 626, 628, 643, 
	646, 649, 652, 655, 658, 661, 664, 667, 
	670, 673, 676, 679, 682, 685, 688, 691, 
	694, 698, 701, 704, 707, 710, 713, 716, 
	719, 722, 725, 728, 731, 734, 737, 740, 
	743, 746, 749, 752, 755, 758, 761, 764, 
	767, 770, 773, 776, 779, 782, 785, 788, 
	791, 794, 796, 798, 813, 816, 819, 822, 
	825, 828, 831, 834, 837, 840, 843, 846, 
	849, 852, 855, 858, 861, 864, 868, 871, 
	874, 877, 880, 883, 886, 889, 892, 895, 
	898, 901, 904, 907, 910, 913, 916, 919, 
	922, 925, 928, 932, 935, 938, 941, 944, 
	947, 950, 953, 956, 960, 963, 966, 969, 
	972, 975, 978, 981, 984, 988, 991, 994, 
	997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 
	1021, 1024, 1027, 1030, 1033, 1036, 1039, 1042, 
	1045, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 
	1062, 1064, 1066, 1068, 1072, 1078, 1082, 1085, 
	1091, 1109, 1112, 1115, 1118, 1121, 1124, 1127, 
	1130, 1133, 1136, 1139, 1142, 1145, 1148, 1151, 
	1154, 1157, 1160, 1163, 1166, 1169, 1172, 1175, 
	1179, 1182, 1185, 1188, 1191, 1194, 1197, 1200, 
	1203, 1206, 1209, 1213, 1216, 1219, 1222, 1225, 
	1228, 1231, 1234, 1237, 1241, 1244, 1247, 1250, 
	1253, 1256, 1259, 1262, 1265, 1268, 1271, 1274, 
	1277, 1280, 1283, 1286, 1289, 1292, 1295, 1297, 
	1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 
	1315, 1317, 1319, 1321, 1323
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 2, 0, 18, 0, 2, 0, 3, 
	2, 4, 5, 6, 7, 8, 9, 10, 
	11, 12, 13, 14, 15, 16, 17, 2, 
	0, 19, 0, 20, 0, 22, 23, 21, 
	25, 26, 24, 29, 28, 30, 28, 27, 
	33, 32, 34, 32, 31, 33, 32, 35, 
	32, 31, 33, 32, 36, 32, 31, 38, 
	37, 37, 0, 3, 39, 39, 0, 41, 
	42, 40, 3, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	57, 0, 0, 58, 60, 61, 59, 0, 
	0, 0, 0, 62, 63, 64, 63, 63, 
	66, 65, 62, 3, 67, 8, 67, 0, 
	68, 0, 69, 0, 70, 71, 0, 72, 
	0, 73, 0, 74, 0, 75, 0, 76, 
	0, 78, 77, 80, 79, 80, 81, 82, 
	83, 82, 84, 85, 86, 87, 81, 79, 
	80, 88, 79, 80, 89, 79, 80, 90, 
	79, 80, 91, 79, 80, 92, 79, 80, 
	93, 79, 80, 94, 79, 80, 95, 79, 
	80, 96, 79, 80, 97, 79, 80, 98, 
	79, 80, 99, 79, 80, 100, 79, 80, 
	101, 79, 102, 80, 103, 79, 104, 80, 
	79, 105, 80, 79, 106, 80, 79, 80, 
	107, 79, 80, 108, 79, 110, 109, 111, 
	112, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 109, 0, 69, 
	0, 125, 126, 0, 69, 0, 127, 0, 
	128, 0, 129, 0, 130, 0, 131, 0, 
	132, 0, 133, 0, 134, 0, 136, 135, 
	138, 137, 138, 139, 140, 141, 142, 140, 
	143, 144, 145, 146, 147, 146, 148, 139, 
	137, 138, 149, 137, 138, 150, 137, 138, 
	151, 137, 138, 152, 137, 138, 153, 137, 
	138, 154, 137, 138, 155, 137, 138, 156, 
	137, 138, 157, 137, 138, 158, 137, 138, 
	159, 137, 138, 160, 137, 138, 161, 137, 
	138, 162, 137, 138, 163, 137, 138, 164, 
	137, 138, 165, 137, 166, 138, 167, 137, 
	168, 138, 137, 169, 138, 137, 170, 138, 
	137, 138, 171, 137, 138, 163, 137, 138, 
	172, 137, 138, 173, 137, 138, 174, 137, 
	138, 175, 137, 138, 176, 137, 138, 177, 
	137, 138, 178, 137, 138, 179, 137, 138, 
	180, 137, 138, 181, 137, 182, 138, 137, 
	183, 138, 137, 138, 184, 137, 138, 171, 
	137, 138, 165, 137, 138, 185, 137, 138, 
	165, 137, 138, 186, 137, 138, 187, 137, 
	138, 188, 137, 189, 138, 137, 190, 138, 
	137, 138, 191, 137, 138, 192, 137, 138, 
	193, 137, 138, 194, 137, 138, 195, 163, 
	137, 138, 196, 137, 197, 138, 137, 198, 
	138, 137, 138, 199, 137, 138, 200, 137, 
	138, 201, 137, 138, 202, 137, 138, 203, 
	137, 138, 204, 137, 138, 205, 137, 138, 
	170, 137, 138, 165, 137, 206, 207, 0, 
	208, 0, 209, 0, 210, 0, 211, 0, 
	212, 0, 213, 0, 215, 214, 217, 216, 
	217, 218, 219, 220, 219, 218, 216, 221, 
	217, 222, 216, 223, 217, 216, 224, 217, 
	216, 225, 217, 216, 217, 226, 216, 217, 
	227, 216, 217, 228, 216, 217, 229, 216, 
	217, 230, 216, 217, 231, 216, 217, 232, 
	216, 217, 233, 216, 217, 234, 216, 217, 
	235, 216, 217, 236, 216, 217, 237, 216, 
	238, 217, 216, 239, 217, 216, 217, 240, 
	216, 217, 226, 216, 241, 0, 242, 0, 
	243, 0, 244, 0, 245, 0, 212, 0, 
	246, 247, 0, 248, 0, 249, 0, 250, 
	0, 251, 0, 252, 0, 253, 0, 254, 
	0, 255, 0, 256, 257, 0, 258, 0, 
	259, 0, 260, 0, 261, 0, 262, 0, 
	263, 0, 264, 0, 265, 0, 266, 0, 
	267, 0, 268, 0, 269, 0, 270, 0, 
	272, 271, 274, 273, 274, 275, 276, 277, 
	278, 276, 279, 280, 281, 282, 283, 282, 
	284, 275, 273, 274, 285, 273, 274, 286, 
	273, 274, 287, 273, 274, 288, 273, 274, 
	289, 273, 274, 290, 273, 274, 291, 273, 
	274, 292, 273, 274, 293, 273, 274, 294, 
	273, 274, 295, 273, 274, 296, 273, 274, 
	297, 273, 274, 298, 273, 274, 299, 273, 
	274, 300, 273, 274, 301, 273, 302, 274, 
	303, 273, 304, 274, 273, 305, 274, 273, 
	306, 274, 273, 274, 307, 273, 274, 299, 
	273, 274, 308, 273, 274, 309, 273, 274, 
	310, 273, 274, 311, 273, 274, 312, 273, 
	274, 313, 273, 274, 314, 273, 274, 315, 
	273, 274, 316, 273, 274, 317, 273, 318, 
	274, 273, 319, 274, 273, 274, 320, 273, 
	274, 307, 273, 274, 301, 273, 274, 321, 
	273, 274, 301, 273, 274, 322, 273, 274, 
	323, 273, 274, 324, 273, 325, 274, 273, 
	326, 274, 273, 274, 327, 273, 274, 328, 
	273, 274, 329, 273, 274, 307, 273, 274, 
	301, 273, 331, 330, 333, 332, 333, 334, 
	335, 336, 337, 335, 338, 339, 340, 341, 
	342, 343, 344, 334, 332, 333, 345, 332, 
	333, 346, 332, 333, 347, 332, 333, 348, 
	332, 333, 349, 332, 333, 350, 332, 333, 
	351, 332, 333, 352, 332, 333, 353, 332, 
	333, 354, 332, 333, 355, 332, 333, 356, 
	332, 333, 357, 332, 333, 358, 332, 333, 
	359, 332, 333, 360, 332, 333, 361, 332, 
	362, 333, 363, 332, 364, 333, 332, 365, 
	333, 332, 366, 333, 332, 333, 367, 332, 
	333, 359, 332, 333, 368, 332, 333, 369, 
	332, 333, 370, 332, 333, 371, 332, 333, 
	372, 332, 333, 373, 332, 333, 374, 332, 
	333, 375, 332, 333, 376, 332, 333, 377, 
	332, 378, 333, 332, 379, 333, 332, 333, 
	380, 332, 333, 367, 332, 333, 361, 332, 
	333, 381, 382, 332, 333, 361, 332, 333, 
	383, 332, 333, 384, 332, 333, 385, 332, 
	333, 386, 332, 333, 387, 332, 333, 388, 
	332, 333, 367, 332, 333, 389, 390, 332, 
	333, 391, 332, 333, 392, 332, 393, 333, 
	332, 394, 333, 332, 333, 395, 332, 333, 
	396, 332, 333, 397, 332, 333, 398, 332, 
	333, 399, 359, 332, 333, 400, 332, 401, 
	333, 332, 402, 333, 332, 333, 403, 332, 
	333, 404, 332, 333, 405, 332, 333, 406, 
	332, 333, 407, 332, 333, 408, 332, 333, 
	409, 332, 333, 366, 332, 333, 410, 332, 
	333, 411, 332, 412, 333, 332, 413, 333, 
	332, 333, 414, 332, 333, 415, 332, 333, 
	366, 332, 333, 381, 332, 333, 361, 332, 
	416, 0, 417, 0, 418, 0, 419, 0, 
	420, 0, 421, 0, 422, 0, 133, 0, 
	125, 0, 69, 0, 423, 424, 423, 0, 
	427, 426, 428, 429, 426, 425, 0, 431, 
	432, 430, 0, 431, 430, 427, 433, 431, 
	432, 433, 430, 427, 434, 435, 436, 437, 
	438, 439, 440, 441, 442, 443, 444, 445, 
	446, 447, 448, 434, 0, 80, 449, 79, 
	80, 450, 79, 80, 451, 79, 80, 452, 
	79, 80, 453, 79, 80, 454, 79, 80, 
	455, 79, 80, 456, 79, 80, 457, 79, 
	80, 458, 79, 459, 80, 79, 460, 80, 
	79, 80, 461, 79, 80, 107, 79, 80, 
	462, 79, 80, 463, 79, 80, 464, 79, 
	80, 465, 79, 80, 466, 79, 80, 467, 
	79, 80, 468, 79, 80, 107, 79, 80, 
	469, 470, 79, 80, 471, 79, 80, 472, 
	79, 80, 473, 79, 80, 468, 79, 80, 
	474, 79, 80, 475, 79, 476, 80, 79, 
	477, 80, 79, 80, 478, 79, 80, 107, 
	79, 80, 479, 480, 79, 80, 481, 79, 
	80, 482, 79, 483, 80, 79, 484, 80, 
	79, 80, 485, 79, 80, 486, 79, 80, 
	487, 79, 80, 488, 79, 80, 489, 108, 
	79, 80, 490, 79, 491, 80, 79, 492, 
	80, 79, 80, 493, 79, 80, 494, 79, 
	80, 495, 79, 80, 496, 79, 80, 497, 
	79, 80, 498, 79, 80, 499, 79, 80, 
	106, 79, 80, 500, 79, 80, 501, 79, 
	502, 80, 79, 503, 80, 79, 80, 504, 
	79, 80, 505, 79, 80, 106, 79, 506, 
	0, 507, 0, 508, 0, 509, 0, 510, 
	0, 511, 0, 512, 0, 513, 0, 514, 
	0, 515, 0, 516, 0, 517, 0, 518, 
	0, 75, 0, 519, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 4, 4, 5, 15, 17, 31, 
	34, 37, 39, 69, 70, 145, 181, 345, 
	346, 347, 3, 6, 7, 8, 9, 8, 
	8, 9, 8, 10, 10, 10, 11, 10, 
	10, 10, 11, 12, 13, 14, 4, 14, 
	15, 4, 16, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 29, 30, 
	428, 32, 33, 33, 4, 16, 35, 36, 
	4, 35, 34, 36, 38, 31, 40, 414, 
	41, 42, 43, 44, 45, 46, 47, 46, 
	47, 47, 4, 48, 62, 367, 375, 386, 
	49, 50, 51, 52, 53, 54, 55, 56, 
	57, 58, 59, 60, 61, 4, 63, 353, 
	64, 65, 66, 67, 68, 4, 4, 5, 
	15, 17, 31, 34, 37, 39, 69, 70, 
	145, 181, 345, 346, 347, 71, 72, 73, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 81, 82, 82, 4, 83, 97, 98, 
	100, 120, 121, 123, 144, 84, 85, 86, 
	87, 88, 89, 90, 91, 92, 93, 94, 
	95, 96, 4, 68, 99, 97, 101, 106, 
	102, 103, 104, 105, 107, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	119, 122, 124, 125, 126, 127, 128, 129, 
	130, 131, 132, 133, 134, 135, 136, 137, 
	138, 139, 140, 141, 142, 143, 146, 175, 
	147, 148, 149, 150, 151, 152, 153, 154, 
	153, 154, 154, 4, 155, 156, 161, 157, 
	158, 159, 160, 68, 162, 163, 164, 165, 
	166, 167, 168, 169, 170, 171, 172, 173, 
	174, 176, 177, 178, 179, 180, 182, 337, 
	183, 184, 185, 186, 187, 188, 189, 190, 
	191, 257, 192, 193, 194, 195, 196, 197, 
	198, 199, 200, 201, 202, 203, 204, 205, 
	206, 205, 206, 206, 4, 207, 221, 222, 
	224, 244, 245, 247, 256, 208, 209, 210, 
	211, 212, 213, 214, 215, 216, 217, 218, 
	219, 220, 4, 68, 223, 221, 225, 230, 
	226, 227, 228, 229, 231, 232, 233, 234, 
	235, 236, 237, 238, 239, 240, 241, 242, 
	243, 246, 248, 249, 250, 251, 252, 253, 
	254, 255, 258, 259, 258, 259, 259, 4, 
	260, 274, 275, 277, 297, 298, 307, 335, 
	336, 261, 262, 263, 264, 265, 266, 267, 
	268, 269, 270, 271, 272, 273, 4, 68, 
	276, 274, 278, 283, 279, 280, 281, 282, 
	284, 285, 286, 287, 288, 289, 290, 291, 
	292, 293, 294, 295, 296, 299, 300, 301, 
	302, 303, 304, 305, 306, 308, 328, 309, 
	310, 311, 312, 313, 314, 315, 316, 317, 
	318, 319, 320, 321, 322, 323, 324, 325, 
	326, 327, 329, 330, 331, 332, 333, 334, 
	338, 339, 340, 341, 342, 343, 344, 347, 
	348, 349, 351, 352, 350, 348, 349, 350, 
	348, 351, 352, 5, 15, 17, 31, 34, 
	37, 39, 69, 70, 145, 181, 345, 346, 
	347, 354, 355, 356, 357, 358, 359, 360, 
	361, 362, 363, 364, 365, 366, 368, 369, 
	370, 371, 372, 373, 374, 376, 380, 377, 
	378, 379, 381, 382, 383, 384, 385, 387, 
	407, 388, 389, 390, 391, 392, 393, 394, 
	395, 396, 397, 398, 399, 400, 401, 402, 
	403, 404, 405, 406, 408, 409, 410, 411, 
	412, 413, 415, 416, 417, 418, 419, 420, 
	421, 422, 423, 424, 425, 426, 427, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 0, 0, 54, 3, 1, 0, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 35, 0, 0, 0, 7, 135, 48, 
	0, 102, 9, 5, 45, 130, 45, 0, 
	33, 122, 33, 33, 0, 11, 106, 0, 
	0, 114, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 13, 31, 126, 60, 
	57, 31, 63, 57, 63, 63, 63, 63, 
	63, 63, 63, 63, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 0, 72, 33, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 0, 81, 84, 0, 0, 0, 
	0, 0, 0, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 75, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 0, 93, 90, 41, 96, 90, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	99, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 428;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 817 "lib/gherkin/rb_lexer/lv.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
        
# line 826 "lib/gherkin/rb_lexer/lv.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1070 "lib/gherkin/rb_lexer/lv.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1109 "lib/gherkin/rb_lexer/lv.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/lv.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
