
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Ja #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/ja.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 16, 19, 23, 24, 25, 26, 
	27, 29, 44, 46, 47, 48, 49, 50, 
	51, 52, 53, 54, 62, 64, 66, 68, 
	70, 72, 74, 76, 78, 80, 82, 84, 
	86, 88, 90, 92, 107, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	119, 120, 131, 134, 137, 139, 141, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 175, 
	178, 181, 183, 185, 187, 189, 191, 193, 
	195, 197, 199, 201, 203, 205, 207, 209, 
	211, 213, 215, 217, 219, 221, 223, 225, 
	227, 229, 231, 233, 236, 238, 240, 242, 
	244, 246, 249, 251, 253, 255, 257, 259, 
	261, 263, 265, 267, 269, 271, 273, 275, 
	277, 279, 281, 283, 285, 287, 289, 291, 
	293, 295, 297, 299, 301, 303, 305, 307, 
	309, 311, 313, 315, 317, 319, 321, 323, 
	325, 327, 329, 331, 333, 335, 337, 339, 
	341, 343, 344, 345, 346, 347, 348, 349, 
	350, 351, 363, 367, 372, 374, 376, 378, 
	380, 382, 384, 386, 388, 390, 392, 394, 
	396, 398, 400, 402, 404, 406, 408, 411, 
	413, 415, 417, 419, 421, 423, 425, 427, 
	429, 432, 435, 437, 439, 441, 443, 445, 
	447, 449, 451, 453, 455, 457, 459, 461, 
	463, 465, 467, 469, 471, 473, 475, 477, 
	479, 481, 483, 485, 487, 489, 492, 494, 
	496, 498, 500, 502, 505, 507, 509, 511, 
	513, 515, 517, 519, 521, 523, 525, 527, 
	529, 531, 533, 535, 537, 539, 541, 543, 
	545, 547, 549, 551, 553, 555, 557, 559, 
	561, 563, 565, 567, 569, 571, 573, 575, 
	577, 579, 581, 583, 585, 587, 589, 591, 
	593, 595, 597, 599, 601, 602, 603, 605, 
	607, 612, 617, 622, 627, 631, 635, 637, 
	638, 639, 640, 641, 642, 643, 644, 645, 
	646, 647, 648, 649, 650, 651, 652, 653, 
	658, 665, 670, 674, 680, 683, 685, 691, 
	706, 708, 710, 712, 714, 716, 717, 718, 
	719, 720, 721, 722, 723, 724, 725, 726, 
	727, 728, 731, 732, 733, 734, 735, 736, 
	737, 738, 739, 740, 741, 742, 743, 744, 
	745, 746, 747, 748, 749, 751, 753, 754, 
	755, 756, 757, 758, 759, 760, 761, 762, 
	763, 764, 765, 766, 767, 768, 769, 770, 
	771, 772, 784, 788, 793, 795, 797, 799, 
	801, 803, 805, 807, 809, 811, 813, 815, 
	817, 819, 821, 823, 825, 827, 829, 832, 
	834, 836, 838, 840, 842, 844, 846, 848, 
	850, 852, 854, 856, 858, 860, 862, 864, 
	866, 868, 870, 872, 874, 876, 878, 880, 
	882, 884, 886, 888, 890, 892, 894, 896, 
	898, 900, 902, 904, 906, 908, 910, 912, 
	914, 916, 918, 920, 922, 924, 926, 928, 
	930, 932, 933, 934, 935, 936, 937, 938, 
	939, 940, 941, 942, 944, 945, 946, 947, 
	948, 949, 950, 951, 964, 968, 973, 975, 
	977, 979, 981, 983, 985, 987, 989, 991, 
	993, 995, 997, 999, 1001, 1003, 1005, 1007, 
	1009, 1012, 1014, 1016, 1018, 1020, 1022, 1024, 
	1026, 1028, 1030, 1033, 1036, 1038, 1040, 1042, 
	1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 
	1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 
	1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 
	1093, 1095, 1097, 1099, 1101, 1103, 1106, 1108, 
	1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 
	1126, 1128, 1130, 1132, 1134, 1136, 1138, 1140, 
	1142, 1144, 1146, 1148, 1150, 1152, 1154, 1156, 
	1158, 1160, 1162, 1164, 1166, 1168, 1170, 1172, 
	1174, 1176, 1178, 1180, 1182, 1184, 1186, 1188, 
	1190, 1192, 1194, 1196, 1198, 1200, 1202, 1204, 
	1206, 1208, 1210, 1212, 1214, 1215, 1216, 1217, 
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 
	1234, 1235, 1236, 1237
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-29, -28, -27, -26, -24, -17, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	-127, -126, -125, -117, -105, -97, -86, -29, 
	-127, -92, 10, 10, 13, -29, -28, -27, 
	-26, -24, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -67, -66, -122, -29, 
	-127, -105, -117, 58, 10, 10, -29, -26, 
	10, 32, 35, 124, 9, 13, -125, 10, 
	-107, 10, -29, 10, -126, 10, -93, 10, 
	-29, 10, -125, 10, -68, 10, -29, 10, 
	-125, 10, -127, 10, -29, 10, -125, 10, 
	-93, 10, 10, 58, -29, -28, -27, -26, 
	-24, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, -119, -115, -26, -113, -112, 
	-87, -97, -24, -125, -67, 58, 10, 10, 
	-29, -28, -26, -24, 10, 32, 35, 37, 
	64, 9, 13, -126, -125, 10, -75, -73, 
	10, -29, 10, -125, 10, -77, 10, -29, 
	10, -125, 10, -105, 10, -29, 10, -125, 
	10, -85, 10, 10, 58, -29, 10, -125, 
	10, -118, 10, -29, 10, -125, 10, -86, 
	10, -29, 10, -126, 10, -86, 10, -29, 
	10, 58, -126, -125, 10, -94, 10, -29, 
	10, -126, 10, -90, 10, -29, 10, -125, 
	10, -120, 10, -29, 10, -125, 10, -87, 
	10, -29, 10, -126, 10, -92, 10, -29, 
	10, -125, 10, -77, 10, -122, 10, -29, 
	10, -125, 10, -77, 10, -29, 10, -125, 
	10, -105, 10, -29, 10, -125, 10, -84, 
	10, -29, 10, 58, -125, 10, -68, 10, 
	-29, 10, -125, 10, -120, 10, -122, -107, 
	10, -29, 10, -125, 10, -77, 10, -29, 
	10, -125, 10, -105, 10, -29, 10, -125, 
	10, -84, 10, -29, 10, -126, 10, -93, 
	10, -29, 10, -125, 10, -68, 10, -29, 
	10, -125, 10, -127, 10, -29, 10, -125, 
	10, -93, 10, -66, 10, -117, 10, -87, 
	10, -97, 10, -24, 10, -125, 10, -67, 
	10, -125, 10, -116, 10, -26, 10, -103, 
	10, -81, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, -125, 
	-116, -26, -103, -81, 58, 10, 10, -29, 
	-28, -27, -26, 10, 32, 35, 37, 42, 
	64, 9, 13, -127, -126, -125, 10, -117, 
	-105, -97, -86, 10, -29, 10, -127, 10, 
	-92, 10, -29, 10, -127, 10, -117, 10, 
	-29, 10, -127, 10, -105, 10, -29, 10, 
	-127, 10, -96, 10, -29, 10, -126, 10, 
	-119, 10, -29, 10, -127, 10, -80, 10, 
	-126, -73, 10, -29, 10, -125, 10, -118, 
	10, -29, 10, -125, 10, -86, 10, -29, 
	10, -126, 10, -86, 10, -29, 10, 58, 
	-126, -125, 10, -94, 10, -29, 10, -126, 
	10, -90, 10, -29, 10, -125, 10, -120, 
	10, -29, 10, -125, 10, -87, 10, -29, 
	10, -126, 10, -92, 10, -29, 10, -125, 
	10, -77, 10, 10, 58, -122, 10, -29, 
	10, -125, 10, -77, 10, -29, 10, -125, 
	10, -105, 10, -29, 10, -125, 10, -84, 
	10, -29, 10, 58, -125, 10, -68, 10, 
	-29, 10, -125, 10, -120, 10, -122, -107, 
	10, -29, 10, -125, 10, -77, 10, -29, 
	10, -125, 10, -105, 10, -29, 10, -125, 
	10, -84, 10, -29, 10, -126, 10, -93, 
	10, -29, 10, -125, 10, -68, 10, -29, 
	10, -125, 10, -127, 10, -29, 10, -125, 
	10, -93, 10, -67, 10, -122, 10, -119, 
	10, -115, 10, -26, 10, -113, 10, -112, 
	10, -87, 10, -97, 10, -24, 10, -125, 
	10, -67, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 32, 124, 
	9, 13, 10, 32, 92, 124, 9, 13, 
	10, 92, 124, 10, 92, 10, 32, 92, 
	124, 9, 13, -29, -28, -27, -26, -24, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -87, 10, -97, 10, -24, 10, 
	-125, 10, -67, 10, -29, -127, -117, -29, 
	-127, -96, -29, -126, -119, -29, -127, -80, 
	-126, -75, -73, -29, -125, -77, -29, -125, 
	-105, -29, -125, -85, -29, -125, -118, -29, 
	-125, -86, -29, -126, -86, -29, 58, -126, 
	-125, -94, -29, -126, -90, -29, -125, -120, 
	-29, -125, -87, -29, -126, -92, -29, -125, 
	-77, 58, 10, 10, -29, -28, -27, -26, 
	10, 32, 35, 37, 42, 64, 9, 13, 
	-127, -126, -125, 10, -117, -105, -97, -86, 
	10, -29, 10, -127, 10, -92, 10, -29, 
	10, -127, 10, -117, 10, -29, 10, -127, 
	10, -105, 10, -29, 10, -127, 10, -96, 
	10, -29, 10, -126, 10, -119, 10, -29, 
	10, -127, 10, -80, 10, -126, -73, 10, 
	-29, 10, -125, 10, -118, 10, -29, 10, 
	-125, 10, -86, 10, -29, 10, -126, 10, 
	-86, 10, 10, 58, -107, 10, -29, 10, 
	-126, 10, -93, 10, -29, 10, -125, 10, 
	-68, 10, -29, 10, -125, 10, -127, 10, 
	-29, 10, -125, 10, -93, 10, -67, 10, 
	-122, 10, -119, 10, -115, 10, -26, 10, 
	-113, 10, -112, 10, -87, 10, -97, 10, 
	-24, 10, -125, 10, -67, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, -122, -29, -125, -77, 
	-29, -125, -105, -29, -125, -84, -29, 58, 
	-125, -68, -29, -125, -120, 10, 10, -29, 
	-28, -27, -26, -24, 10, 32, 35, 37, 
	42, 64, 9, 13, -127, -126, -125, 10, 
	-117, -105, -97, -86, 10, -29, 10, -127, 
	10, -92, 10, -29, 10, -127, 10, -117, 
	10, -29, 10, -127, 10, -105, 10, -29, 
	10, -127, 10, -96, 10, -29, 10, -126, 
	10, -119, 10, -29, 10, -127, 10, -80, 
	10, -126, -73, 10, -29, 10, -125, 10, 
	-118, 10, -29, 10, -125, 10, -86, 10, 
	-29, 10, -126, 10, -86, 10, -29, 10, 
	58, -126, -125, 10, -94, 10, -29, 10, 
	-126, 10, -90, 10, -29, 10, -125, 10, 
	-120, 10, -29, 10, -125, 10, -87, 10, 
	-29, 10, -126, 10, -92, 10, -29, 10, 
	-125, 10, -77, 10, 10, 58, -122, 10, 
	-29, 10, -125, 10, -77, 10, -29, 10, 
	-125, 10, -105, 10, -29, 10, -125, 10, 
	-84, 10, -29, 10, 58, -125, 10, -68, 
	10, -29, 10, -125, 10, -120, 10, -122, 
	-107, 10, -29, 10, -125, 10, -77, 10, 
	-29, 10, -125, 10, -105, 10, -29, 10, 
	-125, 10, -84, 10, -29, 10, -126, 10, 
	-93, 10, -29, 10, -125, 10, -68, 10, 
	-29, 10, -125, 10, -127, 10, -29, 10, 
	-125, 10, -93, 10, -67, 10, -122, 10, 
	-119, 10, -115, 10, -26, 10, -113, 10, 
	-112, 10, -87, 10, -97, 10, -24, 10, 
	-125, 10, -67, 10, -125, 10, -116, 10, 
	-26, 10, -103, 10, -81, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, -122, -107, -29, -125, 
	-77, -29, -125, -105, -29, -125, -84, -29, 
	-126, -93, -29, -125, -68, -29, -125, -127, 
	-29, -125, -93, -69, -65, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 14, 3, 4, 1, 1, 1, 1, 
	2, 13, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 6, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 13, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 9, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 10, 4, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 2, 2, 
	3, 3, 3, 3, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	5, 3, 2, 4, 3, 2, 4, 13, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 10, 4, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 11, 4, 5, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 16, 20, 25, 27, 29, 31, 
	33, 36, 51, 54, 56, 58, 60, 62, 
	64, 66, 68, 70, 78, 81, 84, 87, 
	90, 93, 96, 99, 102, 105, 108, 111, 
	114, 117, 120, 123, 138, 140, 142, 144, 
	146, 148, 150, 152, 154, 156, 158, 160, 
	162, 164, 175, 179, 183, 186, 189, 192, 
	195, 198, 201, 204, 207, 210, 213, 216, 
	219, 222, 225, 228, 231, 234, 237, 240, 
	244, 248, 251, 254, 257, 260, 263, 266, 
	269, 272, 275, 278, 281, 284, 287, 290, 
	293, 296, 299, 302, 305, 308, 311, 314, 
	317, 320, 323, 326, 330, 333, 336, 339, 
	342, 345, 349, 352, 355, 358, 361, 364, 
	367, 370, 373, 376, 379, 382, 385, 388, 
	391, 394, 397, 400, 403, 406, 409, 412, 
	415, 418, 421, 424, 427, 430, 433, 436, 
	439, 442, 445, 448, 451, 454, 457, 460, 
	463, 466, 469, 472, 475, 478, 481, 484, 
	487, 490, 492, 494, 496, 498, 500, 502, 
	504, 506, 518, 523, 529, 532, 535, 538, 
	541, 544, 547, 550, 553, 556, 559, 562, 
	565, 568, 571, 574, 577, 580, 583, 587, 
	590, 593, 596, 599, 602, 605, 608, 611, 
	614, 618, 622, 625, 628, 631, 634, 637, 
	640, 643, 646, 649, 652, 655, 658, 661, 
	664, 667, 670, 673, 676, 679, 682, 685, 
	688, 691, 694, 697, 700, 703, 707, 710, 
	713, 716, 719, 722, 726, 729, 732, 735, 
	738, 741, 744, 747, 750, 753, 756, 759, 
	762, 765, 768, 771, 774, 777, 780, 783, 
	786, 789, 792, 795, 798, 801, 804, 807, 
	810, 813, 816, 819, 822, 825, 828, 831, 
	834, 837, 840, 843, 846, 849, 852, 855, 
	858, 861, 864, 867, 870, 872, 874, 877, 
	880, 885, 890, 895, 900, 904, 908, 911, 
	913, 915, 917, 919, 921, 923, 925, 927, 
	929, 931, 933, 935, 937, 939, 941, 943, 
	948, 955, 960, 964, 970, 974, 977, 983, 
	998, 1001, 1004, 1007, 1010, 1013, 1015, 1017, 
	1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 
	1035, 1037, 1041, 1043, 1045, 1047, 1049, 1051, 
	1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 
	1069, 1071, 1073, 1075, 1077, 1080, 1083, 1085, 
	1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 
	1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 
	1119, 1121, 1133, 1138, 1144, 1147, 1150, 1153, 
	1156, 1159, 1162, 1165, 1168, 1171, 1174, 1177, 
	1180, 1183, 1186, 1189, 1192, 1195, 1198, 1202, 
	1205, 1208, 1211, 1214, 1217, 1220, 1223, 1226, 
	1229, 1232, 1235, 1238, 1241, 1244, 1247, 1250, 
	1253, 1256, 1259, 1262, 1265, 1268, 1271, 1274, 
	1277, 1280, 1283, 1286, 1289, 1292, 1295, 1298, 
	1301, 1304, 1307, 1310, 1313, 1316, 1319, 1322, 
	1325, 1328, 1331, 1334, 1337, 1340, 1343, 1346, 
	1349, 1352, 1354, 1356, 1358, 1360, 1362, 1364, 
	1366, 1368, 1370, 1372, 1375, 1377, 1379, 1381, 
	1383, 1385, 1387, 1389, 1402, 1407, 1413, 1416, 
	1419, 1422, 1425, 1428, 1431, 1434, 1437, 1440, 
	1443, 1446, 1449, 1452, 1455, 1458, 1461, 1464, 
	1467, 1471, 1474, 1477, 1480, 1483, 1486, 1489, 
	1492, 1495, 1498, 1502, 1506, 1509, 1512, 1515, 
	1518, 1521, 1524, 1527, 1530, 1533, 1536, 1539, 
	1542, 1545, 1548, 1551, 1554, 1557, 1560, 1563, 
	1566, 1569, 1572, 1575, 1578, 1581, 1584, 1587, 
	1591, 1594, 1597, 1600, 1603, 1606, 1610, 1613, 
	1616, 1619, 1622, 1625, 1628, 1631, 1634, 1637, 
	1640, 1643, 1646, 1649, 1652, 1655, 1658, 1661, 
	1664, 1667, 1670, 1673, 1676, 1679, 1682, 1685, 
	1688, 1691, 1694, 1697, 1700, 1703, 1706, 1709, 
	1712, 1715, 1718, 1721, 1724, 1727, 1730, 1733, 
	1736, 1739, 1742, 1745, 1748, 1751, 1754, 1757, 
	1760, 1763, 1766, 1769, 1772, 1774, 1776, 1778, 
	1780, 1782, 1784, 1786, 1788, 1790, 1792, 1794, 
	1796, 1798, 1800, 1802, 1804, 1806, 1808, 1810, 
	1812, 1814, 1816, 1818
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 2, 3, 4, 5, 6, 8, 7, 
	9, 10, 11, 12, 13, 14, 7, 0, 
	15, 16, 17, 0, 18, 19, 20, 21, 
	0, 22, 0, 23, 0, 24, 0, 0, 
	25, 27, 28, 26, 1, 2, 3, 4, 
	5, 8, 7, 9, 10, 11, 12, 13, 
	14, 7, 0, 29, 30, 0, 31, 0, 
	32, 0, 33, 0, 24, 0, 34, 0, 
	35, 0, 37, 36, 39, 38, 40, 41, 
	39, 42, 43, 43, 42, 38, 44, 39, 
	38, 45, 39, 38, 46, 39, 38, 47, 
	39, 38, 48, 39, 38, 49, 39, 38, 
	50, 39, 38, 51, 39, 38, 52, 39, 
	38, 53, 39, 38, 54, 39, 38, 55, 
	39, 38, 56, 39, 38, 57, 39, 38, 
	39, 58, 38, 59, 60, 61, 62, 63, 
	65, 64, 66, 67, 68, 69, 70, 71, 
	64, 0, 72, 0, 73, 0, 74, 0, 
	75, 0, 24, 0, 76, 0, 77, 0, 
	78, 0, 79, 0, 80, 0, 81, 0, 
	83, 82, 85, 84, 86, 87, 88, 89, 
	85, 90, 91, 92, 91, 90, 84, 93, 
	94, 85, 84, 95, 96, 85, 84, 97, 
	85, 84, 98, 85, 84, 99, 85, 84, 
	100, 85, 84, 101, 85, 84, 102, 85, 
	84, 103, 85, 84, 104, 85, 84, 105, 
	85, 84, 85, 106, 84, 107, 85, 84, 
	108, 85, 84, 109, 85, 84, 110, 85, 
	84, 111, 85, 84, 112, 85, 84, 113, 
	85, 84, 114, 85, 84, 115, 85, 84, 
	116, 85, 106, 84, 117, 118, 85, 84, 
	119, 85, 84, 120, 85, 84, 121, 85, 
	84, 122, 85, 84, 123, 85, 84, 124, 
	85, 84, 125, 85, 84, 126, 85, 84, 
	127, 85, 84, 128, 85, 84, 129, 85, 
	84, 130, 85, 84, 131, 85, 84, 132, 
	85, 84, 133, 85, 84, 105, 85, 84, 
	134, 85, 84, 135, 85, 84, 136, 85, 
	84, 137, 85, 84, 138, 85, 84, 139, 
	85, 84, 140, 85, 84, 141, 85, 84, 
	142, 85, 84, 143, 85, 84, 144, 85, 
	106, 84, 145, 85, 84, 146, 85, 84, 
	147, 85, 84, 148, 85, 84, 105, 85, 
	84, 149, 150, 85, 84, 151, 85, 84, 
	152, 85, 84, 153, 85, 84, 154, 85, 
	84, 155, 85, 84, 156, 85, 84, 157, 
	85, 84, 158, 85, 84, 105, 85, 84, 
	159, 85, 84, 160, 85, 84, 161, 85, 
	84, 162, 85, 84, 163, 85, 84, 164, 
	85, 84, 165, 85, 84, 166, 85, 84, 
	167, 85, 84, 168, 85, 84, 169, 85, 
	84, 105, 85, 84, 170, 85, 84, 105, 
	85, 84, 171, 85, 84, 172, 85, 84, 
	173, 85, 84, 174, 85, 84, 105, 85, 
	84, 175, 85, 84, 176, 85, 84, 177, 
	85, 84, 178, 85, 84, 105, 85, 84, 
	85, 179, 84, 85, 180, 84, 85, 181, 
	84, 85, 182, 84, 85, 183, 84, 85, 
	184, 84, 85, 185, 84, 85, 186, 84, 
	85, 187, 84, 85, 188, 84, 85, 189, 
	84, 85, 190, 84, 85, 191, 84, 85, 
	192, 84, 193, 0, 194, 0, 195, 0, 
	196, 0, 197, 0, 198, 0, 200, 199, 
	202, 201, 203, 204, 205, 206, 202, 207, 
	208, 209, 210, 208, 207, 201, 211, 212, 
	213, 202, 201, 214, 215, 216, 217, 202, 
	201, 218, 202, 201, 219, 202, 201, 220, 
	202, 201, 221, 202, 201, 222, 202, 201, 
	223, 202, 201, 224, 202, 201, 225, 202, 
	201, 220, 202, 201, 226, 202, 201, 227, 
	202, 201, 223, 202, 201, 228, 202, 201, 
	229, 202, 201, 230, 202, 201, 231, 202, 
	201, 232, 202, 201, 220, 202, 201, 223, 
	233, 202, 201, 234, 202, 201, 235, 202, 
	201, 236, 202, 201, 237, 202, 201, 238, 
	202, 201, 239, 202, 201, 240, 202, 201, 
	241, 202, 201, 242, 202, 201, 243, 202, 
	220, 201, 244, 245, 202, 201, 246, 202, 
	201, 247, 202, 201, 248, 202, 201, 249, 
	202, 201, 250, 202, 201, 251, 202, 201, 
	252, 202, 201, 253, 202, 201, 254, 202, 
	201, 255, 202, 201, 256, 202, 201, 257, 
	202, 201, 258, 202, 201, 259, 202, 201, 
	260, 202, 201, 261, 202, 201, 202, 220, 
	201, 262, 202, 201, 263, 202, 201, 264, 
	202, 201, 265, 202, 201, 266, 202, 201, 
	267, 202, 201, 268, 202, 201, 269, 202, 
	201, 270, 202, 201, 271, 202, 201, 272, 
	202, 220, 201, 273, 202, 201, 274, 202, 
	201, 275, 202, 201, 276, 202, 201, 261, 
	202, 201, 277, 278, 202, 201, 279, 202, 
	201, 280, 202, 201, 281, 202, 201, 282, 
	202, 201, 283, 202, 201, 284, 202, 201, 
	285, 202, 201, 286, 202, 201, 261, 202, 
	201, 287, 202, 201, 288, 202, 201, 289, 
	202, 201, 290, 202, 201, 291, 202, 201, 
	292, 202, 201, 293, 202, 201, 294, 202, 
	201, 295, 202, 201, 296, 202, 201, 297, 
	202, 201, 261, 202, 201, 298, 202, 201, 
	223, 202, 201, 299, 202, 201, 300, 202, 
	201, 301, 202, 201, 302, 202, 201, 220, 
	202, 201, 303, 202, 201, 304, 202, 201, 
	305, 202, 201, 306, 202, 201, 261, 202, 
	201, 202, 307, 201, 202, 308, 201, 202, 
	309, 201, 202, 310, 201, 202, 311, 201, 
	202, 312, 201, 202, 313, 201, 202, 314, 
	201, 202, 315, 201, 202, 316, 201, 202, 
	317, 201, 202, 318, 201, 202, 319, 201, 
	202, 320, 201, 202, 220, 201, 321, 0, 
	322, 0, 324, 325, 323, 327, 328, 326, 
	331, 330, 332, 330, 329, 335, 334, 336, 
	334, 333, 335, 334, 337, 334, 333, 335, 
	334, 338, 334, 333, 340, 339, 339, 0, 
	8, 341, 341, 0, 343, 344, 342, 8, 
	0, 345, 0, 346, 0, 347, 0, 348, 
	0, 349, 0, 350, 0, 351, 0, 352, 
	0, 353, 0, 354, 0, 355, 0, 356, 
	0, 357, 0, 358, 0, 24, 0, 0, 
	0, 0, 0, 359, 360, 361, 360, 360, 
	363, 362, 359, 8, 364, 13, 364, 0, 
	365, 366, 365, 0, 369, 368, 370, 371, 
	368, 367, 0, 373, 374, 372, 0, 373, 
	372, 369, 375, 373, 374, 375, 372, 376, 
	377, 378, 379, 380, 369, 381, 382, 383, 
	384, 385, 386, 387, 381, 0, 388, 39, 
	38, 389, 39, 38, 390, 39, 38, 391, 
	39, 38, 57, 39, 38, 392, 0, 393, 
	0, 31, 0, 394, 0, 395, 0, 31, 
	0, 396, 0, 397, 0, 398, 0, 399, 
	0, 400, 0, 24, 0, 31, 401, 402, 
	0, 403, 0, 404, 0, 405, 0, 406, 
	0, 407, 0, 408, 0, 409, 0, 410, 
	0, 34, 0, 411, 0, 412, 0, 413, 
	0, 414, 0, 415, 0, 416, 0, 417, 
	0, 418, 0, 419, 0, 420, 421, 0, 
	422, 423, 0, 424, 0, 425, 0, 426, 
	0, 427, 0, 428, 0, 429, 0, 430, 
	0, 431, 0, 432, 0, 433, 0, 434, 
	0, 435, 0, 436, 0, 437, 0, 438, 
	0, 439, 0, 440, 0, 442, 441, 444, 
	443, 445, 446, 447, 448, 444, 449, 450, 
	451, 452, 450, 449, 443, 453, 454, 455, 
	444, 443, 456, 457, 458, 459, 444, 443, 
	460, 444, 443, 461, 444, 443, 462, 444, 
	443, 463, 444, 443, 464, 444, 443, 465, 
	444, 443, 466, 444, 443, 467, 444, 443, 
	462, 444, 443, 468, 444, 443, 469, 444, 
	443, 465, 444, 443, 470, 444, 443, 471, 
	444, 443, 472, 444, 443, 473, 444, 443, 
	474, 444, 443, 462, 444, 443, 465, 475, 
	444, 443, 476, 444, 443, 477, 444, 443, 
	478, 444, 443, 479, 444, 443, 480, 444, 
	443, 481, 444, 443, 482, 444, 443, 483, 
	444, 443, 484, 444, 443, 444, 462, 443, 
	485, 444, 443, 486, 444, 443, 487, 444, 
	443, 488, 444, 443, 489, 444, 443, 490, 
	444, 443, 491, 444, 443, 492, 444, 443, 
	493, 444, 443, 494, 444, 443, 495, 444, 
	443, 496, 444, 443, 484, 444, 443, 497, 
	444, 443, 465, 444, 443, 498, 444, 443, 
	499, 444, 443, 500, 444, 443, 501, 444, 
	443, 462, 444, 443, 502, 444, 443, 503, 
	444, 443, 504, 444, 443, 505, 444, 443, 
	484, 444, 443, 444, 506, 443, 444, 507, 
	443, 444, 508, 443, 444, 509, 443, 444, 
	510, 443, 444, 511, 443, 444, 512, 443, 
	444, 513, 443, 444, 514, 443, 444, 515, 
	443, 444, 516, 443, 444, 517, 443, 444, 
	518, 443, 444, 519, 443, 444, 462, 443, 
	520, 0, 521, 0, 522, 0, 523, 0, 
	524, 0, 525, 0, 526, 0, 527, 0, 
	528, 0, 529, 0, 530, 440, 0, 531, 
	0, 532, 0, 533, 0, 534, 0, 439, 
	0, 536, 535, 538, 537, 539, 540, 541, 
	542, 543, 538, 544, 545, 546, 547, 545, 
	544, 537, 548, 549, 550, 538, 537, 551, 
	552, 553, 554, 538, 537, 555, 538, 537, 
	556, 538, 537, 557, 538, 537, 558, 538, 
	537, 559, 538, 537, 560, 538, 537, 561, 
	538, 537, 562, 538, 537, 557, 538, 537, 
	563, 538, 537, 564, 538, 537, 560, 538, 
	537, 565, 538, 537, 566, 538, 537, 567, 
	538, 537, 568, 538, 537, 569, 538, 537, 
	557, 538, 537, 560, 570, 538, 537, 571, 
	538, 537, 572, 538, 537, 573, 538, 537, 
	574, 538, 537, 575, 538, 537, 576, 538, 
	537, 577, 538, 537, 578, 538, 537, 579, 
	538, 537, 580, 538, 557, 537, 581, 582, 
	538, 537, 583, 538, 537, 584, 538, 537, 
	585, 538, 537, 586, 538, 537, 587, 538, 
	537, 588, 538, 537, 589, 538, 537, 590, 
	538, 537, 591, 538, 537, 592, 538, 537, 
	593, 538, 537, 594, 538, 537, 595, 538, 
	537, 596, 538, 537, 597, 538, 537, 598, 
	538, 537, 538, 557, 537, 599, 538, 537, 
	600, 538, 537, 601, 538, 537, 602, 538, 
	537, 603, 538, 537, 604, 538, 537, 605, 
	538, 537, 606, 538, 537, 607, 538, 537, 
	608, 538, 537, 609, 538, 557, 537, 610, 
	538, 537, 611, 538, 537, 612, 538, 537, 
	613, 538, 537, 598, 538, 537, 614, 615, 
	538, 537, 616, 538, 537, 617, 538, 537, 
	618, 538, 537, 619, 538, 537, 620, 538, 
	537, 621, 538, 537, 622, 538, 537, 623, 
	538, 537, 598, 538, 537, 624, 538, 537, 
	625, 538, 537, 626, 538, 537, 627, 538, 
	537, 628, 538, 537, 629, 538, 537, 630, 
	538, 537, 631, 538, 537, 632, 538, 537, 
	633, 538, 537, 634, 538, 537, 598, 538, 
	537, 635, 538, 537, 560, 538, 537, 636, 
	538, 537, 637, 538, 537, 638, 538, 537, 
	639, 538, 537, 557, 538, 537, 640, 538, 
	537, 641, 538, 537, 642, 538, 537, 643, 
	538, 537, 598, 538, 537, 644, 538, 537, 
	645, 538, 537, 646, 538, 537, 647, 538, 
	537, 598, 538, 537, 538, 648, 537, 538, 
	649, 537, 538, 650, 537, 538, 651, 537, 
	538, 652, 537, 538, 653, 537, 538, 654, 
	537, 538, 655, 537, 538, 656, 537, 538, 
	657, 537, 538, 658, 537, 538, 659, 537, 
	538, 660, 537, 538, 661, 537, 538, 557, 
	537, 662, 663, 0, 664, 0, 665, 0, 
	666, 0, 667, 0, 668, 0, 669, 0, 
	670, 0, 671, 0, 439, 0, 672, 0, 
	673, 0, 674, 0, 675, 0, 676, 0, 
	677, 0, 678, 0, 679, 0, 680, 0, 
	681, 0, 682, 0, 80, 0, 683, 0, 
	7, 0, 684, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 10, 36, 41, 153, 601, 9, 
	9, 276, 286, 288, 302, 303, 306, 3, 
	329, 579, 4, 317, 320, 323, 5, 6, 
	7, 8, 8, 9, 287, 11, 15, 12, 
	13, 14, 16, 17, 18, 19, 18, 19, 
	20, 312, 19, 9, 21, 22, 23, 24, 
	25, 26, 27, 28, 29, 30, 31, 32, 
	33, 34, 35, 2, 10, 36, 41, 153, 
	9, 9, 276, 286, 288, 302, 303, 306, 
	37, 38, 39, 40, 42, 43, 44, 45, 
	46, 47, 48, 49, 48, 49, 50, 127, 
	129, 134, 49, 9, 139, 51, 105, 52, 
	62, 53, 54, 55, 56, 57, 58, 59, 
	60, 61, 35, 63, 64, 65, 66, 67, 
	68, 69, 70, 71, 72, 73, 89, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 90, 91, 
	92, 93, 94, 95, 96, 97, 98, 99, 
	100, 101, 102, 103, 104, 106, 115, 107, 
	108, 109, 110, 111, 112, 113, 114, 116, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 128, 130, 131, 132, 133, 135, 
	136, 137, 138, 140, 141, 142, 143, 144, 
	145, 146, 147, 148, 149, 150, 151, 152, 
	9, 154, 155, 156, 157, 158, 159, 160, 
	161, 160, 161, 162, 249, 251, 256, 161, 
	9, 261, 275, 163, 182, 227, 164, 167, 
	173, 176, 165, 166, 35, 168, 169, 170, 
	171, 172, 174, 175, 177, 178, 179, 180, 
	181, 183, 184, 185, 186, 187, 188, 189, 
	190, 191, 192, 193, 194, 211, 195, 196, 
	197, 198, 199, 200, 201, 202, 203, 204, 
	205, 206, 207, 208, 209, 210, 212, 213, 
	214, 215, 216, 217, 218, 219, 220, 221, 
	222, 223, 224, 225, 226, 228, 237, 229, 
	230, 231, 232, 233, 234, 235, 236, 238, 
	239, 240, 241, 242, 243, 244, 245, 246, 
	247, 248, 250, 252, 253, 254, 255, 257, 
	258, 259, 260, 262, 263, 264, 265, 266, 
	267, 268, 269, 270, 271, 272, 273, 274, 
	9, 277, 278, 279, 280, 279, 279, 280, 
	279, 281, 281, 281, 282, 281, 281, 281, 
	282, 283, 284, 285, 9, 285, 286, 9, 
	287, 289, 290, 291, 292, 293, 294, 295, 
	296, 297, 298, 299, 300, 301, 603, 304, 
	305, 9, 304, 303, 305, 306, 307, 308, 
	310, 311, 309, 307, 308, 309, 307, 310, 
	2, 10, 36, 41, 153, 311, 276, 286, 
	288, 302, 303, 306, 313, 314, 315, 316, 
	318, 319, 321, 322, 324, 325, 326, 327, 
	328, 330, 339, 331, 332, 333, 334, 335, 
	336, 337, 338, 340, 341, 342, 343, 344, 
	345, 346, 347, 348, 349, 457, 350, 441, 
	351, 352, 353, 354, 355, 356, 357, 358, 
	359, 360, 361, 362, 363, 364, 365, 366, 
	367, 368, 369, 368, 369, 370, 414, 416, 
	421, 369, 9, 426, 440, 371, 390, 401, 
	372, 375, 381, 384, 373, 374, 35, 376, 
	377, 378, 379, 380, 382, 383, 385, 386, 
	387, 388, 389, 391, 392, 393, 394, 395, 
	396, 397, 398, 399, 400, 402, 403, 404, 
	405, 406, 407, 408, 409, 410, 411, 412, 
	413, 415, 417, 418, 419, 420, 422, 423, 
	424, 425, 427, 428, 429, 430, 431, 432, 
	433, 434, 435, 436, 437, 438, 439, 9, 
	442, 443, 444, 445, 446, 447, 448, 449, 
	450, 451, 452, 453, 454, 455, 456, 458, 
	459, 458, 459, 460, 547, 549, 554, 559, 
	459, 9, 564, 578, 461, 480, 525, 462, 
	465, 471, 474, 463, 464, 35, 466, 467, 
	468, 469, 470, 472, 473, 475, 476, 477, 
	478, 479, 481, 482, 483, 484, 485, 486, 
	487, 488, 489, 490, 491, 492, 509, 493, 
	494, 495, 496, 497, 498, 499, 500, 501, 
	502, 503, 504, 505, 506, 507, 508, 510, 
	511, 512, 513, 514, 515, 516, 517, 518, 
	519, 520, 521, 522, 523, 524, 526, 535, 
	527, 528, 529, 530, 531, 532, 533, 534, 
	536, 537, 538, 539, 540, 541, 542, 543, 
	544, 545, 546, 548, 550, 551, 552, 553, 
	555, 556, 557, 558, 560, 561, 562, 563, 
	565, 566, 567, 568, 569, 570, 571, 572, 
	573, 574, 575, 576, 577, 9, 580, 589, 
	581, 582, 583, 584, 585, 586, 587, 588, 
	590, 591, 592, 593, 594, 595, 596, 597, 
	598, 599, 600, 602, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 29, 29, 29, 29, 29, 0, 0, 
	54, 3, 1, 0, 29, 1, 35, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 0, 110, 23, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	84, 84, 0, 81, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 63, 63, 63, 63, 63, 
	31, 126, 60, 57, 31, 63, 57, 66, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 84, 84, 
	84, 84, 0, 69, 33, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 84, 84, 84, 84, 0, 
	72, 33, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 0, 0, 7, 135, 48, 0, 102, 
	9, 5, 45, 130, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 118, 27, 51, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	96, 96, 96, 96, 96, 0, 93, 90, 
	41, 96, 90, 99, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 84, 84, 84, 
	84, 0, 78, 33, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 84, 84, 84, 84, 84, 
	0, 75, 33, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 603;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 1071 "lib/gherkin/rb_lexer/ja.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
        
# line 1080 "lib/gherkin/rb_lexer/ja.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1324 "lib/gherkin/rb_lexer/ja.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1363 "lib/gherkin/rb_lexer/ja.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ja.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
