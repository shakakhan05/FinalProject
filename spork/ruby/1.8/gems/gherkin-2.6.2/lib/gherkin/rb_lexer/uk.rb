
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Uk #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/uk.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 12, 22, 23, 24, 26, 37, 
	38, 39, 41, 43, 48, 53, 58, 63, 
	67, 71, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 88, 93, 100, 105, 109, 115, 118, 
	120, 126, 137, 139, 140, 141, 142, 143, 
	144, 145, 146, 147, 148, 149, 150, 151, 
	152, 153, 154, 155, 156, 157, 158, 159, 
	160, 161, 162, 163, 164, 165, 166, 167, 
	168, 169, 170, 171, 172, 174, 175, 176, 
	177, 178, 179, 180, 181, 182, 183, 184, 
	185, 186, 187, 188, 189, 190, 191, 192, 
	193, 194, 203, 214, 216, 227, 230, 232, 
	234, 236, 238, 240, 242, 244, 246, 248, 
	250, 252, 254, 256, 258, 260, 262, 264, 
	266, 268, 270, 272, 274, 276, 278, 280, 
	282, 284, 286, 288, 290, 292, 294, 296, 
	298, 300, 302, 304, 306, 308, 310, 312, 
	314, 316, 318, 320, 322, 324, 326, 328, 
	330, 332, 335, 337, 339, 341, 343, 346, 
	348, 350, 352, 354, 356, 358, 360, 362, 
	364, 366, 368, 370, 372, 374, 376, 378, 
	380, 382, 384, 386, 388, 390, 392, 394, 
	396, 398, 400, 402, 404, 406, 408, 410, 
	412, 414, 416, 418, 420, 422, 424, 426, 
	428, 430, 432, 434, 436, 439, 442, 444, 
	446, 448, 450, 452, 454, 456, 458, 460, 
	462, 464, 466, 468, 470, 472, 474, 476, 
	478, 480, 482, 484, 486, 488, 490, 492, 
	494, 496, 498, 500, 502, 504, 506, 508, 
	510, 512, 514, 516, 517, 518, 519, 520, 
	522, 523, 524, 525, 526, 527, 528, 529, 
	530, 531, 532, 533, 540, 542, 544, 546, 
	548, 550, 552, 554, 556, 558, 560, 562, 
	564, 566, 568, 570, 572, 574, 576, 578, 
	580, 581, 582, 583, 584, 585, 586, 587, 
	588, 589, 590, 591, 592, 594, 595, 596, 
	597, 598, 600, 601, 602, 603, 604, 605, 
	606, 607, 608, 609, 610, 611, 612, 613, 
	614, 615, 616, 617, 618, 619, 620, 621, 
	622, 623, 624, 625, 626, 627, 628, 629, 
	630, 631, 632, 633, 634, 643, 654, 656, 
	659, 661, 663, 665, 667, 669, 671, 673, 
	675, 677, 679, 681, 683, 685, 687, 689, 
	691, 693, 695, 697, 699, 701, 703, 705, 
	707, 709, 711, 713, 715, 717, 719, 721, 
	723, 725, 727, 729, 731, 733, 735, 737, 
	739, 741, 743, 745, 747, 749, 751, 753, 
	755, 757, 759, 761, 764, 766, 768, 770, 
	772, 774, 776, 778, 780, 782, 784, 786, 
	788, 790, 792, 794, 796, 798, 800, 802, 
	805, 808, 810, 812, 814, 816, 818, 820, 
	822, 824, 826, 828, 830, 832, 834, 836, 
	838, 840, 842, 844, 846, 848, 850, 852, 
	854, 856, 858, 860, 862, 864, 866, 868, 
	870, 872, 874, 876, 878, 880, 882, 883, 
	884, 885, 886, 887, 888, 889, 890, 891, 
	892, 893, 894, 895, 896, 897, 906, 917, 
	919, 922, 924, 926, 928, 930, 932, 934, 
	936, 938, 940, 942, 944, 946, 948, 950, 
	952, 954, 956, 958, 960, 962, 964, 966, 
	968, 970, 972, 974, 976, 978, 980, 982, 
	984, 986, 988, 991, 993, 995, 997, 999, 
	1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 
	1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 
	1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 
	1049, 1051, 1053, 1055, 1057, 1059, 1061, 1064, 
	1066, 1068, 1070, 1072, 1075, 1077, 1079, 1081, 
	1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 
	1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 
	1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 
	1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 
	1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 
	1163, 1166, 1169, 1171, 1173, 1175, 1177, 1179, 
	1181, 1183, 1185, 1187, 1189, 1191, 1193, 1195, 
	1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211, 
	1213, 1215, 1217, 1219, 1221, 1223, 1225, 1227, 
	1229, 1231, 1233, 1235, 1237, 1239, 1241, 1243, 
	1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 
	1270, 1271, 1272, 1280, 1284, 1287, 1289, 1291, 
	1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 
	1309, 1311, 1313, 1315, 1317, 1319, 1321, 1323, 
	1325, 1327, 1329, 1331, 1333, 1335, 1337, 1339, 
	1341, 1343, 1345, 1347, 1349, 1351, 1354, 1356, 
	1358, 1360, 1362, 1364, 1366, 1368, 1370, 1372, 
	1374, 1376, 1378, 1380, 1382, 1384, 1386, 1388, 
	1390, 1392, 1394, 1396, 1398, 1400, 1402, 1404, 
	1406, 1408, 1410, 1412, 1414, 1416, 1418, 1420, 
	1422, 1424, 1426, 1428, 1430, 1432, 1434, 1436, 
	1438, 1440, 1442, 1444, 1446, 1448, 1450, 1452, 
	1454, 1456, 1458, 1460, 1462, 1464, 1466, 1468, 
	1470, 1472, 1474, 1476, 1478, 1480, 1482, 1484, 
	1486, 1488, 1490, 1492, 1494, 1496, 1498, 1500, 
	1502, 1504, 1505, 1506, 1507, 1508
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-48, -17, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -122, -112, -108, -102, 
	-99, -97, -95, -94, -92, -81, 32, 10, 
	10, 13, -48, 10, 32, 34, 35, 37, 
	42, 64, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 32, 124, 9, 13, 10, 32, 92, 
	124, 9, 13, 10, 92, 124, 10, 92, 
	10, 32, 92, 124, 9, 13, -48, 10, 
	32, 34, 35, 37, 42, 64, 124, 9, 
	13, -48, 32, -69, -48, -75, -47, -126, 
	-48, -80, -48, -70, -48, -66, -48, -74, 
	-48, -80, -48, -67, -48, -66, -48, -66, 
	-48, -69, -48, -72, -48, -75, -47, -123, 
	-48, -80, -48, -71, -48, -47, -75, -47, 
	-128, -48, -75, -48, -76, -47, -125, -48, 
	-68, -48, -66, -48, -78, -48, -80, 58, 
	10, 10, -48, 10, 32, 35, 37, 42, 
	64, 9, 13, -122, -112, -108, -102, -99, 
	-97, -95, -94, -92, -81, 10, 10, 32, 
	-48, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, -48, 10, 32, -69, 10, 
	-48, 10, -75, 10, -47, 10, -126, 10, 
	-48, 10, -80, 10, -48, 10, -70, 10, 
	-48, 10, -66, 10, -48, 10, -74, 10, 
	-48, 10, -80, 10, -48, 10, -67, 10, 
	-48, 10, -66, 10, -48, 10, -66, 10, 
	-48, 10, -69, 10, -48, 10, -72, 10, 
	-48, 10, -75, 10, -47, 10, -123, 10, 
	-48, 10, -80, 10, -48, 10, -71, 10, 
	-47, 10, -128, 10, -48, 10, -72, 10, 
	-48, 10, -65, 10, -47, 10, -125, 10, 
	-47, 10, -127, 10, -47, 10, -126, 10, 
	-48, 10, -72, 10, -48, 10, -68, 10, 
	-48, 10, -66, 10, 10, 32, 44, 10, 
	32, -47, 10, -119, 10, -47, 10, -126, 
	-122, 10, -47, 10, -128, 10, -47, 10, 
	-125, 10, -48, 10, -70, 10, -47, 10, 
	-126, 10, -47, 10, -125, 10, -47, 10, 
	-128, 10, -48, 10, -80, 10, 10, 32, 
	-47, 10, -127, 10, -47, 10, -122, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -47, 10, -128, 10, 
	-47, 10, -106, 10, -47, 10, -114, 10, 
	10, 58, -48, 10, -75, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -47, 10, 
	-128, 10, -47, 10, -106, 10, -48, 10, 
	-71, 10, -48, 10, -80, -66, 10, -48, 
	10, 32, -76, 10, -47, 10, -106, 10, 
	-47, 10, -125, 10, -48, 10, -67, 10, 
	-48, 10, -70, 10, -47, 10, -122, 10, 
	-47, 10, -106, 10, -48, 10, -66, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-48, 10, -69, 10, -48, 10, -70, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -128, -48, -72, -48, 
	-70, -65, -48, -69, -48, -80, -48, -76, 
	-48, -72, 58, 10, 10, -48, 10, 32, 
	35, 124, 9, 13, -92, 10, -47, 10, 
	-125, 10, -48, 10, -67, 10, -48, 10, 
	-70, 10, -47, 10, -122, 10, -47, 10, 
	-106, 10, -48, 10, -66, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -48, 10, 
	-69, 10, 10, 58, -47, -125, -47, -127, 
	-47, -126, -48, -72, -48, -68, -48, -66, 
	32, 44, 32, -47, -119, -47, -126, -122, 
	-47, -128, -47, -125, -48, -70, -47, -126, 
	-47, -125, -47, -128, -48, -80, 32, -47, 
	-127, -47, -122, -48, -75, -48, -67, -48, 
	-80, -47, -128, -47, -106, -47, -114, 58, 
	10, 10, -48, 10, 32, 35, 37, 42, 
	64, 9, 13, -122, -112, -108, -102, -99, 
	-97, -95, -94, -92, -81, 10, 10, 32, 
	-48, 10, 32, -69, 10, -48, 10, -75, 
	10, -47, 10, -126, 10, -48, 10, -80, 
	10, -48, 10, -70, 10, -48, 10, -66, 
	10, -48, 10, -74, 10, -48, 10, -80, 
	10, -48, 10, -67, 10, -48, 10, -66, 
	10, -48, 10, -66, 10, -48, 10, -69, 
	10, -48, 10, -72, 10, -48, 10, -75, 
	10, -47, 10, -123, 10, -48, 10, -80, 
	10, -48, 10, -71, 10, -47, 10, -128, 
	10, -48, 10, -72, 10, -48, 10, -65, 
	10, -47, 10, -125, 10, -47, 10, -127, 
	10, -47, 10, -126, 10, -48, 10, -72, 
	10, -48, 10, -68, 10, -48, 10, -66, 
	10, 10, 32, 44, 10, 32, -47, 10, 
	-119, 10, -47, 10, -122, 10, -48, 10, 
	-75, 10, -48, 10, -67, 10, -48, 10, 
	-80, 10, -47, 10, -128, 10, -47, 10, 
	-106, 10, -48, 10, -71, 10, 10, 58, 
	-48, 10, -80, -66, 10, -48, 10, 32, 
	-76, 10, -47, 10, -106, 10, -47, 10, 
	-125, 10, -48, 10, -67, 10, -48, 10, 
	-70, 10, -47, 10, -122, 10, -47, 10, 
	-106, 10, -48, 10, -66, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -48, 10, 
	-69, 10, -48, 10, -70, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, -48, -75, -48, -67, -48, -80, 
	-47, -128, -47, -106, -48, -71, 58, 10, 
	10, -48, 10, 32, 35, 37, 42, 64, 
	9, 13, -122, -112, -108, -102, -99, -97, 
	-95, -94, -92, -81, 10, 10, 32, -48, 
	10, 32, -69, 10, -48, 10, -75, 10, 
	-47, 10, -126, 10, -48, 10, -80, 10, 
	-48, 10, -70, 10, -48, 10, -66, 10, 
	-48, 10, -74, 10, -48, 10, -80, 10, 
	-48, 10, -67, 10, -48, 10, -66, 10, 
	-48, 10, -66, 10, -48, 10, -69, 10, 
	-48, 10, -72, 10, -48, 10, -75, 10, 
	-47, 10, -123, 10, -48, 10, -80, 10, 
	-48, 10, -71, 10, -48, -47, 10, -75, 
	10, -47, 10, -128, 10, -48, 10, -75, 
	10, -48, 10, -76, 10, -47, 10, -125, 
	10, -48, 10, -68, 10, -48, 10, -66, 
	10, -48, 10, -78, 10, -48, 10, -80, 
	10, 10, 58, -128, 10, -48, 10, -72, 
	10, -48, 10, -65, 10, -47, 10, -125, 
	10, -47, 10, -127, 10, -47, 10, -126, 
	10, -48, 10, -72, 10, -48, 10, -68, 
	10, -48, 10, -66, 10, 10, 32, 44, 
	10, 32, -47, 10, -119, 10, -47, 10, 
	-126, -122, 10, -47, 10, -128, 10, -47, 
	10, -125, 10, -48, 10, -70, 10, -47, 
	10, -126, 10, -47, 10, -125, 10, -47, 
	10, -128, 10, -48, 10, -80, 10, 10, 
	32, -47, 10, -127, 10, -47, 10, -122, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -47, 10, -106, 10, -47, 10, -114, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -47, 10, -106, 10, -48, 10, -71, 
	10, -48, 10, -80, -66, 10, -48, 10, 
	32, -76, 10, -47, 10, -106, 10, -47, 
	10, -125, 10, -48, 10, -67, 10, -48, 
	10, -70, 10, -47, 10, -122, 10, -47, 
	10, -106, 10, -48, 10, -66, 10, -48, 
	10, -67, 10, -48, 10, -80, 10, -48, 
	10, -69, 10, -48, 10, -70, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, -48, -80, -66, -48, 32, 
	-76, -47, -106, -47, -125, -48, -67, -48, 
	-70, -47, -122, -47, -106, -48, -66, -48, 
	-67, -48, -80, -48, -69, 58, 10, 10, 
	-48, 10, 32, 35, 37, 64, 9, 13, 
	-97, -95, -92, 10, -48, -47, 10, -75, 
	10, -47, 10, -128, 10, -48, 10, -75, 
	10, -48, 10, -76, 10, -47, 10, -125, 
	10, -48, 10, -68, 10, -48, 10, -66, 
	10, -48, 10, -78, 10, -48, 10, -80, 
	10, 10, 58, -128, 10, -48, 10, -72, 
	10, -48, 10, -70, 10, -48, 10, -69, 
	10, -48, 10, -80, 10, -48, 10, -76, 
	10, -48, 10, -72, 10, -47, 10, -126, 
	-122, 10, -47, 10, -128, 10, -47, 10, 
	-125, 10, -48, 10, -70, 10, -47, 10, 
	-126, 10, -47, 10, -125, 10, -47, 10, 
	-128, 10, -48, 10, -80, 10, 10, 32, 
	-47, 10, -127, 10, -47, 10, -122, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -47, 10, -128, 10, 
	-47, 10, -106, 10, -47, 10, -114, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -47, 10, -128, 10, 
	-47, 10, -106, 10, -48, 10, -71, 10, 
	-47, 10, -125, 10, -48, 10, -67, 10, 
	-48, 10, -70, 10, -47, 10, -122, 10, 
	-47, 10, -106, 10, -48, 10, -66, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-48, 10, -69, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-48, -70, -69, -65, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 10, 10, 1, 1, 2, 9, 1, 
	1, 2, 2, 3, 3, 3, 3, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 5, 3, 2, 4, 3, 2, 
	4, 9, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 7, 11, 2, 9, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 11, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 7, 11, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 4, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 12, 23, 25, 27, 30, 41, 
	43, 45, 48, 51, 56, 61, 66, 71, 
	75, 79, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 108, 
	110, 112, 117, 124, 129, 133, 139, 143, 
	146, 152, 163, 166, 168, 170, 172, 174, 
	176, 178, 180, 182, 184, 186, 188, 190, 
	192, 194, 196, 198, 200, 202, 204, 206, 
	208, 210, 212, 214, 216, 218, 220, 222, 
	224, 226, 228, 230, 232, 235, 237, 239, 
	241, 243, 245, 247, 249, 251, 253, 255, 
	257, 259, 261, 263, 265, 267, 269, 271, 
	273, 275, 284, 296, 299, 310, 314, 317, 
	320, 323, 326, 329, 332, 335, 338, 341, 
	344, 347, 350, 353, 356, 359, 362, 365, 
	368, 371, 374, 377, 380, 383, 386, 389, 
	392, 395, 398, 401, 404, 407, 410, 413, 
	416, 419, 422, 425, 428, 431, 434, 437, 
	440, 443, 446, 449, 452, 455, 458, 461, 
	464, 467, 471, 474, 477, 480, 483, 487, 
	490, 493, 496, 499, 502, 505, 508, 511, 
	514, 517, 520, 523, 526, 529, 532, 535, 
	538, 541, 544, 547, 550, 553, 556, 559, 
	562, 565, 568, 571, 574, 577, 580, 583, 
	586, 589, 592, 595, 598, 601, 604, 607, 
	610, 613, 616, 619, 622, 626, 630, 633, 
	636, 639, 642, 645, 648, 651, 654, 657, 
	660, 663, 666, 669, 672, 675, 678, 681, 
	684, 687, 690, 693, 696, 699, 702, 705, 
	708, 711, 714, 717, 720, 723, 726, 729, 
	732, 735, 738, 741, 743, 745, 747, 749, 
	752, 754, 756, 758, 760, 762, 764, 766, 
	768, 770, 772, 774, 781, 784, 787, 790, 
	793, 796, 799, 802, 805, 808, 811, 814, 
	817, 820, 823, 826, 829, 832, 835, 838, 
	841, 843, 845, 847, 849, 851, 853, 855, 
	857, 859, 861, 863, 865, 868, 870, 872, 
	874, 876, 879, 881, 883, 885, 887, 889, 
	891, 893, 895, 897, 899, 901, 903, 905, 
	907, 909, 911, 913, 915, 917, 919, 921, 
	923, 925, 927, 929, 931, 933, 935, 937, 
	939, 941, 943, 945, 947, 956, 968, 971, 
	975, 978, 981, 984, 987, 990, 993, 996, 
	999, 1002, 1005, 1008, 1011, 1014, 1017, 1020, 
	1023, 1026, 1029, 1032, 1035, 1038, 1041, 1044, 
	1047, 1050, 1053, 1056, 1059, 1062, 1065, 1068, 
	1071, 1074, 1077, 1080, 1083, 1086, 1089, 1092, 
	1095, 1098, 1101, 1104, 1107, 1110, 1113, 1116, 
	1119, 1122, 1125, 1128, 1132, 1135, 1138, 1141, 
	1144, 1147, 1150, 1153, 1156, 1159, 1162, 1165, 
	1168, 1171, 1174, 1177, 1180, 1183, 1186, 1189, 
	1193, 1197, 1200, 1203, 1206, 1209, 1212, 1215, 
	1218, 1221, 1224, 1227, 1230, 1233, 1236, 1239, 
	1242, 1245, 1248, 1251, 1254, 1257, 1260, 1263, 
	1266, 1269, 1272, 1275, 1278, 1281, 1284, 1287, 
	1290, 1293, 1296, 1299, 1302, 1305, 1308, 1310, 
	1312, 1314, 1316, 1318, 1320, 1322, 1324, 1326, 
	1328, 1330, 1332, 1334, 1336, 1338, 1347, 1359, 
	1362, 1366, 1369, 1372, 1375, 1378, 1381, 1384, 
	1387, 1390, 1393, 1396, 1399, 1402, 1405, 1408, 
	1411, 1414, 1417, 1420, 1423, 1426, 1429, 1432, 
	1435, 1438, 1441, 1444, 1447, 1450, 1453, 1456, 
	1459, 1462, 1465, 1469, 1472, 1475, 1478, 1481, 
	1484, 1487, 1490, 1493, 1496, 1499, 1502, 1505, 
	1508, 1511, 1514, 1517, 1520, 1523, 1526, 1529, 
	1532, 1535, 1538, 1541, 1544, 1547, 1550, 1553, 
	1556, 1559, 1562, 1565, 1568, 1571, 1574, 1578, 
	1581, 1584, 1587, 1590, 1594, 1597, 1600, 1603, 
	1606, 1609, 1612, 1615, 1618, 1621, 1624, 1627, 
	1630, 1633, 1636, 1639, 1642, 1645, 1648, 1651, 
	1654, 1657, 1660, 1663, 1666, 1669, 1672, 1675, 
	1678, 1681, 1684, 1687, 1690, 1693, 1696, 1699, 
	1702, 1705, 1708, 1711, 1714, 1717, 1720, 1723, 
	1726, 1730, 1734, 1737, 1740, 1743, 1746, 1749, 
	1752, 1755, 1758, 1761, 1764, 1767, 1770, 1773, 
	1776, 1779, 1782, 1785, 1788, 1791, 1794, 1797, 
	1800, 1803, 1806, 1809, 1812, 1815, 1818, 1821, 
	1824, 1827, 1830, 1833, 1836, 1839, 1842, 1845, 
	1847, 1850, 1853, 1855, 1857, 1859, 1861, 1863, 
	1865, 1867, 1869, 1871, 1873, 1875, 1877, 1879, 
	1881, 1883, 1885, 1887, 1889, 1891, 1893, 1895, 
	1897, 1899, 1901, 1909, 1914, 1918, 1921, 1924, 
	1927, 1930, 1933, 1936, 1939, 1942, 1945, 1948, 
	1951, 1954, 1957, 1960, 1963, 1966, 1969, 1972, 
	1975, 1978, 1981, 1984, 1987, 1990, 1993, 1996, 
	1999, 2002, 2005, 2008, 2011, 2014, 2018, 2021, 
	2024, 2027, 2030, 2033, 2036, 2039, 2042, 2045, 
	2048, 2051, 2054, 2057, 2060, 2063, 2066, 2069, 
	2072, 2075, 2078, 2081, 2084, 2087, 2090, 2093, 
	2096, 2099, 2102, 2105, 2108, 2111, 2114, 2117, 
	2120, 2123, 2126, 2129, 2132, 2135, 2138, 2141, 
	2144, 2147, 2150, 2153, 2156, 2159, 2162, 2165, 
	2168, 2171, 2174, 2177, 2180, 2183, 2186, 2189, 
	2192, 2195, 2198, 2201, 2204, 2207, 2210, 2213, 
	2216, 2219, 2222, 2225, 2228, 2231, 2234, 2237, 
	2240, 2243, 2245, 2247, 2249, 2251
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 2, 4, 3, 5, 6, 7, 8, 
	9, 10, 3, 0, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 20, 0, 21, 
	0, 0, 22, 24, 25, 23, 1, 4, 
	3, 5, 6, 7, 8, 9, 10, 3, 
	0, 26, 0, 27, 0, 29, 30, 28, 
	32, 33, 31, 36, 35, 37, 35, 34, 
	40, 39, 41, 39, 38, 40, 39, 42, 
	39, 38, 40, 39, 43, 39, 38, 45, 
	44, 44, 0, 4, 46, 46, 0, 48, 
	49, 47, 4, 0, 50, 0, 51, 0, 
	52, 0, 53, 0, 54, 0, 55, 0, 
	56, 0, 57, 0, 58, 0, 59, 0, 
	60, 0, 61, 0, 62, 0, 63, 0, 
	0, 0, 0, 0, 64, 65, 66, 65, 
	65, 68, 67, 64, 4, 69, 9, 69, 
	0, 70, 71, 70, 0, 74, 73, 75, 
	76, 73, 72, 0, 78, 79, 77, 0, 
	78, 77, 74, 80, 78, 79, 80, 77, 
	81, 74, 82, 83, 84, 85, 86, 87, 
	88, 82, 0, 89, 90, 0, 91, 0, 
	92, 0, 11, 0, 93, 0, 94, 0, 
	95, 0, 96, 0, 97, 0, 98, 0, 
	99, 0, 100, 0, 101, 0, 11, 0, 
	102, 0, 103, 0, 104, 0, 105, 0, 
	106, 0, 11, 0, 107, 0, 108, 0, 
	109, 0, 110, 0, 111, 0, 11, 0, 
	112, 0, 113, 0, 114, 0, 115, 0, 
	116, 0, 117, 0, 118, 0, 11, 0, 
	119, 120, 0, 121, 0, 122, 0, 123, 
	0, 124, 0, 125, 0, 126, 0, 127, 
	0, 128, 0, 129, 0, 130, 0, 131, 
	0, 132, 0, 133, 0, 134, 0, 135, 
	0, 136, 0, 137, 0, 138, 0, 140, 
	139, 142, 141, 143, 142, 144, 145, 146, 
	147, 145, 144, 141, 148, 149, 150, 151, 
	152, 153, 154, 155, 156, 157, 142, 141, 
	142, 158, 141, 159, 161, 160, 162, 163, 
	164, 165, 166, 167, 160, 0, 168, 142, 
	169, 141, 170, 142, 141, 171, 142, 141, 
	148, 142, 141, 172, 142, 141, 173, 142, 
	141, 174, 142, 141, 175, 142, 141, 176, 
	142, 141, 177, 142, 141, 178, 142, 141, 
	179, 142, 141, 180, 142, 141, 148, 142, 
	141, 181, 142, 141, 182, 142, 141, 183, 
	142, 141, 184, 142, 141, 185, 142, 141, 
	148, 142, 141, 186, 142, 141, 187, 142, 
	141, 188, 142, 141, 189, 142, 141, 190, 
	142, 141, 148, 142, 141, 191, 142, 141, 
	192, 142, 141, 193, 142, 141, 194, 142, 
	141, 195, 142, 141, 196, 142, 141, 197, 
	142, 141, 148, 142, 141, 198, 142, 141, 
	199, 142, 141, 200, 142, 141, 201, 142, 
	141, 202, 142, 141, 203, 142, 141, 204, 
	142, 141, 205, 142, 141, 206, 142, 141, 
	207, 142, 141, 208, 142, 141, 209, 142, 
	141, 210, 142, 141, 211, 142, 141, 212, 
	142, 141, 213, 142, 141, 214, 142, 141, 
	215, 142, 141, 142, 158, 216, 141, 142, 
	217, 141, 218, 142, 141, 184, 142, 141, 
	219, 142, 141, 220, 221, 142, 141, 222, 
	142, 141, 223, 142, 141, 224, 142, 141, 
	225, 142, 141, 226, 142, 141, 227, 142, 
	141, 228, 142, 141, 229, 142, 141, 230, 
	142, 141, 231, 142, 141, 232, 142, 141, 
	233, 142, 141, 234, 142, 141, 235, 142, 
	141, 142, 236, 141, 237, 142, 141, 238, 
	142, 141, 239, 142, 141, 240, 142, 141, 
	241, 142, 141, 242, 142, 141, 243, 142, 
	141, 244, 142, 141, 245, 142, 141, 246, 
	142, 141, 247, 142, 141, 248, 142, 141, 
	249, 142, 141, 250, 142, 141, 251, 142, 
	141, 252, 142, 141, 142, 158, 141, 253, 
	142, 141, 254, 142, 141, 255, 142, 141, 
	256, 142, 141, 257, 142, 141, 258, 142, 
	141, 259, 142, 141, 260, 142, 141, 261, 
	142, 141, 262, 142, 141, 263, 142, 141, 
	252, 142, 141, 264, 142, 141, 148, 265, 
	142, 141, 266, 142, 158, 141, 267, 142, 
	141, 268, 142, 141, 148, 142, 141, 269, 
	142, 141, 270, 142, 141, 271, 142, 141, 
	272, 142, 141, 273, 142, 141, 274, 142, 
	141, 275, 142, 141, 276, 142, 141, 277, 
	142, 141, 278, 142, 141, 279, 142, 141, 
	280, 142, 141, 281, 142, 141, 282, 142, 
	141, 283, 142, 141, 284, 142, 141, 285, 
	142, 141, 252, 142, 141, 286, 142, 141, 
	217, 142, 141, 142, 287, 141, 142, 288, 
	141, 142, 289, 141, 142, 290, 141, 142, 
	291, 141, 142, 292, 141, 142, 293, 141, 
	142, 294, 141, 142, 295, 141, 142, 296, 
	141, 142, 297, 141, 142, 298, 141, 142, 
	299, 141, 142, 300, 141, 301, 0, 302, 
	0, 303, 0, 304, 0, 305, 306, 0, 
	307, 0, 308, 0, 309, 0, 310, 0, 
	311, 0, 312, 0, 313, 0, 314, 0, 
	315, 0, 317, 316, 319, 318, 320, 319, 
	321, 322, 322, 321, 318, 323, 319, 318, 
	324, 319, 318, 325, 319, 318, 326, 319, 
	318, 327, 319, 318, 328, 319, 318, 329, 
	319, 318, 330, 319, 318, 331, 319, 318, 
	332, 319, 318, 333, 319, 318, 334, 319, 
	318, 335, 319, 318, 336, 319, 318, 337, 
	319, 318, 338, 319, 318, 339, 319, 318, 
	340, 319, 318, 341, 319, 318, 319, 342, 
	318, 343, 0, 344, 0, 345, 0, 346, 
	0, 347, 0, 348, 0, 349, 0, 350, 
	0, 351, 0, 352, 0, 353, 0, 354, 
	0, 21, 355, 0, 356, 0, 357, 0, 
	105, 0, 358, 0, 359, 360, 0, 361, 
	0, 362, 0, 363, 0, 364, 0, 365, 
	0, 366, 0, 367, 0, 368, 0, 369, 
	0, 370, 0, 371, 0, 372, 0, 373, 
	0, 374, 0, 375, 0, 376, 0, 377, 
	0, 378, 0, 379, 0, 380, 0, 381, 
	0, 382, 0, 383, 0, 384, 0, 385, 
	0, 386, 0, 387, 0, 388, 0, 389, 
	0, 390, 0, 391, 0, 392, 0, 394, 
	393, 396, 395, 397, 396, 398, 399, 400, 
	401, 399, 398, 395, 402, 403, 404, 405, 
	406, 407, 408, 409, 410, 411, 396, 395, 
	396, 412, 395, 413, 396, 414, 395, 415, 
	396, 395, 416, 396, 395, 402, 396, 395, 
	417, 396, 395, 418, 396, 395, 419, 396, 
	395, 420, 396, 395, 421, 396, 395, 422, 
	396, 395, 423, 396, 395, 424, 396, 395, 
	425, 396, 395, 402, 396, 395, 426, 396, 
	395, 427, 396, 395, 428, 396, 395, 429, 
	396, 395, 430, 396, 395, 402, 396, 395, 
	431, 396, 395, 432, 396, 395, 433, 396, 
	395, 434, 396, 395, 435, 396, 395, 402, 
	396, 395, 436, 396, 395, 437, 396, 395, 
	438, 396, 395, 439, 396, 395, 440, 396, 
	395, 441, 396, 395, 442, 396, 395, 402, 
	396, 395, 443, 396, 395, 444, 396, 395, 
	445, 396, 395, 446, 396, 395, 447, 396, 
	395, 448, 396, 395, 449, 396, 395, 450, 
	396, 395, 451, 396, 395, 452, 396, 395, 
	453, 396, 395, 454, 396, 395, 455, 396, 
	395, 456, 396, 395, 457, 396, 395, 458, 
	396, 395, 459, 396, 395, 460, 396, 395, 
	396, 412, 461, 395, 396, 462, 395, 463, 
	396, 395, 429, 396, 395, 464, 396, 395, 
	465, 396, 395, 466, 396, 395, 467, 396, 
	395, 468, 396, 395, 469, 396, 395, 470, 
	396, 395, 471, 396, 395, 472, 396, 395, 
	473, 396, 395, 474, 396, 395, 475, 396, 
	395, 476, 396, 395, 477, 396, 395, 396, 
	412, 395, 478, 396, 395, 402, 479, 396, 
	395, 480, 396, 412, 395, 481, 396, 395, 
	482, 396, 395, 402, 396, 395, 483, 396, 
	395, 484, 396, 395, 485, 396, 395, 486, 
	396, 395, 487, 396, 395, 488, 396, 395, 
	489, 396, 395, 490, 396, 395, 491, 396, 
	395, 492, 396, 395, 493, 396, 395, 494, 
	396, 395, 495, 396, 395, 496, 396, 395, 
	497, 396, 395, 498, 396, 395, 499, 396, 
	395, 477, 396, 395, 500, 396, 395, 462, 
	396, 395, 396, 501, 395, 396, 502, 395, 
	396, 503, 395, 396, 504, 395, 396, 505, 
	395, 396, 506, 395, 396, 507, 395, 396, 
	508, 395, 396, 509, 395, 396, 510, 395, 
	396, 511, 395, 396, 512, 395, 396, 513, 
	395, 396, 514, 395, 515, 0, 516, 0, 
	517, 0, 518, 0, 519, 0, 520, 0, 
	521, 0, 522, 0, 523, 0, 524, 0, 
	525, 0, 526, 0, 527, 0, 529, 528, 
	531, 530, 532, 531, 533, 534, 535, 536, 
	534, 533, 530, 537, 538, 539, 540, 541, 
	542, 543, 544, 545, 546, 531, 530, 531, 
	547, 530, 548, 531, 549, 530, 550, 531, 
	530, 551, 531, 530, 537, 531, 530, 552, 
	531, 530, 553, 531, 530, 554, 531, 530, 
	555, 531, 530, 556, 531, 530, 557, 531, 
	530, 558, 531, 530, 559, 531, 530, 560, 
	531, 530, 537, 531, 530, 561, 531, 530, 
	562, 531, 530, 563, 531, 530, 564, 531, 
	530, 565, 531, 530, 537, 531, 530, 566, 
	531, 530, 567, 531, 530, 568, 531, 530, 
	569, 531, 530, 570, 531, 530, 537, 531, 
	530, 571, 531, 530, 572, 531, 530, 573, 
	531, 530, 574, 531, 530, 575, 531, 530, 
	576, 531, 530, 577, 531, 530, 537, 531, 
	530, 578, 579, 531, 530, 580, 531, 530, 
	581, 531, 530, 582, 531, 530, 583, 531, 
	530, 584, 531, 530, 585, 531, 530, 586, 
	531, 530, 587, 531, 530, 588, 531, 530, 
	589, 531, 530, 590, 531, 530, 591, 531, 
	530, 592, 531, 530, 593, 531, 530, 594, 
	531, 530, 595, 531, 530, 596, 531, 530, 
	531, 547, 530, 597, 531, 530, 598, 531, 
	530, 599, 531, 530, 600, 531, 530, 601, 
	531, 530, 602, 531, 530, 603, 531, 530, 
	604, 531, 530, 605, 531, 530, 606, 531, 
	530, 607, 531, 530, 608, 531, 530, 609, 
	531, 530, 610, 531, 530, 611, 531, 530, 
	612, 531, 530, 613, 531, 530, 531, 547, 
	614, 530, 531, 615, 530, 616, 531, 530, 
	564, 531, 530, 617, 531, 530, 618, 619, 
	531, 530, 620, 531, 530, 621, 531, 530, 
	622, 531, 530, 623, 531, 530, 624, 531, 
	530, 625, 531, 530, 626, 531, 530, 627, 
	531, 530, 628, 531, 530, 629, 531, 530, 
	630, 531, 530, 631, 531, 530, 632, 531, 
	530, 633, 531, 530, 531, 634, 530, 635, 
	531, 530, 636, 531, 530, 637, 531, 530, 
	638, 531, 530, 639, 531, 530, 640, 531, 
	530, 641, 531, 530, 642, 531, 530, 643, 
	531, 530, 644, 531, 530, 645, 531, 530, 
	646, 531, 530, 647, 531, 530, 648, 531, 
	530, 649, 531, 530, 596, 531, 530, 650, 
	531, 530, 651, 531, 530, 652, 531, 530, 
	653, 531, 530, 654, 531, 530, 655, 531, 
	530, 656, 531, 530, 657, 531, 530, 658, 
	531, 530, 659, 531, 530, 660, 531, 530, 
	596, 531, 530, 661, 531, 530, 537, 662, 
	531, 530, 663, 531, 547, 530, 664, 531, 
	530, 665, 531, 530, 537, 531, 530, 666, 
	531, 530, 667, 531, 530, 668, 531, 530, 
	669, 531, 530, 670, 531, 530, 671, 531, 
	530, 672, 531, 530, 673, 531, 530, 674, 
	531, 530, 675, 531, 530, 676, 531, 530, 
	677, 531, 530, 678, 531, 530, 679, 531, 
	530, 680, 531, 530, 681, 531, 530, 682, 
	531, 530, 596, 531, 530, 683, 531, 530, 
	615, 531, 530, 531, 684, 530, 531, 685, 
	530, 531, 686, 530, 531, 687, 530, 531, 
	688, 530, 531, 689, 530, 531, 690, 530, 
	531, 691, 530, 531, 692, 530, 531, 693, 
	530, 531, 694, 530, 531, 695, 530, 531, 
	696, 530, 531, 697, 530, 698, 0, 11, 
	699, 0, 700, 21, 0, 701, 0, 702, 
	0, 11, 0, 703, 0, 704, 0, 705, 
	0, 706, 0, 707, 0, 708, 0, 709, 
	0, 710, 0, 711, 0, 712, 0, 713, 
	0, 714, 0, 715, 0, 716, 0, 717, 
	0, 718, 0, 719, 0, 720, 0, 721, 
	0, 723, 722, 725, 724, 726, 725, 727, 
	728, 729, 728, 727, 724, 730, 731, 732, 
	725, 724, 733, 734, 725, 724, 735, 725, 
	724, 736, 725, 724, 737, 725, 724, 738, 
	725, 724, 739, 725, 724, 740, 725, 724, 
	741, 725, 724, 742, 725, 724, 743, 725, 
	724, 744, 725, 724, 745, 725, 724, 746, 
	725, 724, 747, 725, 724, 748, 725, 724, 
	749, 725, 724, 750, 725, 724, 751, 725, 
	724, 725, 752, 724, 753, 725, 724, 754, 
	725, 724, 755, 725, 724, 756, 725, 724, 
	757, 725, 724, 758, 725, 724, 759, 725, 
	724, 760, 725, 724, 761, 725, 724, 762, 
	725, 724, 763, 725, 724, 764, 725, 724, 
	751, 725, 724, 765, 725, 724, 766, 767, 
	725, 724, 768, 725, 724, 769, 725, 724, 
	770, 725, 724, 771, 725, 724, 772, 725, 
	724, 773, 725, 724, 774, 725, 724, 775, 
	725, 724, 776, 725, 724, 777, 725, 724, 
	778, 725, 724, 779, 725, 724, 780, 725, 
	724, 781, 725, 724, 725, 782, 724, 783, 
	725, 724, 784, 725, 724, 785, 725, 724, 
	786, 725, 724, 787, 725, 724, 788, 725, 
	724, 789, 725, 724, 790, 725, 724, 791, 
	725, 724, 792, 725, 724, 793, 725, 724, 
	794, 725, 724, 795, 725, 724, 796, 725, 
	724, 797, 725, 724, 751, 725, 724, 798, 
	725, 724, 799, 725, 724, 800, 725, 724, 
	801, 725, 724, 802, 725, 724, 803, 725, 
	724, 804, 725, 724, 805, 725, 724, 806, 
	725, 724, 807, 725, 724, 808, 725, 724, 
	751, 725, 724, 809, 725, 724, 810, 725, 
	724, 811, 725, 724, 812, 725, 724, 813, 
	725, 724, 814, 725, 724, 815, 725, 724, 
	816, 725, 724, 817, 725, 724, 818, 725, 
	724, 819, 725, 724, 820, 725, 724, 821, 
	725, 724, 822, 725, 724, 823, 725, 724, 
	824, 725, 724, 825, 725, 724, 751, 725, 
	724, 725, 826, 724, 725, 827, 724, 725, 
	828, 724, 725, 829, 724, 725, 830, 724, 
	725, 831, 724, 725, 832, 724, 725, 833, 
	724, 725, 834, 724, 725, 835, 724, 725, 
	836, 724, 725, 837, 724, 725, 838, 724, 
	725, 839, 724, 840, 0, 356, 0, 841, 
	0, 3, 0, 842, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 763, 6, 6, 7, 17, 19, 
	3, 33, 36, 3, 42, 56, 62, 68, 
	76, 296, 623, 629, 761, 4, 5, 5, 
	6, 18, 8, 9, 10, 11, 10, 10, 
	11, 10, 12, 12, 12, 13, 12, 12, 
	12, 13, 14, 15, 16, 6, 16, 17, 
	6, 18, 20, 21, 22, 23, 24, 25, 
	26, 27, 28, 29, 30, 31, 32, 765, 
	34, 35, 6, 34, 33, 35, 36, 37, 
	38, 40, 41, 39, 37, 38, 39, 37, 
	40, 2, 41, 7, 17, 19, 3, 33, 
	36, 43, 46, 44, 45, 47, 48, 49, 
	50, 51, 52, 53, 54, 55, 57, 58, 
	59, 60, 61, 63, 64, 65, 66, 67, 
	69, 70, 71, 72, 73, 74, 75, 77, 
	243, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 95, 96, 97, 96, 97, 98, 
	97, 6, 229, 99, 99, 101, 115, 121, 
	127, 135, 157, 203, 209, 227, 100, 2, 
	6, 6, 7, 17, 19, 3, 33, 36, 
	102, 105, 103, 104, 106, 107, 108, 109, 
	110, 111, 112, 113, 114, 116, 117, 118, 
	119, 120, 122, 123, 124, 125, 126, 128, 
	129, 130, 131, 132, 133, 134, 136, 137, 
	138, 139, 140, 141, 142, 143, 144, 145, 
	146, 147, 148, 149, 150, 151, 152, 153, 
	154, 155, 156, 158, 159, 191, 160, 161, 
	162, 163, 164, 165, 166, 167, 168, 169, 
	170, 171, 172, 173, 174, 175, 176, 177, 
	178, 179, 180, 181, 182, 183, 184, 185, 
	186, 187, 188, 189, 190, 192, 193, 194, 
	195, 196, 197, 198, 199, 200, 201, 202, 
	204, 205, 206, 207, 208, 210, 211, 212, 
	213, 214, 215, 216, 217, 218, 219, 220, 
	221, 222, 223, 224, 225, 226, 228, 230, 
	231, 232, 233, 234, 235, 236, 237, 238, 
	239, 240, 241, 242, 6, 244, 245, 246, 
	247, 248, 280, 249, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 259, 258, 259, 
	260, 259, 6, 261, 262, 263, 264, 265, 
	266, 267, 268, 269, 270, 271, 272, 273, 
	274, 275, 276, 277, 278, 279, 100, 281, 
	282, 283, 284, 285, 286, 287, 288, 289, 
	290, 291, 292, 293, 294, 295, 297, 298, 
	446, 299, 300, 301, 302, 303, 304, 305, 
	306, 307, 308, 309, 310, 311, 312, 313, 
	314, 315, 316, 317, 318, 319, 320, 321, 
	322, 323, 324, 325, 326, 327, 328, 329, 
	330, 331, 332, 331, 332, 333, 332, 6, 
	432, 334, 334, 335, 349, 355, 361, 369, 
	391, 406, 412, 430, 100, 336, 339, 337, 
	338, 340, 341, 342, 343, 344, 345, 346, 
	347, 348, 350, 351, 352, 353, 354, 356, 
	357, 358, 359, 360, 362, 363, 364, 365, 
	366, 367, 368, 370, 371, 372, 373, 374, 
	375, 376, 377, 378, 379, 380, 381, 382, 
	383, 384, 385, 386, 387, 388, 389, 390, 
	392, 393, 394, 395, 396, 397, 398, 399, 
	400, 401, 402, 403, 404, 405, 407, 408, 
	409, 410, 411, 413, 414, 415, 416, 417, 
	418, 419, 420, 421, 422, 423, 424, 425, 
	426, 427, 428, 429, 431, 433, 434, 435, 
	436, 437, 438, 439, 440, 441, 442, 443, 
	444, 445, 6, 447, 448, 449, 450, 451, 
	452, 453, 454, 455, 456, 457, 458, 459, 
	460, 461, 460, 461, 462, 461, 6, 609, 
	463, 463, 464, 478, 484, 490, 498, 538, 
	583, 589, 607, 100, 465, 468, 466, 467, 
	469, 470, 471, 472, 473, 474, 475, 476, 
	477, 479, 480, 481, 482, 483, 485, 486, 
	487, 488, 489, 491, 492, 493, 494, 495, 
	496, 497, 499, 517, 500, 501, 502, 503, 
	504, 505, 506, 507, 508, 509, 510, 511, 
	512, 513, 514, 515, 516, 518, 519, 520, 
	521, 522, 523, 524, 525, 526, 527, 528, 
	529, 530, 531, 532, 533, 534, 535, 536, 
	537, 539, 540, 571, 541, 542, 543, 544, 
	545, 546, 547, 548, 549, 550, 551, 552, 
	553, 554, 555, 556, 557, 558, 559, 560, 
	561, 562, 563, 564, 565, 566, 567, 568, 
	569, 570, 572, 573, 574, 575, 576, 577, 
	578, 579, 580, 581, 582, 584, 585, 586, 
	587, 588, 590, 591, 592, 593, 594, 595, 
	596, 597, 598, 599, 600, 601, 602, 603, 
	604, 605, 606, 608, 610, 611, 612, 613, 
	614, 615, 616, 617, 618, 619, 620, 621, 
	622, 6, 624, 625, 626, 627, 628, 630, 
	631, 632, 633, 634, 635, 636, 637, 638, 
	639, 640, 641, 642, 643, 644, 645, 646, 
	647, 648, 649, 650, 649, 650, 651, 650, 
	6, 747, 652, 684, 729, 653, 671, 654, 
	655, 656, 657, 658, 659, 660, 661, 662, 
	663, 664, 665, 666, 667, 668, 669, 670, 
	100, 672, 673, 674, 675, 676, 677, 678, 
	679, 680, 681, 682, 683, 685, 686, 717, 
	687, 688, 689, 690, 691, 692, 693, 694, 
	695, 696, 697, 698, 699, 700, 701, 702, 
	703, 704, 705, 706, 707, 708, 709, 710, 
	711, 712, 713, 714, 715, 716, 718, 719, 
	720, 721, 722, 723, 724, 725, 726, 727, 
	728, 730, 731, 732, 733, 734, 735, 736, 
	737, 738, 739, 740, 741, 742, 743, 744, 
	745, 746, 748, 749, 750, 751, 752, 753, 
	754, 755, 756, 757, 758, 759, 760, 6, 
	762, 764, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 29, 0, 0, 54, 3, 1, 0, 
	29, 1, 35, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 0, 
	110, 23, 0, 0, 7, 135, 48, 0, 
	102, 9, 5, 45, 130, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 118, 27, 51, 0, 0, 0, 
	37, 37, 54, 37, 87, 0, 0, 39, 
	0, 96, 0, 93, 90, 41, 96, 90, 
	99, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 84, 
	0, 72, 33, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 63, 
	31, 126, 60, 57, 31, 63, 57, 66, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	84, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 84, 0, 78, 
	33, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 140, 0, 54, 84, 0, 75, 33, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 84, 0, 
	69, 33, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 765;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 1299 "lib/gherkin/rb_lexer/uk.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
        
# line 1308 "lib/gherkin/rb_lexer/uk.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1552 "lib/gherkin/rb_lexer/uk.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1591 "lib/gherkin/rb_lexer/uk.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/uk.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
