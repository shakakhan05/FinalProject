
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Es #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/es.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 17, 18, 19, 35, 36, 37, 
	39, 41, 46, 51, 56, 61, 65, 69, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 88, 90, 95, 102, 107, 108, 109, 
	110, 111, 112, 113, 114, 115, 116, 117, 
	118, 119, 120, 121, 134, 136, 138, 140, 
	142, 144, 146, 148, 150, 152, 154, 156, 
	158, 160, 162, 164, 180, 182, 183, 184, 
	185, 186, 187, 188, 189, 190, 191, 192, 
	193, 194, 195, 196, 197, 198, 208, 210, 
	212, 214, 216, 218, 220, 222, 224, 226, 
	228, 230, 232, 234, 236, 238, 240, 242, 
	244, 246, 248, 250, 252, 254, 256, 258, 
	260, 262, 264, 266, 268, 270, 272, 274, 
	276, 278, 280, 282, 284, 286, 288, 291, 
	293, 295, 297, 299, 301, 304, 306, 308, 
	310, 312, 314, 316, 318, 320, 322, 324, 
	326, 328, 330, 332, 334, 336, 338, 340, 
	341, 342, 343, 344, 345, 346, 348, 350, 
	353, 354, 355, 356, 357, 358, 359, 360, 
	361, 362, 369, 371, 373, 375, 377, 379, 
	381, 383, 385, 387, 389, 391, 393, 395, 
	397, 399, 400, 401, 402, 403, 404, 405, 
	407, 408, 409, 410, 411, 412, 413, 414, 
	415, 416, 430, 432, 434, 436, 438, 440, 
	442, 444, 446, 448, 450, 452, 454, 456, 
	458, 460, 462, 464, 466, 468, 470, 472, 
	474, 476, 478, 480, 482, 484, 487, 489, 
	491, 493, 495, 497, 499, 501, 503, 505, 
	507, 509, 511, 513, 515, 517, 519, 521, 
	523, 525, 528, 531, 534, 536, 538, 540, 
	542, 544, 546, 549, 551, 553, 555, 557, 
	559, 561, 563, 565, 567, 569, 571, 573, 
	575, 577, 579, 581, 583, 585, 587, 589, 
	590, 591, 592, 593, 594, 595, 596, 597, 
	598, 599, 600, 601, 602, 603, 604, 605, 
	606, 607, 608, 609, 610, 623, 625, 627, 
	629, 631, 633, 635, 637, 639, 641, 643, 
	645, 647, 649, 651, 653, 656, 658, 660, 
	662, 664, 666, 668, 670, 672, 674, 676, 
	678, 680, 682, 684, 686, 688, 690, 692, 
	694, 696, 699, 702, 705, 707, 709, 711, 
	713, 715, 717, 719, 721, 723, 725, 727, 
	729, 731, 733, 735, 736, 737, 741, 747, 
	750, 752, 758, 774, 777, 779, 781, 783, 
	785, 787, 789, 791, 793, 795, 797, 799, 
	801, 803, 805, 807, 809, 811, 813, 815, 
	817, 820, 823, 826, 828, 830, 832, 834, 
	836, 838, 841, 843, 845, 847, 849, 851, 
	853, 855, 857, 859, 861, 863, 865, 867, 
	869, 871, 873, 875, 877, 879, 881
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-17, 10, 32, 34, 35, 37, 42, 64, 
	65, 67, 68, 69, 80, 89, 124, 9, 
	13, -69, -65, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 68, 69, 80, 89, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 10, 
	10, 13, 13, 32, 64, 9, 10, 9, 
	10, 13, 32, 64, 11, 12, 10, 32, 
	64, 9, 13, 110, 116, 101, 99, 101, 
	100, 101, 110, 116, 101, 115, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 67, 
	68, 69, 80, 89, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 68, 69, 80, 
	89, 124, 9, 13, 97, 117, 114, 97, 
	99, 116, 101, 114, -61, -83, 115, 116, 
	105, 99, 97, 58, 10, 10, 10, 32, 
	35, 37, 64, 65, 67, 69, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 110, 10, 116, 
	10, 101, 10, 99, 10, 101, 10, 100, 
	10, 101, 10, 110, 10, 116, 10, 101, 
	10, 115, 10, 58, 10, 97, 10, 114, 
	10, 97, 10, 99, 10, 116, 10, 101, 
	10, 114, -61, 10, -83, 10, 10, 115, 
	10, 116, 10, 105, 10, 99, 10, 97, 
	10, 106, 115, 10, 101, 10, 109, 10, 
	112, 10, 108, 10, 111, 10, 99, 113, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 117, 10, 101, 
	10, 109, 10, 97, 10, 32, 10, 100, 
	10, 101, 10, 108, 10, 32, 10, 101, 
	10, 115, 10, 99, 97, 110, 100, 111, 
	97, 100, 97, 111, 32, 115, 106, 110, 
	115, 101, 109, 112, 108, 111, 115, 58, 
	10, 10, 10, 32, 35, 67, 124, 9, 
	13, 10, 97, 10, 114, 10, 97, 10, 
	99, 10, 116, 10, 101, 10, 114, -61, 
	10, -83, 10, 10, 115, 10, 116, 10, 
	105, 10, 99, 10, 97, 10, 58, 116, 
	111, 110, 99, 101, 115, 99, 113, 101, 
	110, 97, 114, 105, 111, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 67, 
	68, 69, 80, 89, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 110, 10, 116, 
	10, 101, 10, 99, 10, 101, 10, 100, 
	10, 101, 10, 110, 10, 116, 10, 101, 
	10, 115, 10, 58, 10, 97, 117, 10, 
	114, 10, 97, 10, 99, 10, 116, 10, 
	101, 10, 114, -61, 10, -83, 10, 10, 
	115, 10, 116, 10, 105, 10, 99, 10, 
	97, 10, 97, 10, 110, 10, 100, 10, 
	111, 10, 97, 10, 100, 10, 97, 111, 
	10, 32, 115, 10, 110, 115, 10, 116, 
	10, 111, 10, 110, 10, 99, 10, 101, 
	10, 115, 10, 99, 113, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 117, 10, 101, 10, 109, 10, 
	97, 10, 32, 10, 100, 10, 101, 10, 
	108, 10, 32, 10, 101, 10, 115, 10, 
	99, 10, 101, 10, 114, 117, 101, 109, 
	97, 32, 100, 101, 108, 32, 101, 115, 
	99, 101, 110, 97, 114, 105, 111, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	67, 68, 69, 80, 89, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 97, 117, 
	10, 114, 10, 97, 10, 99, 10, 116, 
	10, 101, 10, 114, -61, 10, -83, 10, 
	10, 115, 10, 116, 10, 105, 10, 99, 
	10, 97, 10, 58, 10, 97, 10, 110, 
	10, 100, 10, 111, 10, 97, 10, 100, 
	10, 97, 111, 10, 32, 115, 10, 110, 
	115, 10, 116, 10, 111, 10, 110, 10, 
	99, 10, 101, 10, 115, 10, 99, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 111, 10, 101, 10, 114, 101, 
	114, 32, 124, 9, 13, 10, 32, 92, 
	124, 9, 13, 10, 92, 124, 10, 92, 
	10, 32, 92, 124, 9, 13, 10, 32, 
	34, 35, 37, 42, 64, 65, 67, 68, 
	69, 80, 89, 124, 9, 13, 10, 97, 
	117, 10, 114, 10, 97, 10, 99, 10, 
	116, 10, 101, 10, 114, -61, 10, -83, 
	10, 10, 115, 10, 116, 10, 105, 10, 
	99, 10, 97, 10, 58, 10, 97, 10, 
	110, 10, 100, 10, 111, 10, 97, 10, 
	100, 10, 97, 111, 10, 32, 115, 10, 
	110, 115, 10, 116, 10, 111, 10, 110, 
	10, 99, 10, 101, 10, 115, 10, 99, 
	113, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 117, 10, 
	101, 10, 109, 10, 97, 10, 32, 10, 
	100, 10, 101, 10, 108, 10, 32, 10, 
	101, 10, 115, 10, 99, 10, 101, 10, 
	114, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 15, 1, 1, 14, 1, 1, 2, 
	2, 3, 3, 3, 3, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 3, 5, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 11, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 14, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 2, 2, 3, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 12, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 3, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 2, 4, 3, 
	2, 4, 14, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 3, 3, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 17, 19, 21, 37, 39, 41, 
	44, 47, 52, 57, 62, 67, 71, 75, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 108, 
	110, 112, 115, 120, 127, 132, 134, 136, 
	138, 140, 142, 144, 146, 148, 150, 152, 
	154, 156, 158, 160, 173, 176, 179, 182, 
	185, 188, 191, 194, 197, 200, 203, 206, 
	209, 212, 215, 218, 234, 237, 239, 241, 
	243, 245, 247, 249, 251, 253, 255, 257, 
	259, 261, 263, 265, 267, 269, 279, 282, 
	285, 288, 291, 294, 297, 300, 303, 306, 
	309, 312, 315, 318, 321, 324, 327, 330, 
	333, 336, 339, 342, 345, 348, 351, 354, 
	357, 360, 363, 366, 369, 372, 375, 378, 
	381, 384, 387, 390, 393, 396, 399, 403, 
	406, 409, 412, 415, 418, 422, 425, 428, 
	431, 434, 437, 440, 443, 446, 449, 452, 
	455, 458, 461, 464, 467, 470, 473, 476, 
	478, 480, 482, 484, 486, 488, 491, 494, 
	498, 500, 502, 504, 506, 508, 510, 512, 
	514, 516, 523, 526, 529, 532, 535, 538, 
	541, 544, 547, 550, 553, 556, 559, 562, 
	565, 568, 570, 572, 574, 576, 578, 580, 
	583, 585, 587, 589, 591, 593, 595, 597, 
	599, 601, 615, 618, 621, 624, 627, 630, 
	633, 636, 639, 642, 645, 648, 651, 654, 
	657, 660, 663, 666, 669, 672, 675, 678, 
	681, 684, 687, 690, 693, 696, 700, 703, 
	706, 709, 712, 715, 718, 721, 724, 727, 
	730, 733, 736, 739, 742, 745, 748, 751, 
	754, 757, 761, 765, 769, 772, 775, 778, 
	781, 784, 787, 791, 794, 797, 800, 803, 
	806, 809, 812, 815, 818, 821, 824, 827, 
	830, 833, 836, 839, 842, 845, 848, 851, 
	853, 855, 857, 859, 861, 863, 865, 867, 
	869, 871, 873, 875, 877, 879, 881, 883, 
	885, 887, 889, 891, 893, 906, 909, 912, 
	915, 918, 921, 924, 927, 930, 933, 936, 
	939, 942, 945, 948, 951, 955, 958, 961, 
	964, 967, 970, 973, 976, 979, 982, 985, 
	988, 991, 994, 997, 1000, 1003, 1006, 1009, 
	1012, 1015, 1019, 1023, 1027, 1030, 1033, 1036, 
	1039, 1042, 1045, 1048, 1051, 1054, 1057, 1060, 
	1063, 1066, 1069, 1072, 1074, 1076, 1080, 1086, 
	1090, 1093, 1099, 1115, 1119, 1122, 1125, 1128, 
	1131, 1134, 1137, 1140, 1143, 1146, 1149, 1152, 
	1155, 1158, 1161, 1164, 1167, 1170, 1173, 1176, 
	1179, 1183, 1187, 1191, 1194, 1197, 1200, 1203, 
	1206, 1209, 1213, 1216, 1219, 1222, 1225, 1228, 
	1231, 1234, 1237, 1240, 1243, 1246, 1249, 1252, 
	1255, 1258, 1261, 1264, 1267, 1270, 1273
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 7, 14, 2, 
	0, 15, 0, 2, 0, 3, 2, 4, 
	5, 6, 7, 8, 9, 10, 11, 12, 
	13, 7, 14, 2, 0, 16, 0, 17, 
	0, 19, 20, 18, 22, 23, 21, 26, 
	25, 27, 25, 24, 30, 29, 31, 29, 
	28, 30, 29, 32, 29, 28, 30, 29, 
	33, 29, 28, 35, 34, 34, 0, 3, 
	36, 36, 0, 38, 39, 37, 3, 0, 
	40, 0, 41, 0, 42, 0, 43, 0, 
	44, 0, 45, 0, 46, 0, 47, 0, 
	48, 0, 49, 0, 50, 0, 51, 0, 
	52, 0, 53, 0, 54, 0, 0, 55, 
	57, 58, 56, 0, 0, 0, 0, 59, 
	60, 61, 60, 60, 63, 62, 59, 3, 
	64, 8, 64, 0, 65, 0, 66, 0, 
	67, 0, 68, 0, 69, 0, 70, 0, 
	71, 0, 72, 0, 73, 0, 74, 0, 
	75, 0, 76, 0, 78, 77, 80, 79, 
	80, 81, 82, 83, 84, 82, 85, 86, 
	87, 88, 84, 81, 79, 80, 89, 79, 
	80, 90, 79, 80, 91, 79, 80, 92, 
	79, 80, 93, 79, 80, 94, 79, 80, 
	95, 79, 80, 96, 79, 80, 97, 79, 
	80, 98, 79, 80, 99, 79, 80, 100, 
	79, 80, 101, 79, 80, 102, 79, 80, 
	103, 79, 105, 104, 106, 107, 108, 109, 
	110, 111, 112, 113, 114, 115, 109, 116, 
	104, 0, 117, 118, 0, 119, 0, 120, 
	0, 121, 0, 122, 0, 123, 0, 124, 
	0, 125, 0, 126, 0, 127, 0, 128, 
	0, 129, 0, 130, 0, 131, 0, 132, 
	0, 134, 133, 136, 135, 136, 137, 138, 
	139, 138, 140, 141, 142, 137, 135, 136, 
	143, 135, 136, 144, 135, 136, 145, 135, 
	136, 146, 135, 136, 147, 135, 136, 148, 
	135, 136, 149, 135, 136, 150, 135, 136, 
	151, 135, 136, 152, 135, 136, 153, 135, 
	136, 154, 135, 136, 155, 135, 136, 156, 
	135, 136, 157, 135, 136, 158, 135, 136, 
	159, 135, 136, 160, 135, 136, 161, 135, 
	136, 162, 135, 136, 163, 135, 136, 164, 
	135, 136, 165, 135, 136, 166, 135, 136, 
	167, 135, 136, 168, 135, 136, 169, 135, 
	136, 170, 135, 136, 171, 135, 136, 172, 
	135, 136, 173, 135, 136, 174, 135, 136, 
	175, 135, 176, 136, 135, 177, 136, 135, 
	136, 178, 135, 136, 179, 135, 136, 180, 
	135, 136, 181, 135, 136, 167, 135, 136, 
	182, 183, 135, 136, 184, 135, 136, 185, 
	135, 136, 186, 135, 136, 187, 135, 136, 
	166, 135, 136, 188, 189, 135, 136, 190, 
	135, 136, 191, 135, 136, 192, 135, 136, 
	193, 135, 136, 194, 135, 136, 167, 135, 
	136, 195, 135, 136, 196, 135, 136, 197, 
	135, 136, 198, 135, 136, 199, 135, 136, 
	200, 135, 136, 201, 135, 136, 202, 135, 
	136, 203, 135, 136, 204, 135, 136, 205, 
	135, 136, 188, 135, 206, 0, 207, 0, 
	208, 0, 209, 0, 210, 0, 211, 0, 
	212, 212, 0, 54, 209, 0, 213, 214, 
	215, 0, 216, 0, 217, 0, 218, 0, 
	219, 0, 220, 0, 221, 0, 222, 0, 
	224, 223, 226, 225, 226, 227, 228, 229, 
	228, 227, 225, 226, 230, 225, 226, 231, 
	225, 226, 232, 225, 226, 233, 225, 226, 
	234, 225, 226, 235, 225, 226, 236, 225, 
	237, 226, 225, 238, 226, 225, 226, 239, 
	225, 226, 240, 225, 226, 241, 225, 226, 
	242, 225, 226, 243, 225, 226, 244, 225, 
	245, 0, 246, 0, 247, 0, 248, 0, 
	249, 0, 209, 0, 250, 251, 0, 252, 
	0, 253, 0, 254, 0, 255, 0, 256, 
	0, 257, 0, 258, 0, 260, 259, 262, 
	261, 262, 263, 264, 265, 266, 264, 267, 
	268, 269, 270, 271, 266, 263, 261, 262, 
	272, 261, 262, 273, 261, 262, 274, 261, 
	262, 275, 261, 262, 276, 261, 262, 277, 
	261, 262, 278, 261, 262, 279, 261, 262, 
	280, 261, 262, 281, 261, 262, 282, 261, 
	262, 283, 261, 262, 284, 261, 262, 285, 
	261, 262, 286, 261, 262, 287, 261, 262, 
	288, 261, 262, 289, 261, 262, 290, 261, 
	262, 291, 261, 262, 292, 261, 262, 293, 
	261, 262, 294, 261, 262, 295, 261, 262, 
	296, 261, 262, 297, 261, 262, 286, 261, 
	262, 298, 299, 261, 262, 300, 261, 262, 
	301, 261, 262, 302, 261, 262, 303, 261, 
	262, 304, 261, 262, 305, 261, 306, 262, 
	261, 307, 262, 261, 262, 308, 261, 262, 
	309, 261, 262, 310, 261, 262, 311, 261, 
	262, 297, 261, 262, 312, 261, 262, 313, 
	261, 262, 314, 261, 262, 315, 261, 262, 
	316, 261, 262, 317, 261, 262, 318, 318, 
	261, 262, 286, 315, 261, 262, 319, 320, 
	261, 262, 321, 261, 262, 322, 261, 262, 
	323, 261, 262, 324, 261, 262, 325, 261, 
	262, 315, 261, 262, 326, 327, 261, 262, 
	328, 261, 262, 329, 261, 262, 330, 261, 
	262, 331, 261, 262, 332, 261, 262, 297, 
	261, 262, 333, 261, 262, 334, 261, 262, 
	335, 261, 262, 336, 261, 262, 337, 261, 
	262, 338, 261, 262, 339, 261, 262, 340, 
	261, 262, 341, 261, 262, 342, 261, 262, 
	343, 261, 262, 326, 261, 262, 344, 261, 
	262, 314, 261, 345, 0, 346, 0, 347, 
	0, 348, 0, 349, 0, 350, 0, 351, 
	0, 352, 0, 353, 0, 354, 0, 355, 
	0, 356, 0, 357, 0, 358, 0, 359, 
	0, 360, 0, 361, 0, 362, 0, 363, 
	0, 365, 364, 367, 366, 367, 368, 369, 
	370, 371, 369, 372, 373, 374, 375, 371, 
	368, 366, 367, 376, 366, 367, 377, 366, 
	367, 378, 366, 367, 379, 366, 367, 380, 
	366, 367, 381, 366, 367, 382, 366, 367, 
	383, 366, 367, 384, 366, 367, 385, 366, 
	367, 386, 366, 367, 387, 366, 367, 388, 
	366, 367, 389, 366, 367, 390, 366, 367, 
	391, 392, 366, 367, 393, 366, 367, 394, 
	366, 367, 395, 366, 367, 396, 366, 367, 
	397, 366, 367, 398, 366, 399, 367, 366, 
	400, 367, 366, 367, 401, 366, 367, 402, 
	366, 367, 403, 366, 367, 404, 366, 367, 
	405, 366, 367, 390, 366, 367, 406, 366, 
	367, 407, 366, 367, 408, 366, 367, 409, 
	366, 367, 410, 366, 367, 411, 366, 367, 
	412, 412, 366, 367, 390, 409, 366, 367, 
	413, 414, 366, 367, 415, 366, 367, 416, 
	366, 367, 417, 366, 367, 418, 366, 367, 
	419, 366, 367, 409, 366, 367, 420, 366, 
	367, 421, 366, 367, 422, 366, 367, 423, 
	366, 367, 424, 366, 367, 425, 366, 367, 
	405, 366, 367, 426, 366, 367, 408, 366, 
	427, 0, 208, 0, 428, 429, 428, 0, 
	432, 431, 433, 434, 431, 430, 0, 436, 
	437, 435, 0, 436, 435, 432, 438, 436, 
	437, 438, 435, 432, 439, 440, 441, 442, 
	443, 444, 445, 446, 447, 448, 449, 443, 
	450, 439, 0, 80, 451, 452, 79, 80, 
	453, 79, 80, 454, 79, 80, 455, 79, 
	80, 456, 79, 80, 457, 79, 80, 458, 
	79, 459, 80, 79, 460, 80, 79, 80, 
	461, 79, 80, 462, 79, 80, 463, 79, 
	80, 464, 79, 80, 465, 79, 80, 103, 
	79, 80, 466, 79, 80, 467, 79, 80, 
	468, 79, 80, 469, 79, 80, 470, 79, 
	80, 471, 79, 80, 472, 472, 79, 80, 
	103, 469, 79, 80, 473, 474, 79, 80, 
	475, 79, 80, 476, 79, 80, 477, 79, 
	80, 478, 79, 80, 479, 79, 80, 469, 
	79, 80, 480, 481, 79, 80, 482, 79, 
	80, 483, 79, 80, 484, 79, 80, 485, 
	79, 80, 486, 79, 80, 465, 79, 80, 
	487, 79, 80, 488, 79, 80, 489, 79, 
	80, 490, 79, 80, 491, 79, 80, 492, 
	79, 80, 493, 79, 80, 494, 79, 80, 
	495, 79, 80, 496, 79, 80, 497, 79, 
	80, 480, 79, 80, 498, 79, 80, 468, 
	79, 499, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 4, 4, 5, 15, 17, 31, 
	34, 37, 68, 155, 159, 355, 357, 3, 
	6, 7, 8, 9, 8, 8, 9, 8, 
	10, 10, 10, 11, 10, 10, 10, 11, 
	12, 13, 14, 4, 14, 15, 4, 16, 
	18, 19, 20, 21, 22, 23, 24, 25, 
	26, 27, 28, 29, 30, 414, 32, 33, 
	33, 4, 16, 35, 36, 4, 35, 34, 
	36, 38, 39, 40, 41, 42, 43, 44, 
	45, 46, 47, 48, 49, 50, 51, 50, 
	51, 51, 4, 52, 66, 363, 382, 386, 
	412, 53, 54, 55, 56, 57, 58, 59, 
	60, 61, 62, 63, 64, 65, 4, 67, 
	4, 4, 5, 15, 17, 31, 34, 37, 
	68, 155, 159, 355, 357, 69, 151, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 84, 
	85, 85, 4, 86, 100, 112, 126, 87, 
	88, 89, 90, 91, 92, 93, 94, 95, 
	96, 97, 98, 99, 4, 101, 102, 103, 
	104, 105, 106, 107, 108, 109, 110, 111, 
	67, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 127, 132, 
	128, 129, 130, 131, 133, 139, 134, 135, 
	136, 137, 138, 140, 141, 142, 143, 144, 
	145, 146, 147, 148, 149, 150, 152, 153, 
	154, 31, 156, 157, 158, 160, 185, 191, 
	161, 162, 163, 164, 165, 166, 167, 168, 
	169, 168, 169, 169, 4, 170, 171, 172, 
	173, 174, 175, 176, 177, 178, 179, 180, 
	181, 182, 183, 184, 67, 186, 187, 188, 
	189, 190, 192, 279, 193, 194, 195, 196, 
	197, 198, 199, 200, 201, 200, 201, 201, 
	4, 202, 216, 217, 229, 247, 251, 277, 
	203, 204, 205, 206, 207, 208, 209, 210, 
	211, 212, 213, 214, 215, 4, 67, 218, 
	219, 220, 221, 222, 223, 224, 225, 226, 
	227, 228, 230, 243, 231, 232, 233, 234, 
	235, 236, 237, 238, 239, 240, 241, 242, 
	244, 245, 246, 216, 248, 249, 250, 252, 
	258, 253, 254, 255, 256, 257, 259, 265, 
	260, 261, 262, 263, 264, 266, 267, 268, 
	269, 270, 271, 272, 273, 274, 275, 276, 
	278, 280, 281, 282, 283, 284, 285, 286, 
	287, 288, 289, 290, 291, 292, 293, 294, 
	295, 296, 297, 298, 299, 300, 299, 300, 
	300, 4, 301, 315, 316, 335, 339, 353, 
	302, 303, 304, 305, 306, 307, 308, 309, 
	310, 311, 312, 313, 314, 4, 67, 317, 
	331, 318, 319, 320, 321, 322, 323, 324, 
	325, 326, 327, 328, 329, 330, 332, 333, 
	334, 315, 336, 337, 338, 340, 346, 341, 
	342, 343, 344, 345, 347, 348, 349, 350, 
	351, 352, 354, 356, 357, 358, 359, 361, 
	362, 360, 358, 359, 360, 358, 361, 362, 
	5, 15, 17, 31, 34, 37, 68, 155, 
	159, 355, 357, 364, 378, 365, 366, 367, 
	368, 369, 370, 371, 372, 373, 374, 375, 
	376, 377, 379, 380, 381, 66, 383, 384, 
	385, 387, 393, 388, 389, 390, 391, 392, 
	394, 400, 395, 396, 397, 398, 399, 401, 
	402, 403, 404, 405, 406, 407, 408, 409, 
	410, 411, 413, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 0, 0, 54, 3, 1, 0, 29, 
	1, 29, 29, 29, 29, 29, 35, 0, 
	0, 0, 7, 135, 48, 0, 102, 9, 
	5, 45, 130, 45, 0, 33, 122, 33, 
	33, 0, 11, 106, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	0, 110, 23, 0, 27, 118, 27, 51, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 72, 33, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 15, 
	31, 126, 60, 57, 31, 63, 57, 63, 
	63, 63, 63, 63, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 69, 33, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 0, 81, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	75, 33, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 78, 33, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 37, 37, 
	54, 37, 87, 0, 0, 39, 0, 0, 
	93, 90, 41, 96, 90, 96, 96, 96, 
	96, 96, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 414;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 793 "lib/gherkin/rb_lexer/es.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
        
# line 802 "lib/gherkin/rb_lexer/es.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1046 "lib/gherkin/rb_lexer/es.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1085 "lib/gherkin/rb_lexer/es.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/es.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
