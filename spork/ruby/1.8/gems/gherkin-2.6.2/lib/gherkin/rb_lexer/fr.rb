
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Fr #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/fr.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 21, 22, 23, 24, 25, 26, 
	27, 28, 29, 30, 31, 32, 33, 36, 
	37, 39, 59, 60, 61, 63, 65, 70, 
	75, 80, 85, 89, 93, 95, 96, 97, 
	98, 99, 100, 101, 102, 103, 104, 105, 
	106, 107, 108, 109, 110, 111, 116, 123, 
	128, 129, 130, 131, 132, 133, 134, 135, 
	136, 137, 138, 139, 140, 141, 142, 159, 
	161, 163, 165, 167, 169, 171, 173, 175, 
	177, 179, 181, 183, 187, 207, 209, 211, 
	212, 213, 214, 215, 216, 217, 218, 219, 
	220, 227, 229, 231, 233, 235, 237, 239, 
	241, 243, 245, 247, 249, 251, 253, 255, 
	257, 258, 259, 260, 261, 262, 263, 264, 
	265, 266, 267, 268, 269, 270, 271, 272, 
	273, 274, 286, 288, 290, 292, 294, 296, 
	298, 300, 302, 304, 306, 308, 310, 312, 
	314, 316, 318, 320, 322, 324, 326, 328, 
	330, 332, 334, 336, 338, 340, 342, 344, 
	346, 348, 350, 352, 354, 356, 358, 360, 
	362, 364, 366, 368, 370, 372, 374, 376, 
	378, 380, 382, 384, 386, 389, 391, 393, 
	395, 397, 399, 401, 403, 405, 406, 407, 
	408, 409, 410, 412, 413, 414, 415, 416, 
	417, 418, 419, 420, 421, 423, 424, 425, 
	426, 427, 428, 429, 430, 431, 432, 433, 
	434, 450, 452, 454, 456, 458, 460, 462, 
	464, 466, 468, 470, 472, 474, 478, 481, 
	483, 485, 487, 489, 491, 493, 495, 497, 
	499, 501, 503, 505, 507, 509, 511, 513, 
	515, 517, 519, 521, 524, 526, 528, 530, 
	532, 534, 536, 538, 540, 542, 544, 546, 
	548, 550, 552, 554, 556, 558, 560, 562, 
	564, 567, 569, 571, 573, 575, 577, 579, 
	582, 584, 586, 588, 590, 592, 594, 596, 
	598, 600, 601, 602, 603, 604, 606, 607, 
	608, 609, 610, 611, 612, 613, 614, 615, 
	616, 634, 636, 638, 640, 642, 644, 646, 
	648, 650, 652, 654, 656, 658, 662, 665, 
	667, 669, 671, 673, 675, 677, 679, 681, 
	683, 685, 687, 689, 691, 693, 695, 697, 
	699, 701, 703, 705, 707, 709, 711, 713, 
	715, 717, 719, 721, 724, 726, 728, 730, 
	732, 734, 736, 738, 740, 742, 744, 746, 
	748, 750, 752, 754, 756, 758, 760, 762, 
	765, 767, 769, 771, 773, 775, 777, 779, 
	781, 783, 786, 788, 790, 792, 794, 796, 
	798, 800, 802, 804, 806, 808, 810, 813, 
	815, 817, 818, 819, 823, 829, 832, 834, 
	840, 860, 863, 865, 867, 869, 871, 873, 
	875, 877, 879, 881, 883, 885, 887, 889, 
	891, 893, 895, 897, 899, 901, 903, 906, 
	908, 910, 912, 914, 916, 918, 920, 922, 
	924, 926, 928, 930, 932, 934, 936, 938, 
	940, 942, 944, 946, 949, 951, 953, 955, 
	957, 959, 961, 963, 965, 967, 970, 972, 
	974, 976, 978, 980, 982, 984, 986, 988, 
	990, 992, 994, 997, 999, 1001, 1003, 1004, 
	1005
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-61, -17, 10, 32, 34, 35, 37, 42, 
	64, 65, 67, 69, 70, 76, 77, 80, 
	81, 83, 124, 9, 13, -119, 116, 97, 
	110, 116, 32, 100, 111, 110, 110, -61, 
	-87, 32, 101, 115, 10, 10, 13, -61, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	67, 69, 70, 76, 77, 80, 81, 83, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 13, 
	32, 64, 9, 10, 9, 10, 13, 32, 
	64, 11, 12, 10, 32, 64, 9, 13, 
	108, 111, 114, 115, 111, 110, 116, 101, 
	120, 116, 101, 58, 10, 10, -61, 10, 
	32, 35, 37, 42, 64, 65, 69, 70, 
	76, 77, 80, 81, 83, 9, 13, -119, 
	10, 10, 116, 10, 97, 10, 110, 10, 
	116, 10, 32, 10, 100, 10, 111, 10, 
	110, 10, 110, -61, 10, -87, 10, 10, 
	32, 101, 115, -61, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 69, 70, 76, 
	77, 80, 81, 83, 124, 9, 13, 116, 
	120, 32, 97, 101, 109, 112, 108, 101, 
	115, 58, 10, 10, 10, 32, 35, 70, 
	124, 9, 13, 10, 111, 10, 110, 10, 
	99, 10, 116, 10, 105, 10, 111, 10, 
	110, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, -61, 10, -87, 10, 10, 
	58, 111, 110, 99, 116, 105, 111, 110, 
	110, 97, 108, 105, 116, -61, -87, 58, 
	10, 10, 10, 32, 35, 37, 64, 67, 
	69, 70, 80, 83, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 111, 10, 110, 10, 116, 
	10, 101, 10, 120, 10, 116, 10, 101, 
	10, 58, 10, 120, 10, 101, 10, 109, 
	10, 112, 10, 108, 10, 101, 10, 115, 
	10, 111, 10, 110, 10, 99, 10, 116, 
	10, 105, 10, 111, 10, 110, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	-61, 10, -87, 10, 10, 108, 10, 97, 
	10, 110, 10, 32, 10, 100, 10, 117, 
	10, 32, 10, 83, 115, 10, 99, -61, 
	10, -87, 10, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 111, 114, 115, 
	113, 117, 39, 101, 97, 105, 108, 97, 
	110, 32, 100, 117, 32, 83, 115, 99, 
	-61, -87, 110, 97, 114, 105, 111, 58, 
	10, 10, -61, 10, 32, 35, 37, 42, 
	64, 65, 69, 70, 76, 77, 81, 83, 
	9, 13, -119, 10, 10, 116, 10, 97, 
	10, 110, 10, 116, 10, 32, 10, 100, 
	10, 111, 10, 110, 10, 110, -61, 10, 
	-87, 10, 10, 32, 101, 115, 10, 32, 
	115, 10, 32, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	108, 10, 111, 10, 114, 10, 115, 10, 
	116, 10, 32, 97, 10, 111, 10, 110, 
	10, 99, 10, 116, 10, 105, 10, 111, 
	10, 110, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, -61, 10, -87, 10, 
	10, 58, 10, 111, 10, 114, 10, 115, 
	10, 113, 10, 117, 10, 39, 101, 10, 
	97, 10, 105, 10, 117, 10, 97, 10, 
	110, 10, 100, 10, 99, 111, -61, 10, 
	-87, 10, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 105, 10, 116, 
	117, 97, 110, 100, 99, 111, -61, -87, 
	110, 97, 114, 105, 111, 58, 10, 10, 
	-61, 10, 32, 35, 37, 42, 64, 65, 
	67, 69, 70, 76, 77, 80, 81, 83, 
	9, 13, -119, 10, 10, 116, 10, 97, 
	10, 110, 10, 116, 10, 32, 10, 100, 
	10, 111, 10, 110, 10, 110, -61, 10, 
	-87, 10, 10, 32, 101, 115, 10, 32, 
	115, 10, 32, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	108, 10, 111, 10, 114, 10, 115, 10, 
	111, 10, 110, 10, 116, 10, 101, 10, 
	120, 10, 116, 10, 101, 10, 58, 10, 
	116, 10, 32, 97, 10, 111, 10, 110, 
	10, 99, 10, 116, 10, 105, 10, 111, 
	10, 110, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, -61, 10, -87, 10, 
	10, 111, 10, 114, 10, 115, 10, 113, 
	10, 117, 10, 39, 101, 10, 97, 10, 
	105, 10, 108, 10, 97, 10, 110, 10, 
	32, 10, 100, 10, 117, 10, 32, 10, 
	83, 115, 10, 99, -61, 10, -87, 10, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 117, 10, 97, 10, 110, 
	10, 100, 10, 99, 111, 10, 105, 10, 
	116, 105, 116, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	-61, 10, 32, 34, 35, 37, 42, 64, 
	65, 67, 69, 70, 76, 77, 80, 81, 
	83, 124, 9, 13, 10, 32, 115, 10, 
	32, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 108, 10, 
	111, 10, 114, 10, 115, 10, 116, 10, 
	32, 97, 10, 111, 10, 110, 10, 99, 
	10, 116, 10, 105, 10, 111, 10, 110, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 116, -61, 10, -87, 10, 10, 58, 
	10, 111, 10, 114, 10, 115, 10, 113, 
	10, 117, 10, 39, 101, 10, 97, 10, 
	105, 10, 108, 10, 97, 10, 110, 10, 
	32, 10, 100, 10, 117, 10, 32, 10, 
	83, 115, 10, 99, -61, 10, -87, 10, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 117, 10, 97, 10, 110, 
	10, 100, 10, 99, 111, 10, 105, 10, 
	116, 32, 115, -69, -65, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 19, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 1, 
	2, 18, 1, 1, 2, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 5, 3, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 15, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 18, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 10, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	14, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	16, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 1, 1, 2, 4, 3, 2, 4, 
	18, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 1, 1, 
	0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 21, 23, 25, 27, 29, 31, 
	33, 35, 37, 39, 41, 43, 45, 49, 
	51, 54, 74, 76, 78, 81, 84, 89, 
	94, 99, 104, 108, 112, 115, 117, 119, 
	121, 123, 125, 127, 129, 131, 133, 135, 
	137, 139, 141, 143, 145, 147, 152, 159, 
	164, 166, 168, 170, 172, 174, 176, 178, 
	180, 182, 184, 186, 188, 190, 192, 209, 
	212, 215, 218, 221, 224, 227, 230, 233, 
	236, 239, 242, 245, 250, 270, 273, 276, 
	278, 280, 282, 284, 286, 288, 290, 292, 
	294, 301, 304, 307, 310, 313, 316, 319, 
	322, 325, 328, 331, 334, 337, 340, 343, 
	346, 348, 350, 352, 354, 356, 358, 360, 
	362, 364, 366, 368, 370, 372, 374, 376, 
	378, 380, 392, 395, 398, 401, 404, 407, 
	410, 413, 416, 419, 422, 425, 428, 431, 
	434, 437, 440, 443, 446, 449, 452, 455, 
	458, 461, 464, 467, 470, 473, 476, 479, 
	482, 485, 488, 491, 494, 497, 500, 503, 
	506, 509, 512, 515, 518, 521, 524, 527, 
	530, 533, 536, 539, 542, 546, 549, 552, 
	555, 558, 561, 564, 567, 570, 572, 574, 
	576, 578, 580, 583, 585, 587, 589, 591, 
	593, 595, 597, 599, 601, 604, 606, 608, 
	610, 612, 614, 616, 618, 620, 622, 624, 
	626, 642, 645, 648, 651, 654, 657, 660, 
	663, 666, 669, 672, 675, 678, 683, 687, 
	690, 693, 696, 699, 702, 705, 708, 711, 
	714, 717, 720, 723, 726, 729, 732, 735, 
	738, 741, 744, 747, 751, 754, 757, 760, 
	763, 766, 769, 772, 775, 778, 781, 784, 
	787, 790, 793, 796, 799, 802, 805, 808, 
	811, 815, 818, 821, 824, 827, 830, 833, 
	837, 840, 843, 846, 849, 852, 855, 858, 
	861, 864, 866, 868, 870, 872, 875, 877, 
	879, 881, 883, 885, 887, 889, 891, 893, 
	895, 913, 916, 919, 922, 925, 928, 931, 
	934, 937, 940, 943, 946, 949, 954, 958, 
	961, 964, 967, 970, 973, 976, 979, 982, 
	985, 988, 991, 994, 997, 1000, 1003, 1006, 
	1009, 1012, 1015, 1018, 1021, 1024, 1027, 1030, 
	1033, 1036, 1039, 1042, 1046, 1049, 1052, 1055, 
	1058, 1061, 1064, 1067, 1070, 1073, 1076, 1079, 
	1082, 1085, 1088, 1091, 1094, 1097, 1100, 1103, 
	1107, 1110, 1113, 1116, 1119, 1122, 1125, 1128, 
	1131, 1134, 1138, 1141, 1144, 1147, 1150, 1153, 
	1156, 1159, 1162, 1165, 1168, 1171, 1174, 1178, 
	1181, 1184, 1186, 1188, 1192, 1198, 1202, 1205, 
	1211, 1231, 1235, 1238, 1241, 1244, 1247, 1250, 
	1253, 1256, 1259, 1262, 1265, 1268, 1271, 1274, 
	1277, 1280, 1283, 1286, 1289, 1292, 1295, 1299, 
	1302, 1305, 1308, 1311, 1314, 1317, 1320, 1323, 
	1326, 1329, 1332, 1335, 1338, 1341, 1344, 1347, 
	1350, 1353, 1356, 1359, 1363, 1366, 1369, 1372, 
	1375, 1378, 1381, 1384, 1387, 1390, 1394, 1397, 
	1400, 1403, 1406, 1409, 1412, 1415, 1418, 1421, 
	1424, 1427, 1430, 1434, 1437, 1440, 1443, 1445, 
	1447
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 2, 4, 3, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 19, 3, 0, 20, 0, 21, 
	0, 22, 0, 23, 0, 24, 0, 25, 
	0, 26, 0, 27, 0, 28, 0, 29, 
	0, 30, 0, 31, 0, 32, 33, 34, 
	0, 0, 35, 37, 38, 36, 1, 4, 
	3, 5, 6, 7, 8, 9, 10, 11, 
	12, 13, 14, 15, 16, 17, 18, 19, 
	3, 0, 39, 0, 40, 0, 42, 43, 
	41, 45, 46, 44, 49, 48, 50, 48, 
	47, 53, 52, 54, 52, 51, 53, 52, 
	55, 52, 51, 53, 52, 56, 52, 51, 
	58, 57, 57, 0, 4, 59, 59, 0, 
	61, 62, 60, 4, 0, 63, 0, 64, 
	0, 65, 0, 66, 0, 67, 0, 68, 
	0, 69, 0, 70, 0, 71, 0, 72, 
	0, 73, 0, 74, 0, 75, 0, 76, 
	0, 32, 0, 0, 0, 0, 0, 77, 
	78, 79, 78, 78, 81, 80, 77, 4, 
	82, 9, 82, 0, 83, 0, 84, 0, 
	85, 0, 34, 0, 86, 0, 87, 0, 
	88, 0, 89, 0, 90, 0, 91, 0, 
	92, 0, 93, 0, 95, 94, 97, 96, 
	98, 97, 99, 100, 101, 102, 100, 103, 
	104, 105, 106, 107, 108, 109, 110, 99, 
	96, 111, 97, 96, 97, 112, 96, 97, 
	113, 96, 97, 114, 96, 97, 115, 96, 
	97, 116, 96, 97, 117, 96, 97, 118, 
	96, 97, 119, 96, 97, 120, 96, 121, 
	97, 96, 122, 97, 96, 97, 123, 124, 
	125, 96, 126, 128, 127, 129, 130, 131, 
	132, 133, 134, 135, 136, 137, 138, 139, 
	140, 141, 142, 143, 127, 0, 144, 145, 
	0, 32, 22, 0, 146, 0, 147, 0, 
	148, 0, 149, 0, 150, 0, 151, 0, 
	152, 0, 154, 153, 156, 155, 156, 157, 
	158, 159, 158, 157, 155, 156, 160, 155, 
	156, 161, 155, 156, 162, 155, 156, 163, 
	155, 156, 164, 155, 156, 165, 155, 156, 
	166, 155, 156, 167, 155, 156, 168, 155, 
	156, 169, 155, 156, 170, 155, 156, 171, 
	155, 172, 156, 155, 173, 156, 155, 156, 
	174, 155, 175, 0, 176, 0, 177, 0, 
	178, 0, 179, 0, 180, 0, 181, 0, 
	182, 0, 183, 0, 184, 0, 185, 0, 
	186, 0, 187, 0, 188, 0, 189, 0, 
	191, 190, 193, 192, 193, 194, 195, 196, 
	195, 197, 198, 199, 200, 201, 194, 192, 
	193, 202, 192, 193, 203, 192, 193, 204, 
	192, 193, 205, 192, 193, 206, 192, 193, 
	207, 192, 193, 208, 192, 193, 209, 192, 
	193, 210, 192, 193, 211, 192, 193, 212, 
	192, 193, 213, 192, 193, 214, 192, 193, 
	215, 192, 193, 216, 192, 193, 217, 192, 
	193, 218, 192, 193, 219, 192, 193, 220, 
	192, 193, 221, 192, 193, 222, 192, 193, 
	223, 192, 193, 224, 192, 193, 225, 192, 
	193, 226, 192, 193, 227, 192, 193, 228, 
	192, 193, 229, 192, 193, 222, 192, 193, 
	230, 192, 193, 231, 192, 193, 232, 192, 
	193, 233, 192, 193, 234, 192, 193, 235, 
	192, 193, 236, 192, 193, 237, 192, 193, 
	238, 192, 193, 239, 192, 193, 240, 192, 
	193, 241, 192, 242, 193, 192, 222, 193, 
	192, 193, 243, 192, 193, 244, 192, 193, 
	245, 192, 193, 246, 192, 193, 247, 192, 
	193, 248, 192, 193, 249, 192, 193, 250, 
	250, 192, 193, 251, 192, 252, 193, 192, 
	253, 193, 192, 193, 254, 192, 193, 255, 
	192, 193, 256, 192, 193, 257, 192, 193, 
	222, 192, 258, 0, 259, 0, 260, 0, 
	261, 0, 262, 0, 32, 34, 0, 263, 
	0, 85, 0, 264, 0, 265, 0, 266, 
	0, 267, 0, 268, 0, 269, 0, 270, 
	0, 271, 271, 0, 272, 0, 273, 0, 
	274, 0, 275, 0, 276, 0, 277, 0, 
	278, 0, 279, 0, 280, 0, 282, 281, 
	284, 283, 285, 284, 286, 287, 288, 289, 
	287, 290, 291, 292, 293, 294, 295, 296, 
	286, 283, 297, 284, 283, 284, 298, 283, 
	284, 299, 283, 284, 300, 283, 284, 301, 
	283, 284, 302, 283, 284, 303, 283, 284, 
	304, 283, 284, 305, 283, 284, 306, 283, 
	307, 284, 283, 308, 284, 283, 284, 309, 
	310, 311, 283, 284, 309, 311, 283, 284, 
	309, 283, 284, 312, 283, 284, 313, 283, 
	284, 314, 283, 284, 315, 283, 284, 316, 
	283, 284, 317, 283, 284, 318, 283, 284, 
	319, 283, 284, 320, 283, 284, 321, 283, 
	284, 322, 283, 284, 323, 283, 284, 324, 
	283, 284, 325, 283, 284, 326, 283, 284, 
	327, 283, 284, 328, 283, 284, 311, 283, 
	284, 329, 283, 284, 309, 299, 283, 284, 
	330, 283, 284, 331, 283, 284, 332, 283, 
	284, 333, 283, 284, 334, 283, 284, 335, 
	283, 284, 336, 283, 284, 337, 283, 284, 
	338, 283, 284, 339, 283, 284, 340, 283, 
	284, 341, 283, 342, 284, 283, 343, 284, 
	283, 284, 309, 283, 284, 344, 283, 284, 
	345, 283, 284, 346, 283, 284, 347, 283, 
	284, 348, 283, 284, 309, 311, 283, 284, 
	349, 283, 284, 328, 283, 284, 350, 283, 
	284, 351, 283, 284, 352, 283, 284, 311, 
	283, 284, 353, 354, 283, 355, 284, 283, 
	356, 284, 283, 284, 357, 283, 284, 358, 
	283, 284, 359, 283, 284, 360, 283, 284, 
	343, 283, 284, 361, 283, 284, 311, 283, 
	362, 0, 363, 0, 364, 0, 34, 0, 
	365, 366, 0, 367, 0, 368, 0, 369, 
	0, 370, 0, 371, 0, 372, 0, 373, 
	0, 374, 0, 376, 375, 378, 377, 379, 
	378, 380, 381, 382, 383, 381, 384, 385, 
	386, 387, 388, 389, 390, 391, 392, 380, 
	377, 393, 378, 377, 378, 394, 377, 378, 
	395, 377, 378, 396, 377, 378, 397, 377, 
	378, 398, 377, 378, 399, 377, 378, 400, 
	377, 378, 401, 377, 378, 402, 377, 403, 
	378, 377, 404, 378, 377, 378, 405, 406, 
	407, 377, 378, 405, 407, 377, 378, 405, 
	377, 378, 408, 377, 378, 409, 377, 378, 
	410, 377, 378, 411, 377, 378, 412, 377, 
	378, 413, 377, 378, 414, 377, 378, 415, 
	377, 378, 416, 377, 378, 417, 377, 378, 
	418, 377, 378, 419, 377, 378, 420, 377, 
	378, 421, 377, 378, 422, 377, 378, 423, 
	377, 378, 424, 377, 378, 407, 377, 378, 
	425, 377, 378, 426, 377, 378, 427, 377, 
	378, 428, 377, 378, 429, 377, 378, 430, 
	377, 378, 431, 377, 378, 405, 377, 378, 
	432, 377, 378, 405, 395, 377, 378, 433, 
	377, 378, 434, 377, 378, 435, 377, 378, 
	436, 377, 378, 437, 377, 378, 438, 377, 
	378, 439, 377, 378, 440, 377, 378, 441, 
	377, 378, 442, 377, 378, 443, 377, 378, 
	444, 377, 445, 378, 377, 431, 378, 377, 
	378, 446, 377, 378, 447, 377, 378, 448, 
	377, 378, 449, 377, 378, 450, 377, 378, 
	405, 407, 377, 378, 451, 377, 378, 424, 
	377, 378, 452, 377, 378, 453, 377, 378, 
	454, 377, 378, 455, 377, 378, 456, 377, 
	378, 457, 377, 378, 458, 377, 378, 459, 
	459, 377, 378, 460, 377, 461, 378, 377, 
	462, 378, 377, 378, 463, 377, 378, 464, 
	377, 378, 465, 377, 378, 466, 377, 378, 
	431, 377, 378, 467, 377, 378, 468, 377, 
	378, 469, 377, 378, 407, 377, 378, 460, 
	470, 377, 378, 471, 377, 378, 407, 377, 
	472, 0, 34, 0, 473, 474, 473, 0, 
	477, 476, 478, 479, 476, 475, 0, 481, 
	482, 480, 0, 481, 480, 477, 483, 481, 
	482, 483, 480, 484, 477, 485, 486, 487, 
	488, 489, 490, 491, 492, 493, 494, 495, 
	496, 497, 498, 499, 500, 485, 0, 97, 
	123, 125, 96, 97, 123, 96, 97, 501, 
	96, 97, 502, 96, 97, 503, 96, 97, 
	504, 96, 97, 505, 96, 97, 506, 96, 
	97, 507, 96, 97, 508, 96, 97, 509, 
	96, 97, 510, 96, 97, 511, 96, 97, 
	512, 96, 97, 513, 96, 97, 514, 96, 
	97, 515, 96, 97, 516, 96, 97, 517, 
	96, 97, 125, 96, 97, 518, 96, 97, 
	123, 113, 96, 97, 519, 96, 97, 520, 
	96, 97, 521, 96, 97, 522, 96, 97, 
	523, 96, 97, 524, 96, 97, 525, 96, 
	97, 526, 96, 97, 527, 96, 97, 528, 
	96, 97, 529, 96, 97, 530, 96, 531, 
	97, 96, 532, 97, 96, 97, 123, 96, 
	97, 533, 96, 97, 534, 96, 97, 535, 
	96, 97, 536, 96, 97, 537, 96, 97, 
	123, 125, 96, 97, 538, 96, 97, 517, 
	96, 97, 539, 96, 97, 540, 96, 97, 
	541, 96, 97, 542, 96, 97, 543, 96, 
	97, 544, 96, 97, 545, 96, 97, 546, 
	546, 96, 97, 547, 96, 548, 97, 96, 
	549, 97, 96, 97, 550, 96, 97, 551, 
	96, 97, 552, 96, 97, 553, 96, 97, 
	532, 96, 97, 554, 96, 97, 555, 96, 
	97, 556, 96, 97, 125, 96, 97, 547, 
	557, 96, 97, 558, 96, 97, 125, 96, 
	32, 34, 0, 559, 0, 3, 0, 560, 
	0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 462, 17, 17, 18, 28, 30, 
	44, 45, 48, 52, 77, 104, 181, 187, 
	189, 281, 285, 387, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 461, 44, 16, 16, 17, 29, 19, 
	20, 21, 22, 21, 21, 22, 21, 23, 
	23, 23, 24, 23, 23, 23, 24, 25, 
	26, 27, 17, 27, 28, 17, 29, 31, 
	32, 33, 34, 35, 36, 37, 38, 39, 
	40, 41, 42, 43, 464, 46, 47, 17, 
	46, 45, 47, 49, 50, 51, 53, 54, 
	55, 56, 57, 58, 59, 60, 61, 62, 
	61, 62, 63, 62, 17, 395, 394, 409, 
	413, 415, 430, 436, 438, 454, 458, 64, 
	65, 66, 67, 68, 69, 70, 71, 72, 
	73, 74, 75, 76, 393, 394, 2, 17, 
	17, 18, 28, 30, 44, 45, 48, 52, 
	77, 104, 181, 187, 189, 281, 285, 387, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 87, 88, 88, 17, 89, 
	90, 91, 92, 93, 94, 95, 96, 97, 
	98, 99, 100, 101, 102, 103, 76, 105, 
	106, 107, 108, 109, 110, 111, 112, 113, 
	114, 115, 116, 117, 118, 119, 120, 121, 
	120, 121, 121, 17, 122, 136, 144, 151, 
	165, 173, 123, 124, 125, 126, 127, 128, 
	129, 130, 131, 132, 133, 134, 135, 17, 
	137, 138, 139, 140, 141, 142, 143, 76, 
	145, 146, 147, 148, 149, 150, 152, 153, 
	154, 155, 156, 157, 158, 159, 160, 161, 
	162, 163, 164, 166, 167, 168, 169, 170, 
	171, 172, 173, 174, 175, 176, 177, 178, 
	179, 180, 182, 183, 184, 185, 186, 188, 
	190, 191, 192, 193, 194, 195, 196, 197, 
	198, 199, 200, 201, 202, 203, 204, 205, 
	206, 207, 208, 207, 208, 209, 208, 17, 
	224, 223, 238, 242, 244, 259, 265, 267, 
	271, 210, 211, 212, 213, 214, 215, 216, 
	217, 218, 219, 220, 221, 76, 222, 223, 
	225, 226, 227, 228, 229, 230, 231, 232, 
	233, 234, 235, 236, 237, 17, 239, 240, 
	241, 243, 245, 246, 247, 248, 249, 250, 
	251, 252, 253, 254, 255, 256, 257, 258, 
	260, 261, 262, 263, 264, 266, 268, 269, 
	270, 272, 279, 273, 274, 275, 276, 277, 
	278, 280, 282, 283, 284, 286, 385, 287, 
	288, 289, 290, 291, 292, 293, 294, 295, 
	296, 295, 296, 297, 296, 17, 312, 311, 
	326, 330, 338, 340, 354, 360, 362, 378, 
	382, 298, 299, 300, 301, 302, 303, 304, 
	305, 306, 307, 308, 309, 76, 310, 311, 
	313, 314, 315, 316, 317, 318, 319, 320, 
	321, 322, 323, 324, 325, 17, 327, 328, 
	329, 331, 332, 333, 334, 335, 336, 337, 
	339, 341, 342, 343, 344, 345, 346, 347, 
	348, 349, 350, 351, 352, 353, 355, 356, 
	357, 358, 359, 361, 363, 364, 365, 366, 
	367, 368, 369, 370, 371, 372, 373, 374, 
	375, 376, 377, 379, 380, 381, 383, 384, 
	386, 387, 388, 389, 391, 392, 390, 388, 
	389, 390, 388, 391, 2, 392, 18, 28, 
	30, 44, 45, 48, 52, 77, 104, 181, 
	187, 189, 281, 285, 387, 396, 397, 398, 
	399, 400, 401, 402, 403, 404, 405, 406, 
	407, 408, 17, 410, 411, 412, 414, 416, 
	417, 418, 419, 420, 421, 422, 423, 424, 
	425, 426, 427, 428, 429, 431, 432, 433, 
	434, 435, 437, 439, 440, 441, 442, 443, 
	444, 445, 446, 447, 448, 449, 450, 451, 
	452, 453, 455, 456, 457, 459, 460, 463, 
	0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 29, 0, 0, 54, 3, 1, 0, 
	29, 1, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 35, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 0, 110, 23, 0, 
	0, 7, 135, 48, 0, 102, 9, 5, 
	45, 130, 45, 0, 33, 122, 33, 33, 
	0, 11, 106, 0, 0, 114, 25, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 84, 0, 72, 33, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 0, 0, 63, 31, 
	126, 60, 57, 31, 63, 57, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 66, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 81, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 0, 69, 33, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 84, 0, 78, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 84, 0, 75, 33, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 37, 37, 54, 37, 87, 
	0, 0, 39, 0, 96, 0, 93, 90, 
	41, 96, 90, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 99, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 464;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 881 "lib/gherkin/rb_lexer/fr.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
        
# line 890 "lib/gherkin/rb_lexer/fr.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1134 "lib/gherkin/rb_lexer/fr.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1173 "lib/gherkin/rb_lexer/fr.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/fr.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
