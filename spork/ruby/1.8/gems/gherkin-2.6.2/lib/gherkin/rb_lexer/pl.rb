
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Pl #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/pl.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 20, 21, 22, 41, 42, 43, 
	45, 47, 52, 57, 62, 67, 71, 75, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 96, 101, 108, 113, 114, 115, 
	116, 117, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 131, 132, 
	133, 134, 135, 136, 137, 138, 139, 140, 
	141, 142, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 175, 
	177, 196, 198, 199, 200, 201, 202, 203, 
	204, 205, 206, 207, 208, 209, 225, 227, 
	229, 231, 233, 235, 237, 239, 241, 243, 
	245, 247, 249, 251, 253, 255, 257, 259, 
	261, 263, 266, 268, 270, 272, 274, 276, 
	278, 280, 282, 284, 286, 288, 291, 293, 
	295, 297, 299, 301, 303, 305, 307, 309, 
	311, 313, 315, 317, 319, 321, 323, 325, 
	327, 329, 331, 333, 335, 337, 339, 341, 
	343, 346, 348, 350, 352, 354, 356, 358, 
	360, 362, 364, 366, 368, 370, 372, 374, 
	376, 378, 381, 383, 385, 387, 389, 391, 
	393, 395, 397, 399, 401, 403, 404, 405, 
	406, 407, 408, 409, 410, 411, 412, 413, 
	414, 415, 416, 417, 418, 419, 420, 421, 
	422, 423, 439, 441, 443, 445, 447, 449, 
	451, 453, 455, 457, 459, 461, 463, 465, 
	467, 469, 471, 473, 475, 477, 480, 482, 
	484, 486, 488, 490, 492, 494, 496, 498, 
	500, 502, 504, 506, 508, 510, 512, 514, 
	516, 518, 520, 522, 525, 527, 529, 531, 
	533, 535, 537, 539, 541, 543, 545, 547, 
	549, 551, 553, 555, 557, 559, 561, 563, 
	565, 567, 569, 570, 571, 572, 573, 574, 
	575, 576, 577, 578, 579, 580, 581, 582, 
	583, 584, 595, 597, 599, 601, 603, 605, 
	607, 609, 611, 613, 615, 617, 619, 621, 
	623, 625, 627, 629, 631, 633, 635, 637, 
	639, 641, 643, 646, 648, 650, 652, 654, 
	656, 658, 660, 662, 664, 666, 668, 670, 
	672, 674, 676, 678, 680, 682, 684, 686, 
	688, 690, 692, 694, 696, 698, 700, 702, 
	704, 706, 708, 710, 712, 714, 716, 718, 
	720, 722, 724, 726, 728, 730, 732, 734, 
	736, 738, 740, 741, 742, 743, 744, 746, 
	747, 748, 749, 750, 751, 752, 753, 754, 
	755, 756, 757, 773, 775, 777, 779, 781, 
	783, 785, 787, 789, 791, 793, 795, 797, 
	799, 801, 803, 805, 807, 809, 811, 814, 
	816, 818, 820, 822, 824, 826, 828, 830, 
	832, 834, 836, 839, 841, 843, 845, 847, 
	849, 851, 853, 855, 857, 859, 861, 863, 
	865, 867, 869, 871, 873, 875, 877, 879, 
	881, 883, 885, 887, 889, 891, 894, 896, 
	898, 900, 902, 904, 906, 908, 910, 912, 
	914, 916, 918, 920, 922, 924, 926, 928, 
	930, 932, 934, 936, 937, 938, 939, 940, 
	944, 950, 953, 955, 961, 980
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-17, 10, 32, 34, 35, 37, 42, 64, 
	65, 73, 74, 77, 79, 80, 83, 87, 
	90, 124, 9, 13, -69, -65, 10, 32, 
	34, 35, 37, 42, 64, 65, 73, 74, 
	77, 79, 80, 83, 87, 90, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 10, 13, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 108, 101, 101, -59, -101, -68, 108, 
	105, 101, 97, 106, -60, -123, 99, 114, 
	97, 122, 114, 122, 121, 107, -59, -126, 
	97, 100, 121, 58, 10, 10, 10, 32, 
	35, 87, 124, 9, 13, -59, 10, -126, 
	10, 10, 97, -59, 10, -101, 10, 10, 
	99, 10, 105, 10, 119, 10, 111, -59, 
	10, -101, 10, -60, 10, -121, 10, 10, 
	58, 10, 32, 34, 35, 37, 42, 64, 
	65, 73, 74, 77, 79, 80, 83, 87, 
	90, 124, 9, 13, 99, 122, 101, 110, 
	97, 114, 105, 117, 115, 122, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	73, 74, 77, 79, 83, 87, 90, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	108, 10, 101, 10, 101, -59, 10, -101, 
	-68, 10, 10, 108, 10, 105, 10, 101, 
	10, 97, 10, 106, -60, 10, -123, 10, 
	10, 99, 10, 114, 10, 97, 10, 122, 
	10, 99, 122, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 117, 10, 
	115, 10, 122, 10, 58, 10, 97, 10, 
	98, 10, 108, 10, 111, 10, 110, 10, 
	32, 10, 115, 10, 99, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	117, 10, 115, 10, 122, 10, 97, -59, 
	10, 116, -126, 10, 10, 97, -59, 10, 
	-101, 10, 10, 99, 10, 105, 10, 119, 
	10, 111, -59, 10, -101, 10, -60, 10, 
	-121, 10, 10, 101, 10, 100, 10, 121, 
	10, 97, -59, 10, 107, -126, 10, 10, 
	111, -59, 10, -68, 10, 10, 101, 10, 
	110, 10, 105, -59, 10, -126, 10, 10, 
	97, 10, 100, 97, 98, 108, 111, 110, 
	32, 115, 99, 101, 110, 97, 114, 105, 
	117, 115, 122, 97, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 73, 74, 
	77, 79, 83, 87, 90, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 108, 10, 
	101, 10, 101, -59, 10, -101, -68, 10, 
	10, 108, 10, 105, 10, 101, 10, 97, 
	10, 106, -60, 10, -123, 10, 10, 99, 
	10, 114, 10, 97, 10, 122, 10, 99, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 117, 10, 115, 10, 122, 
	10, 58, -59, 10, 116, -126, 10, 10, 
	97, -59, 10, -101, 10, 10, 99, 10, 
	105, 10, 119, 10, 111, -59, 10, -101, 
	10, -60, 10, -121, 10, 10, 101, 10, 
	100, 10, 121, 10, 97, 10, 107, -59, 
	10, -126, 10, 10, 97, 10, 100, -59, 
	116, -126, 97, -59, -101, 99, 105, 119, 
	111, -59, -101, -60, -121, 58, 10, 10, 
	10, 32, 35, 37, 64, 80, 83, 87, 
	90, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	114, 10, 122, 10, 121, 10, 107, -59, 
	10, -126, 10, 10, 97, 10, 100, 10, 
	121, 10, 58, 10, 99, 122, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 117, 10, 115, 10, 122, 10, 97, 
	10, 98, 10, 108, 10, 111, 10, 110, 
	10, 32, 10, 115, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 117, 10, 115, 10, 122, 10, 97, 
	-59, 10, -126, 10, 10, 97, -59, 10, 
	-101, 10, 10, 99, 10, 105, 10, 119, 
	10, 111, -59, 10, -101, 10, -60, 10, 
	-121, 10, 10, 97, -59, 10, -126, 10, 
	10, 111, -59, 10, -68, 10, 10, 101, 
	10, 110, 10, 105, 101, 100, 121, 97, 
	-59, 107, -126, 111, -59, -68, 101, 110, 
	105, 97, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 73, 74, 77, 79, 
	83, 87, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 108, 10, 101, 10, 
	101, -59, 10, -101, -68, 10, 10, 108, 
	10, 105, 10, 101, 10, 97, 10, 106, 
	-60, 10, -123, 10, 10, 99, 10, 114, 
	10, 97, 10, 122, 10, 99, 122, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 117, 10, 115, 10, 122, 10, 
	58, 10, 97, 10, 98, 10, 108, 10, 
	111, 10, 110, 10, 32, 10, 115, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 117, 10, 115, 10, 
	122, 10, 97, -59, 10, 116, -126, 10, 
	10, 97, -59, 10, -101, 10, 10, 99, 
	10, 105, 10, 119, 10, 111, -59, 10, 
	-101, 10, -60, 10, -121, 10, 10, 101, 
	10, 100, 10, 121, 10, 97, 10, 107, 
	-59, 10, -126, 10, 10, 97, 10, 100, 
	-59, -126, 97, 100, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 73, 74, 77, 79, 80, 83, 87, 
	90, 124, 9, 13, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 18, 1, 1, 17, 1, 1, 2, 
	2, 3, 3, 3, 3, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 3, 5, 3, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	17, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 14, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 9, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 14, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 2, 
	4, 3, 2, 4, 17, 0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 20, 22, 24, 43, 45, 47, 
	50, 53, 58, 63, 68, 73, 77, 81, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 114, 
	116, 118, 121, 126, 133, 138, 140, 142, 
	144, 146, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 175, 
	177, 179, 181, 183, 185, 187, 189, 191, 
	193, 195, 202, 205, 208, 211, 214, 217, 
	220, 223, 226, 229, 232, 235, 238, 241, 
	244, 263, 266, 268, 270, 272, 274, 276, 
	278, 280, 282, 284, 286, 288, 304, 307, 
	310, 313, 316, 319, 322, 325, 328, 331, 
	334, 337, 340, 343, 346, 349, 352, 355, 
	358, 361, 365, 368, 371, 374, 377, 380, 
	383, 386, 389, 392, 395, 398, 402, 405, 
	408, 411, 414, 417, 420, 423, 426, 429, 
	432, 435, 438, 441, 444, 447, 450, 453, 
	456, 459, 462, 465, 468, 471, 474, 477, 
	480, 484, 487, 490, 493, 496, 499, 502, 
	505, 508, 511, 514, 517, 520, 523, 526, 
	529, 532, 536, 539, 542, 545, 548, 551, 
	554, 557, 560, 563, 566, 569, 571, 573, 
	575, 577, 579, 581, 583, 585, 587, 589, 
	591, 593, 595, 597, 599, 601, 603, 605, 
	607, 609, 625, 628, 631, 634, 637, 640, 
	643, 646, 649, 652, 655, 658, 661, 664, 
	667, 670, 673, 676, 679, 682, 686, 689, 
	692, 695, 698, 701, 704, 707, 710, 713, 
	716, 719, 722, 725, 728, 731, 734, 737, 
	740, 743, 746, 749, 753, 756, 759, 762, 
	765, 768, 771, 774, 777, 780, 783, 786, 
	789, 792, 795, 798, 801, 804, 807, 810, 
	813, 816, 819, 821, 823, 825, 827, 829, 
	831, 833, 835, 837, 839, 841, 843, 845, 
	847, 849, 860, 863, 866, 869, 872, 875, 
	878, 881, 884, 887, 890, 893, 896, 899, 
	902, 905, 908, 911, 914, 917, 920, 923, 
	926, 929, 932, 936, 939, 942, 945, 948, 
	951, 954, 957, 960, 963, 966, 969, 972, 
	975, 978, 981, 984, 987, 990, 993, 996, 
	999, 1002, 1005, 1008, 1011, 1014, 1017, 1020, 
	1023, 1026, 1029, 1032, 1035, 1038, 1041, 1044, 
	1047, 1050, 1053, 1056, 1059, 1062, 1065, 1068, 
	1071, 1074, 1077, 1079, 1081, 1083, 1085, 1088, 
	1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 
	1106, 1108, 1110, 1126, 1129, 1132, 1135, 1138, 
	1141, 1144, 1147, 1150, 1153, 1156, 1159, 1162, 
	1165, 1168, 1171, 1174, 1177, 1180, 1183, 1187, 
	1190, 1193, 1196, 1199, 1202, 1205, 1208, 1211, 
	1214, 1217, 1220, 1224, 1227, 1230, 1233, 1236, 
	1239, 1242, 1245, 1248, 1251, 1254, 1257, 1260, 
	1263, 1266, 1269, 1272, 1275, 1278, 1281, 1284, 
	1287, 1290, 1293, 1296, 1299, 1302, 1306, 1309, 
	1312, 1315, 1318, 1321, 1324, 1327, 1330, 1333, 
	1336, 1339, 1342, 1345, 1348, 1351, 1354, 1357, 
	1360, 1363, 1366, 1369, 1371, 1373, 1375, 1377, 
	1381, 1387, 1391, 1394, 1400, 1419
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 7, 10, 11, 12, 13, 14, 15, 
	16, 17, 2, 0, 18, 0, 2, 0, 
	3, 2, 4, 5, 6, 7, 8, 9, 
	7, 10, 11, 12, 13, 14, 15, 16, 
	17, 2, 0, 19, 0, 20, 0, 22, 
	23, 21, 25, 26, 24, 29, 28, 30, 
	28, 27, 33, 32, 34, 32, 31, 33, 
	32, 35, 32, 31, 33, 32, 36, 32, 
	31, 38, 37, 37, 0, 3, 39, 39, 
	0, 41, 42, 40, 3, 0, 43, 0, 
	44, 0, 45, 0, 46, 0, 47, 0, 
	48, 0, 49, 0, 50, 0, 51, 0, 
	52, 0, 53, 0, 54, 0, 55, 0, 
	56, 0, 57, 0, 0, 58, 60, 61, 
	59, 0, 0, 0, 0, 62, 63, 64, 
	63, 63, 66, 65, 62, 3, 67, 8, 
	67, 0, 68, 0, 69, 0, 70, 0, 
	71, 0, 72, 73, 0, 74, 0, 69, 
	0, 72, 0, 75, 0, 76, 0, 77, 
	0, 78, 0, 69, 0, 79, 0, 80, 
	0, 69, 0, 81, 0, 82, 0, 83, 
	0, 84, 0, 85, 0, 86, 0, 87, 
	0, 88, 0, 89, 0, 90, 0, 92, 
	91, 94, 93, 94, 95, 96, 97, 96, 
	95, 93, 98, 94, 93, 99, 94, 93, 
	94, 100, 93, 101, 94, 93, 102, 94, 
	93, 94, 103, 93, 94, 104, 93, 94, 
	105, 93, 94, 106, 93, 107, 94, 93, 
	108, 94, 93, 109, 94, 93, 110, 94, 
	93, 94, 111, 93, 113, 112, 114, 115, 
	116, 117, 118, 119, 117, 120, 121, 122, 
	123, 124, 125, 126, 127, 112, 0, 128, 
	129, 0, 130, 0, 131, 0, 132, 0, 
	133, 0, 134, 0, 135, 0, 136, 0, 
	137, 0, 138, 0, 140, 139, 142, 141, 
	142, 143, 144, 145, 146, 144, 147, 146, 
	148, 149, 150, 151, 152, 153, 143, 141, 
	142, 154, 141, 142, 155, 141, 142, 156, 
	141, 142, 157, 141, 142, 158, 141, 142, 
	159, 141, 142, 160, 141, 142, 161, 141, 
	142, 162, 141, 142, 163, 141, 142, 164, 
	141, 142, 165, 141, 142, 166, 141, 142, 
	167, 141, 142, 168, 141, 142, 169, 141, 
	142, 170, 141, 142, 171, 141, 172, 142, 
	141, 173, 174, 142, 141, 142, 175, 141, 
	142, 170, 141, 142, 173, 141, 142, 176, 
	141, 142, 177, 141, 178, 142, 141, 179, 
	142, 141, 142, 170, 141, 142, 180, 141, 
	142, 181, 141, 142, 170, 141, 142, 182, 
	183, 141, 142, 184, 141, 142, 185, 141, 
	142, 186, 141, 142, 187, 141, 142, 188, 
	141, 142, 189, 141, 142, 190, 141, 142, 
	191, 141, 142, 168, 141, 142, 192, 141, 
	142, 193, 141, 142, 194, 141, 142, 195, 
	141, 142, 196, 141, 142, 197, 141, 142, 
	198, 141, 142, 199, 141, 142, 200, 141, 
	142, 201, 141, 142, 202, 141, 142, 203, 
	141, 142, 204, 141, 142, 205, 141, 142, 
	206, 141, 142, 207, 141, 142, 191, 141, 
	208, 142, 209, 141, 210, 142, 141, 142, 
	211, 141, 212, 142, 141, 213, 142, 141, 
	142, 214, 141, 142, 215, 141, 142, 216, 
	141, 142, 217, 141, 218, 142, 141, 219, 
	142, 141, 220, 142, 141, 191, 142, 141, 
	142, 221, 141, 142, 222, 141, 142, 170, 
	141, 142, 223, 141, 224, 142, 225, 141, 
	226, 142, 141, 142, 227, 141, 228, 142, 
	141, 229, 142, 141, 142, 230, 141, 142, 
	231, 141, 142, 207, 141, 232, 142, 141, 
	233, 142, 141, 142, 234, 141, 142, 235, 
	141, 236, 0, 237, 0, 238, 0, 239, 
	0, 240, 0, 241, 0, 242, 0, 243, 
	0, 244, 0, 245, 0, 246, 0, 247, 
	0, 248, 0, 249, 0, 250, 0, 251, 
	0, 252, 0, 253, 0, 255, 254, 257, 
	256, 257, 258, 259, 260, 261, 259, 262, 
	261, 263, 264, 265, 266, 267, 268, 258, 
	256, 257, 269, 256, 257, 270, 256, 257, 
	271, 256, 257, 272, 256, 257, 273, 256, 
	257, 274, 256, 257, 275, 256, 257, 276, 
	256, 257, 277, 256, 257, 278, 256, 257, 
	279, 256, 257, 280, 256, 257, 281, 256, 
	257, 282, 256, 257, 283, 256, 257, 284, 
	256, 257, 285, 256, 257, 286, 256, 287, 
	257, 256, 288, 289, 257, 256, 257, 290, 
	256, 257, 285, 256, 257, 288, 256, 257, 
	291, 256, 257, 292, 256, 293, 257, 256, 
	294, 257, 256, 257, 285, 256, 257, 295, 
	256, 257, 296, 256, 257, 285, 256, 257, 
	297, 256, 257, 298, 256, 257, 299, 256, 
	257, 300, 256, 257, 301, 256, 257, 302, 
	256, 257, 303, 256, 257, 304, 256, 257, 
	305, 256, 257, 283, 256, 306, 257, 307, 
	256, 308, 257, 256, 257, 309, 256, 310, 
	257, 256, 311, 257, 256, 257, 312, 256, 
	257, 313, 256, 257, 314, 256, 257, 315, 
	256, 316, 257, 256, 317, 257, 256, 318, 
	257, 256, 305, 257, 256, 257, 319, 256, 
	257, 320, 256, 257, 285, 256, 257, 321, 
	256, 257, 322, 256, 323, 257, 256, 324, 
	257, 256, 257, 325, 256, 257, 326, 256, 
	327, 328, 0, 329, 0, 330, 0, 331, 
	0, 332, 0, 333, 0, 334, 0, 335, 
	0, 336, 0, 337, 0, 338, 0, 339, 
	0, 340, 0, 341, 0, 343, 342, 345, 
	344, 345, 346, 347, 348, 347, 349, 350, 
	351, 352, 346, 344, 345, 353, 344, 345, 
	354, 344, 345, 355, 344, 345, 356, 344, 
	345, 357, 344, 345, 358, 344, 345, 359, 
	344, 345, 360, 344, 345, 361, 344, 345, 
	362, 344, 345, 363, 344, 345, 364, 344, 
	345, 365, 344, 345, 366, 344, 345, 367, 
	344, 345, 368, 344, 345, 369, 344, 345, 
	370, 344, 371, 345, 344, 372, 345, 344, 
	345, 373, 344, 345, 374, 344, 345, 375, 
	344, 345, 376, 344, 345, 377, 378, 344, 
	345, 379, 344, 345, 380, 344, 345, 381, 
	344, 345, 382, 344, 345, 383, 344, 345, 
	384, 344, 345, 385, 344, 345, 375, 344, 
	345, 386, 344, 345, 387, 344, 345, 388, 
	344, 345, 389, 344, 345, 390, 344, 345, 
	391, 344, 345, 392, 344, 345, 393, 344, 
	345, 394, 344, 345, 395, 344, 345, 396, 
	344, 345, 397, 344, 345, 398, 344, 345, 
	399, 344, 345, 400, 344, 345, 401, 344, 
	345, 375, 344, 402, 345, 344, 403, 345, 
	344, 345, 404, 344, 405, 345, 344, 406, 
	345, 344, 345, 407, 344, 345, 408, 344, 
	345, 409, 344, 345, 410, 344, 411, 345, 
	344, 412, 345, 344, 413, 345, 344, 375, 
	345, 344, 345, 414, 344, 415, 345, 344, 
	416, 345, 344, 345, 417, 344, 418, 345, 
	344, 419, 345, 344, 345, 420, 344, 345, 
	421, 344, 345, 401, 344, 422, 0, 423, 
	0, 69, 0, 424, 0, 425, 426, 0, 
	427, 0, 428, 0, 429, 0, 430, 0, 
	431, 0, 432, 0, 433, 0, 434, 0, 
	435, 0, 437, 436, 439, 438, 439, 440, 
	441, 442, 443, 441, 444, 443, 445, 446, 
	447, 448, 449, 450, 440, 438, 439, 451, 
	438, 439, 452, 438, 439, 453, 438, 439, 
	454, 438, 439, 455, 438, 439, 456, 438, 
	439, 457, 438, 439, 458, 438, 439, 459, 
	438, 439, 460, 438, 439, 461, 438, 439, 
	462, 438, 439, 463, 438, 439, 464, 438, 
	439, 465, 438, 439, 466, 438, 439, 467, 
	438, 439, 468, 438, 469, 439, 438, 470, 
	471, 439, 438, 439, 472, 438, 439, 467, 
	438, 439, 470, 438, 439, 473, 438, 439, 
	474, 438, 475, 439, 438, 476, 439, 438, 
	439, 467, 438, 439, 477, 438, 439, 478, 
	438, 439, 467, 438, 439, 479, 480, 438, 
	439, 481, 438, 439, 482, 438, 439, 483, 
	438, 439, 484, 438, 439, 485, 438, 439, 
	486, 438, 439, 487, 438, 439, 488, 438, 
	439, 465, 438, 439, 489, 438, 439, 490, 
	438, 439, 491, 438, 439, 492, 438, 439, 
	493, 438, 439, 494, 438, 439, 495, 438, 
	439, 496, 438, 439, 497, 438, 439, 498, 
	438, 439, 499, 438, 439, 500, 438, 439, 
	501, 438, 439, 502, 438, 439, 503, 438, 
	439, 504, 438, 439, 488, 438, 505, 439, 
	506, 438, 507, 439, 438, 439, 508, 438, 
	509, 439, 438, 510, 439, 438, 439, 511, 
	438, 439, 512, 438, 439, 513, 438, 439, 
	514, 438, 515, 439, 438, 516, 439, 438, 
	517, 439, 438, 488, 439, 438, 439, 518, 
	438, 439, 519, 438, 439, 467, 438, 439, 
	520, 438, 439, 521, 438, 522, 439, 438, 
	523, 439, 438, 439, 524, 438, 439, 525, 
	438, 526, 0, 527, 0, 528, 0, 529, 
	0, 530, 531, 530, 0, 534, 533, 535, 
	536, 533, 532, 0, 538, 539, 537, 0, 
	538, 537, 534, 540, 538, 539, 540, 537, 
	534, 541, 542, 543, 544, 545, 546, 547, 
	545, 548, 549, 550, 551, 552, 553, 554, 
	555, 541, 0, 556, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 4, 4, 5, 15, 17, 31, 
	34, 37, 39, 45, 50, 53, 81, 265, 
	357, 455, 3, 6, 7, 8, 9, 8, 
	8, 9, 8, 10, 10, 10, 11, 10, 
	10, 10, 11, 12, 13, 14, 4, 14, 
	15, 4, 16, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 29, 30, 
	461, 32, 33, 33, 4, 16, 35, 36, 
	4, 35, 34, 36, 38, 31, 40, 41, 
	42, 44, 43, 46, 47, 48, 49, 51, 
	52, 54, 55, 56, 57, 58, 59, 60, 
	61, 62, 63, 64, 65, 64, 65, 65, 
	4, 66, 67, 68, 69, 70, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	4, 4, 5, 15, 17, 31, 34, 37, 
	39, 45, 50, 53, 81, 265, 357, 455, 
	82, 181, 83, 84, 85, 86, 87, 88, 
	89, 90, 91, 92, 93, 92, 93, 93, 
	4, 94, 108, 109, 111, 117, 122, 125, 
	152, 168, 95, 96, 97, 98, 99, 100, 
	101, 102, 103, 104, 105, 106, 107, 4, 
	80, 110, 108, 112, 113, 114, 116, 115, 
	118, 119, 120, 121, 123, 124, 126, 135, 
	127, 128, 129, 130, 131, 132, 133, 134, 
	136, 137, 138, 139, 140, 141, 142, 143, 
	144, 145, 146, 147, 148, 149, 150, 151, 
	153, 165, 154, 155, 156, 157, 158, 159, 
	160, 161, 162, 163, 164, 166, 167, 169, 
	170, 177, 171, 172, 173, 174, 175, 176, 
	178, 179, 180, 117, 182, 183, 184, 185, 
	186, 187, 188, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	200, 201, 201, 4, 202, 216, 217, 219, 
	225, 230, 233, 243, 259, 203, 204, 205, 
	206, 207, 208, 209, 210, 211, 212, 213, 
	214, 215, 4, 80, 218, 216, 220, 221, 
	222, 224, 223, 226, 227, 228, 229, 231, 
	232, 234, 235, 236, 237, 238, 239, 240, 
	241, 242, 244, 256, 245, 246, 247, 248, 
	249, 250, 251, 252, 253, 254, 255, 257, 
	258, 260, 261, 262, 263, 264, 225, 266, 
	354, 267, 268, 269, 270, 271, 272, 273, 
	274, 275, 276, 277, 278, 279, 280, 281, 
	280, 281, 281, 4, 282, 296, 306, 332, 
	345, 283, 284, 285, 286, 287, 288, 289, 
	290, 291, 292, 293, 294, 295, 4, 297, 
	298, 299, 300, 301, 302, 303, 304, 305, 
	80, 307, 315, 308, 309, 310, 311, 312, 
	313, 314, 316, 317, 318, 319, 320, 321, 
	322, 323, 324, 325, 326, 327, 328, 329, 
	330, 331, 333, 334, 335, 336, 337, 338, 
	339, 340, 341, 342, 343, 344, 346, 347, 
	348, 349, 350, 351, 352, 353, 355, 356, 
	358, 359, 451, 360, 361, 362, 363, 364, 
	365, 366, 367, 368, 369, 370, 369, 370, 
	370, 4, 371, 385, 386, 388, 394, 399, 
	402, 429, 445, 372, 373, 374, 375, 376, 
	377, 378, 379, 380, 381, 382, 383, 384, 
	4, 80, 387, 385, 389, 390, 391, 393, 
	392, 395, 396, 397, 398, 400, 401, 403, 
	412, 404, 405, 406, 407, 408, 409, 410, 
	411, 413, 414, 415, 416, 417, 418, 419, 
	420, 421, 422, 423, 424, 425, 426, 427, 
	428, 430, 442, 431, 432, 433, 434, 435, 
	436, 437, 438, 439, 440, 441, 443, 444, 
	446, 447, 448, 449, 450, 394, 452, 453, 
	454, 45, 455, 456, 457, 459, 460, 458, 
	456, 457, 458, 456, 459, 460, 5, 15, 
	17, 31, 34, 37, 39, 45, 50, 53, 
	81, 265, 357, 455, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 0, 0, 54, 3, 1, 0, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 35, 0, 0, 0, 7, 135, 48, 
	0, 102, 9, 5, 45, 130, 45, 0, 
	33, 122, 33, 33, 0, 11, 106, 0, 
	0, 114, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	81, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 21, 
	31, 126, 60, 57, 31, 63, 57, 63, 
	63, 63, 63, 63, 63, 63, 63, 66, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 0, 
	75, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 0, 78, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 0, 69, 33, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 72, 33, 84, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 15, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 0, 93, 90, 
	41, 96, 90, 96, 96, 96, 96, 96, 
	96, 96, 96, 99, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 461;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 867 "lib/gherkin/rb_lexer/pl.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
        
# line 876 "lib/gherkin/rb_lexer/pl.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1120 "lib/gherkin/rb_lexer/pl.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1159 "lib/gherkin/rb_lexer/pl.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pl.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
