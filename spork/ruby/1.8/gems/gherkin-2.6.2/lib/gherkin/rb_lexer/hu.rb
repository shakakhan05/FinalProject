
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Hu #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/hu.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 19, 20, 21, 22, 23, 25, 
	43, 44, 45, 47, 49, 54, 59, 64, 
	69, 73, 77, 79, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 91, 
	92, 93, 94, 99, 106, 111, 114, 115, 
	116, 117, 118, 119, 120, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 131, 132, 
	133, 134, 135, 136, 137, 138, 139, 140, 
	141, 142, 143, 145, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 155, 170, 172, 
	174, 176, 194, 196, 197, 198, 199, 200, 
	201, 202, 203, 204, 205, 220, 222, 224, 
	226, 228, 230, 232, 234, 236, 238, 240, 
	242, 244, 246, 248, 250, 252, 254, 258, 
	260, 262, 264, 266, 268, 270, 273, 275, 
	277, 279, 281, 283, 285, 287, 289, 291, 
	293, 295, 297, 299, 301, 303, 305, 307, 
	309, 311, 313, 315, 318, 320, 322, 324, 
	326, 328, 330, 332, 334, 336, 338, 340, 
	342, 344, 346, 348, 350, 352, 354, 356, 
	358, 359, 360, 361, 362, 363, 364, 365, 
	366, 367, 368, 369, 380, 382, 384, 386, 
	388, 390, 392, 394, 396, 398, 400, 402, 
	404, 406, 408, 410, 412, 414, 416, 418, 
	420, 422, 424, 426, 428, 430, 432, 434, 
	437, 439, 441, 443, 445, 447, 449, 451, 
	453, 455, 457, 459, 461, 463, 465, 467, 
	469, 471, 473, 475, 477, 479, 481, 483, 
	485, 487, 489, 491, 493, 495, 497, 498, 
	499, 500, 501, 502, 503, 504, 505, 506, 
	507, 508, 509, 510, 517, 519, 521, 523, 
	525, 527, 529, 531, 533, 535, 539, 545, 
	548, 550, 556, 574, 576, 578, 580, 582, 
	584, 586, 588, 590, 592, 594, 596, 598, 
	600, 602, 606, 608, 610, 612, 614, 616, 
	618, 621, 623, 625, 627, 629, 631, 633, 
	635, 637, 639, 641, 643, 645, 647, 649, 
	651, 653, 655, 657, 659, 661, 663, 665, 
	667, 669, 671, 673, 675, 677, 679, 681, 
	683, 685, 687, 689, 690, 691, 706, 708, 
	710, 712, 714, 716, 718, 720, 722, 724, 
	726, 728, 730, 732, 734, 736, 738, 740, 
	744, 746, 748, 750, 752, 754, 756, 759, 
	761, 763, 765, 767, 769, 771, 773, 775, 
	777, 779, 781, 783, 785, 787, 789, 791, 
	793, 795, 797, 799, 801, 804, 806, 808, 
	810, 812, 814, 816, 818, 820, 823, 825, 
	827, 829, 831, 833, 835, 837, 839, 841, 
	843, 845, 847, 849, 851, 853, 855, 857, 
	858, 859
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-61, -17, 10, 32, 34, 35, 37, 42, 
	64, 65, 68, 70, 72, 74, 77, 80, 
	124, 9, 13, -119, 115, 32, 10, 10, 
	13, -61, 10, 32, 34, 35, 37, 42, 
	64, 65, 68, 70, 72, 74, 77, 80, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 100, 
	107, 109, 111, 116, 116, 107, 111, 114, 
	101, 105, 110, 110, 121, 105, 98, 101, 
	110, 101, 111, 114, 103, 97, 116, -61, 
	-77, 107, -61, -74, 110, 121, 118, 32, 
	58, 118, -61, -95, 122, 108, 97, 116, 
	58, 10, 10, -61, 10, 32, 35, 37, 
	42, 64, 65, 68, 70, 72, 74, 77, 
	9, 13, -119, 10, 10, 115, 10, 32, 
	-61, 10, 32, 34, 35, 37, 42, 64, 
	65, 68, 70, 72, 74, 77, 80, 124, 
	9, 13, -61, 97, -95, 116, 116, -61, 
	-87, 114, 58, 10, 10, -61, 10, 32, 
	35, 37, 42, 64, 65, 68, 70, 72, 
	74, 77, 9, 13, -119, 10, 10, 115, 
	10, 32, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 100, 
	107, 109, 10, 111, 10, 116, 10, 116, 
	10, 107, 10, 111, 10, 114, 10, 101, 
	105, 10, 110, 10, 110, 10, 121, 10, 
	105, 10, 98, 10, 101, 10, 110, 10, 
	101, 10, 111, 10, 114, 10, 103, 10, 
	97, 10, 116, -61, 10, -77, 10, 10, 
	107, -61, 10, -74, 10, 10, 110, 10, 
	121, 10, 118, 10, 32, 58, 10, 118, 
	-61, 10, -95, 10, 10, 122, 10, 108, 
	10, 97, 10, 116, 10, 58, 10, 97, 
	10, 101, 10, 108, 10, 108, 10, 101, 
	10, 109, 10, 122, -59, 10, -111, 10, 
	10, 97, 10, 106, 10, 100, 101, 108, 
	108, 101, 109, 122, -59, -111, 58, 10, 
	10, 10, 32, 35, 37, 64, 70, 72, 
	74, 80, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 111, 10, 114, 10, 103, 10, 97, 
	10, 116, -61, 10, -77, 10, 10, 107, 
	-61, 10, -74, 10, 10, 110, 10, 121, 
	10, 118, 10, 32, 58, 10, 118, -61, 
	10, -95, 10, 10, 122, 10, 108, 10, 
	97, 10, 116, 10, 58, -61, 10, -95, 
	10, 10, 116, 10, 116, -61, 10, -87, 
	10, 10, 114, 10, 101, 10, 108, 10, 
	108, 10, 101, 10, 109, 10, 122, -59, 
	10, -111, 10, -61, 10, -87, 10, 10, 
	108, 10, 100, -61, 10, -95, 10, 10, 
	107, 97, 106, 100, -61, -87, 108, 100, 
	-61, -95, 107, 58, 10, 10, 10, 32, 
	35, 74, 124, 9, 13, 10, 101, 10, 
	108, 10, 108, 10, 101, 10, 109, 10, 
	122, -59, 10, -111, 10, 10, 58, 32, 
	124, 9, 13, 10, 32, 92, 124, 9, 
	13, 10, 92, 124, 10, 92, 10, 32, 
	92, 124, 9, 13, -61, 10, 32, 34, 
	35, 37, 42, 64, 65, 68, 70, 72, 
	74, 77, 80, 124, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 100, 107, 109, 10, 111, 
	10, 116, 10, 116, 10, 107, 10, 111, 
	10, 114, 10, 101, 105, 10, 110, 10, 
	110, 10, 121, 10, 105, 10, 98, 10, 
	101, 10, 110, 10, 101, 10, 111, 10, 
	114, 10, 103, 10, 97, 10, 116, -61, 
	10, -77, 10, 10, 107, -61, 10, -74, 
	10, 10, 110, 10, 121, 10, 118, 10, 
	58, 10, 97, 10, 101, 10, 108, 10, 
	108, 10, 101, 10, 109, 10, 122, -59, 
	10, -111, 10, 10, 97, 10, 106, 10, 
	100, 10, 10, -61, 10, 32, 35, 37, 
	42, 64, 65, 68, 70, 72, 74, 77, 
	9, 13, -119, 10, 10, 115, 10, 32, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 100, 107, 109, 
	10, 111, 10, 116, 10, 116, 10, 107, 
	10, 111, 10, 114, 10, 101, 105, 10, 
	110, 10, 110, 10, 121, 10, 105, 10, 
	98, 10, 101, 10, 110, 10, 101, 10, 
	111, 10, 114, 10, 103, 10, 97, 10, 
	116, -61, 10, -77, 10, 10, 107, -61, 
	10, -74, 10, 10, 110, 10, 121, 10, 
	118, 10, 32, 58, 10, 118, -61, 10, 
	-95, 10, 10, 122, 10, 108, 10, 97, 
	10, 116, 10, 58, -61, 10, 97, -95, 
	10, 10, 116, 10, 116, -61, 10, -87, 
	10, 10, 114, 10, 101, 10, 108, 10, 
	108, 10, 101, 10, 109, 10, 122, -59, 
	10, -111, 10, 10, 97, 10, 106, 10, 
	100, -69, -65, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 17, 1, 1, 1, 1, 2, 16, 
	1, 1, 2, 2, 3, 3, 3, 3, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 5, 3, 3, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 13, 2, 2, 
	2, 16, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 13, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 9, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 3, 
	2, 4, 16, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 13, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 19, 21, 23, 25, 27, 30, 
	48, 50, 52, 55, 58, 63, 68, 73, 
	78, 82, 86, 89, 91, 93, 95, 97, 
	99, 101, 103, 105, 107, 109, 111, 113, 
	115, 117, 119, 124, 131, 136, 140, 142, 
	144, 146, 148, 150, 152, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 175, 
	177, 179, 181, 183, 185, 187, 189, 191, 
	193, 195, 197, 200, 202, 204, 206, 208, 
	210, 212, 214, 216, 218, 220, 235, 238, 
	241, 244, 262, 265, 267, 269, 271, 273, 
	275, 277, 279, 281, 283, 298, 301, 304, 
	307, 310, 313, 316, 319, 322, 325, 328, 
	331, 334, 337, 340, 343, 346, 349, 354, 
	357, 360, 363, 366, 369, 372, 376, 379, 
	382, 385, 388, 391, 394, 397, 400, 403, 
	406, 409, 412, 415, 418, 421, 424, 427, 
	430, 433, 436, 439, 443, 446, 449, 452, 
	455, 458, 461, 464, 467, 470, 473, 476, 
	479, 482, 485, 488, 491, 494, 497, 500, 
	503, 505, 507, 509, 511, 513, 515, 517, 
	519, 521, 523, 525, 536, 539, 542, 545, 
	548, 551, 554, 557, 560, 563, 566, 569, 
	572, 575, 578, 581, 584, 587, 590, 593, 
	596, 599, 602, 605, 608, 611, 614, 617, 
	621, 624, 627, 630, 633, 636, 639, 642, 
	645, 648, 651, 654, 657, 660, 663, 666, 
	669, 672, 675, 678, 681, 684, 687, 690, 
	693, 696, 699, 702, 705, 708, 711, 713, 
	715, 717, 719, 721, 723, 725, 727, 729, 
	731, 733, 735, 737, 744, 747, 750, 753, 
	756, 759, 762, 765, 768, 771, 775, 781, 
	785, 788, 794, 812, 815, 818, 821, 824, 
	827, 830, 833, 836, 839, 842, 845, 848, 
	851, 854, 859, 862, 865, 868, 871, 874, 
	877, 881, 884, 887, 890, 893, 896, 899, 
	902, 905, 908, 911, 914, 917, 920, 923, 
	926, 929, 932, 935, 938, 941, 944, 947, 
	950, 953, 956, 959, 962, 965, 968, 971, 
	974, 977, 980, 983, 985, 987, 1002, 1005, 
	1008, 1011, 1014, 1017, 1020, 1023, 1026, 1029, 
	1032, 1035, 1038, 1041, 1044, 1047, 1050, 1053, 
	1058, 1061, 1064, 1067, 1070, 1073, 1076, 1080, 
	1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 
	1107, 1110, 1113, 1116, 1119, 1122, 1125, 1128, 
	1131, 1134, 1137, 1140, 1143, 1147, 1150, 1153, 
	1156, 1159, 1162, 1165, 1168, 1171, 1175, 1178, 
	1181, 1184, 1187, 1190, 1193, 1196, 1199, 1202, 
	1205, 1208, 1211, 1214, 1217, 1220, 1223, 1226, 
	1228, 1230
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 2, 4, 3, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 3, 0, 18, 0, 19, 0, 20, 
	0, 0, 21, 23, 24, 22, 1, 4, 
	3, 5, 6, 7, 8, 9, 10, 11, 
	12, 13, 14, 15, 16, 17, 3, 0, 
	25, 0, 26, 0, 28, 29, 27, 31, 
	32, 30, 35, 34, 36, 34, 33, 39, 
	38, 40, 38, 37, 39, 38, 41, 38, 
	37, 39, 38, 42, 38, 37, 44, 43, 
	43, 0, 4, 45, 45, 0, 47, 48, 
	46, 4, 0, 49, 0, 50, 0, 51, 
	0, 52, 0, 53, 0, 54, 0, 55, 
	0, 56, 0, 57, 0, 58, 0, 59, 
	0, 60, 0, 61, 0, 62, 0, 0, 
	0, 0, 0, 63, 64, 65, 64, 64, 
	67, 66, 63, 4, 68, 9, 68, 0, 
	69, 70, 71, 0, 72, 0, 73, 0, 
	19, 0, 74, 0, 75, 0, 19, 0, 
	76, 70, 0, 77, 0, 78, 0, 79, 
	0, 80, 0, 81, 0, 82, 0, 19, 
	0, 19, 0, 83, 0, 84, 0, 85, 
	0, 86, 0, 87, 0, 88, 0, 89, 
	0, 90, 0, 91, 0, 92, 0, 93, 
	0, 94, 0, 95, 0, 96, 97, 0, 
	98, 0, 99, 0, 100, 0, 101, 0, 
	102, 0, 103, 0, 104, 0, 105, 0, 
	107, 106, 109, 108, 110, 109, 111, 112, 
	113, 114, 112, 115, 116, 117, 118, 119, 
	120, 111, 108, 121, 109, 108, 109, 122, 
	108, 109, 123, 108, 124, 126, 125, 127, 
	128, 129, 130, 131, 132, 133, 134, 135, 
	136, 137, 138, 139, 125, 0, 140, 19, 
	0, 141, 0, 142, 0, 143, 0, 144, 
	0, 145, 0, 146, 0, 147, 0, 149, 
	148, 151, 150, 152, 151, 153, 154, 155, 
	156, 154, 157, 158, 159, 160, 161, 162, 
	153, 150, 163, 151, 150, 151, 164, 150, 
	151, 165, 150, 151, 166, 150, 151, 167, 
	150, 151, 168, 150, 151, 169, 150, 151, 
	170, 150, 151, 171, 150, 151, 172, 150, 
	151, 173, 150, 151, 174, 150, 151, 175, 
	150, 151, 176, 150, 151, 177, 150, 151, 
	178, 150, 151, 179, 150, 151, 180, 181, 
	182, 150, 151, 183, 150, 151, 184, 150, 
	151, 164, 150, 151, 185, 150, 151, 186, 
	150, 151, 164, 150, 151, 187, 181, 150, 
	151, 188, 150, 151, 189, 150, 151, 190, 
	150, 151, 191, 150, 151, 192, 150, 151, 
	193, 150, 151, 164, 150, 151, 164, 150, 
	151, 194, 150, 151, 195, 150, 151, 196, 
	150, 151, 197, 150, 151, 198, 150, 199, 
	151, 150, 200, 151, 150, 151, 201, 150, 
	202, 151, 150, 203, 151, 150, 151, 204, 
	150, 151, 205, 150, 151, 206, 150, 151, 
	207, 165, 150, 151, 208, 150, 209, 151, 
	150, 210, 151, 150, 151, 211, 150, 151, 
	212, 150, 151, 213, 150, 151, 214, 150, 
	151, 165, 150, 151, 164, 150, 151, 215, 
	150, 151, 216, 150, 151, 217, 150, 151, 
	218, 150, 151, 219, 150, 151, 220, 150, 
	221, 151, 150, 214, 151, 150, 151, 222, 
	150, 151, 223, 150, 151, 164, 150, 224, 
	0, 225, 0, 226, 0, 227, 0, 228, 
	0, 229, 0, 230, 0, 231, 0, 232, 
	0, 234, 233, 236, 235, 236, 237, 238, 
	239, 238, 240, 241, 242, 243, 237, 235, 
	236, 244, 235, 236, 245, 235, 236, 246, 
	235, 236, 247, 235, 236, 248, 235, 236, 
	249, 235, 236, 250, 235, 236, 251, 235, 
	236, 252, 235, 236, 253, 235, 236, 254, 
	235, 236, 255, 235, 236, 256, 235, 236, 
	257, 235, 236, 258, 235, 236, 259, 235, 
	236, 260, 235, 236, 261, 235, 236, 262, 
	235, 263, 236, 235, 264, 236, 235, 236, 
	265, 235, 266, 236, 235, 267, 236, 235, 
	236, 268, 235, 236, 269, 235, 236, 270, 
	235, 236, 271, 272, 235, 236, 273, 235, 
	274, 236, 235, 275, 236, 235, 236, 276, 
	235, 236, 277, 235, 236, 278, 235, 236, 
	279, 235, 236, 272, 235, 280, 236, 235, 
	281, 236, 235, 236, 282, 235, 236, 283, 
	235, 284, 236, 235, 285, 236, 235, 236, 
	279, 235, 236, 286, 235, 236, 287, 235, 
	236, 288, 235, 236, 289, 235, 236, 290, 
	235, 236, 291, 235, 292, 236, 235, 279, 
	236, 235, 293, 236, 235, 294, 236, 235, 
	236, 295, 235, 236, 296, 235, 297, 236, 
	235, 298, 236, 235, 236, 279, 235, 299, 
	0, 300, 0, 19, 0, 301, 0, 302, 
	0, 303, 0, 304, 0, 305, 0, 306, 
	0, 307, 0, 308, 0, 310, 309, 312, 
	311, 312, 313, 314, 315, 314, 313, 311, 
	312, 316, 311, 312, 317, 311, 312, 318, 
	311, 312, 319, 311, 312, 320, 311, 312, 
	321, 311, 322, 312, 311, 323, 312, 311, 
	312, 324, 311, 325, 326, 325, 0, 329, 
	328, 330, 331, 328, 327, 0, 333, 334, 
	332, 0, 333, 332, 329, 335, 333, 334, 
	335, 332, 336, 329, 337, 338, 339, 340, 
	341, 342, 343, 344, 345, 346, 347, 348, 
	349, 350, 337, 0, 109, 351, 108, 109, 
	352, 108, 109, 353, 108, 109, 354, 108, 
	109, 355, 108, 109, 356, 108, 109, 357, 
	108, 109, 358, 108, 109, 359, 108, 109, 
	360, 108, 109, 361, 108, 109, 362, 108, 
	109, 363, 108, 109, 364, 108, 109, 365, 
	366, 367, 108, 109, 368, 108, 109, 369, 
	108, 109, 122, 108, 109, 370, 108, 109, 
	371, 108, 109, 122, 108, 109, 372, 366, 
	108, 109, 373, 108, 109, 374, 108, 109, 
	375, 108, 109, 376, 108, 109, 377, 108, 
	109, 378, 108, 109, 122, 108, 109, 122, 
	108, 109, 379, 108, 109, 380, 108, 109, 
	381, 108, 109, 382, 108, 109, 383, 108, 
	384, 109, 108, 385, 109, 108, 109, 386, 
	108, 387, 109, 108, 388, 109, 108, 109, 
	389, 108, 109, 390, 108, 109, 391, 108, 
	109, 123, 108, 109, 122, 108, 109, 392, 
	108, 109, 393, 108, 109, 394, 108, 109, 
	395, 108, 109, 396, 108, 109, 397, 108, 
	398, 109, 108, 391, 109, 108, 109, 399, 
	108, 109, 400, 108, 109, 122, 108, 402, 
	401, 404, 403, 405, 404, 406, 407, 408, 
	409, 407, 410, 411, 412, 413, 414, 415, 
	406, 403, 416, 404, 403, 404, 417, 403, 
	404, 418, 403, 404, 419, 403, 404, 420, 
	403, 404, 421, 403, 404, 422, 403, 404, 
	423, 403, 404, 424, 403, 404, 425, 403, 
	404, 426, 403, 404, 427, 403, 404, 428, 
	403, 404, 429, 403, 404, 430, 403, 404, 
	431, 403, 404, 432, 403, 404, 433, 434, 
	435, 403, 404, 436, 403, 404, 437, 403, 
	404, 417, 403, 404, 438, 403, 404, 439, 
	403, 404, 417, 403, 404, 440, 434, 403, 
	404, 441, 403, 404, 442, 403, 404, 443, 
	403, 404, 444, 403, 404, 445, 403, 404, 
	446, 403, 404, 417, 403, 404, 417, 403, 
	404, 447, 403, 404, 448, 403, 404, 449, 
	403, 404, 450, 403, 404, 451, 403, 452, 
	404, 403, 453, 404, 403, 404, 454, 403, 
	455, 404, 403, 456, 404, 403, 404, 457, 
	403, 404, 458, 403, 404, 459, 403, 404, 
	460, 418, 403, 404, 461, 403, 462, 404, 
	403, 463, 404, 403, 404, 464, 403, 404, 
	465, 403, 404, 466, 403, 404, 467, 403, 
	404, 418, 403, 468, 404, 417, 403, 469, 
	404, 403, 404, 470, 403, 404, 471, 403, 
	472, 404, 403, 473, 404, 403, 404, 467, 
	403, 404, 474, 403, 404, 475, 403, 404, 
	476, 403, 404, 477, 403, 404, 478, 403, 
	404, 479, 403, 480, 404, 403, 467, 404, 
	403, 404, 481, 403, 404, 482, 403, 404, 
	417, 403, 483, 0, 3, 0, 484, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 391, 7, 7, 8, 18, 20, 
	4, 34, 37, 52, 53, 82, 160, 230, 
	233, 253, 3, 4, 5, 6, 6, 7, 
	19, 9, 10, 11, 12, 11, 11, 12, 
	11, 13, 13, 13, 14, 13, 13, 13, 
	14, 15, 16, 17, 7, 17, 18, 7, 
	19, 21, 22, 23, 24, 25, 26, 27, 
	28, 29, 30, 31, 32, 33, 393, 35, 
	36, 7, 35, 34, 36, 38, 41, 44, 
	39, 40, 42, 43, 45, 46, 47, 48, 
	49, 50, 51, 54, 55, 56, 57, 58, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	67, 315, 68, 69, 70, 71, 72, 73, 
	74, 75, 76, 77, 76, 77, 78, 77, 
	7, 259, 80, 273, 288, 289, 303, 304, 
	312, 79, 80, 81, 2, 7, 7, 8, 
	18, 20, 4, 34, 37, 52, 53, 82, 
	160, 230, 233, 253, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 92, 91, 92, 
	93, 92, 7, 96, 95, 110, 125, 126, 
	148, 149, 157, 94, 95, 81, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 106, 
	107, 108, 109, 7, 111, 114, 117, 112, 
	113, 115, 116, 118, 119, 120, 121, 122, 
	123, 124, 127, 128, 129, 130, 131, 132, 
	133, 134, 135, 136, 137, 138, 139, 140, 
	141, 142, 143, 144, 145, 146, 147, 150, 
	151, 152, 153, 154, 155, 156, 158, 159, 
	161, 162, 163, 164, 165, 166, 167, 168, 
	169, 170, 171, 170, 171, 171, 7, 172, 
	186, 208, 215, 223, 173, 174, 175, 176, 
	177, 178, 179, 180, 181, 182, 183, 184, 
	185, 7, 187, 188, 189, 190, 191, 192, 
	193, 194, 195, 196, 197, 198, 199, 200, 
	81, 201, 202, 203, 204, 205, 206, 207, 
	209, 210, 211, 212, 213, 214, 216, 217, 
	218, 219, 220, 221, 222, 224, 225, 226, 
	227, 228, 229, 231, 232, 234, 235, 236, 
	237, 238, 239, 240, 241, 242, 243, 242, 
	243, 243, 7, 244, 245, 246, 247, 248, 
	249, 250, 251, 252, 81, 253, 254, 255, 
	257, 258, 256, 254, 255, 256, 254, 257, 
	2, 258, 8, 18, 20, 4, 34, 37, 
	52, 53, 82, 160, 230, 233, 253, 260, 
	261, 262, 263, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 7, 274, 277, 280, 
	275, 276, 278, 279, 281, 282, 283, 284, 
	285, 286, 287, 290, 291, 292, 293, 294, 
	295, 296, 297, 298, 299, 300, 301, 302, 
	305, 306, 307, 308, 309, 310, 311, 313, 
	314, 316, 317, 316, 317, 318, 317, 7, 
	321, 320, 335, 350, 351, 373, 380, 388, 
	319, 320, 81, 322, 323, 324, 325, 326, 
	327, 328, 329, 330, 331, 332, 333, 334, 
	7, 336, 339, 342, 337, 338, 340, 341, 
	343, 344, 345, 346, 347, 348, 349, 352, 
	353, 354, 355, 356, 357, 358, 359, 360, 
	361, 362, 363, 364, 365, 366, 367, 368, 
	369, 370, 371, 372, 374, 375, 376, 377, 
	378, 379, 381, 382, 383, 384, 385, 386, 
	387, 389, 390, 392, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 29, 0, 0, 54, 3, 1, 0, 
	29, 1, 29, 29, 29, 29, 29, 29, 
	29, 35, 0, 0, 0, 57, 0, 110, 
	23, 0, 0, 7, 135, 48, 0, 102, 
	9, 5, 45, 130, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 84, 0, 
	78, 33, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 19, 63, 31, 126, 60, 
	57, 31, 63, 57, 63, 63, 63, 63, 
	63, 63, 63, 66, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	84, 0, 72, 33, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 69, 33, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 81, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	96, 0, 93, 90, 41, 96, 90, 96, 
	96, 96, 96, 96, 96, 96, 99, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 84, 0, 75, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 17, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 393;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 770 "lib/gherkin/rb_lexer/hu.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
        
# line 779 "lib/gherkin/rb_lexer/hu.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1023 "lib/gherkin/rb_lexer/hu.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1062 "lib/gherkin/rb_lexer/hu.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/hu.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
