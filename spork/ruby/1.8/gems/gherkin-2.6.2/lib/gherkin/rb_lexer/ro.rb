
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Ro #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/ro.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 19, 20, 21, 22, 23, 25, 
	43, 44, 45, 46, 48, 50, 55, 60, 
	65, 70, 74, 78, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 91, 
	92, 93, 94, 95, 100, 107, 112, 113, 
	114, 115, 116, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 145, 
	147, 149, 151, 169, 170, 174, 175, 176, 
	177, 178, 179, 180, 181, 184, 185, 186, 
	187, 188, 189, 190, 191, 192, 193, 200, 
	202, 204, 206, 210, 212, 214, 216, 218, 
	220, 222, 224, 226, 228, 230, 232, 234, 
	236, 237, 238, 239, 242, 243, 244, 245, 
	246, 247, 248, 249, 250, 251, 252, 253, 
	254, 255, 256, 267, 269, 271, 273, 275, 
	277, 279, 281, 283, 285, 287, 289, 291, 
	293, 295, 297, 299, 301, 303, 305, 307, 
	309, 311, 313, 315, 317, 319, 321, 323, 
	325, 327, 331, 333, 335, 337, 339, 341, 
	343, 345, 347, 349, 351, 353, 356, 358, 
	360, 362, 364, 366, 368, 370, 372, 374, 
	376, 378, 380, 383, 385, 387, 389, 391, 
	392, 395, 396, 397, 398, 399, 400, 401, 
	402, 403, 404, 419, 421, 423, 425, 427, 
	429, 431, 433, 435, 437, 439, 441, 443, 
	445, 447, 449, 451, 453, 455, 457, 459, 
	461, 463, 467, 469, 471, 473, 475, 477, 
	479, 481, 483, 485, 487, 492, 494, 496, 
	498, 500, 502, 504, 506, 510, 512, 514, 
	516, 520, 522, 524, 526, 528, 530, 532, 
	534, 536, 538, 540, 542, 544, 548, 550, 
	552, 554, 556, 558, 560, 562, 564, 566, 
	568, 570, 572, 575, 577, 579, 581, 583, 
	584, 585, 586, 587, 588, 589, 591, 592, 
	593, 594, 595, 596, 597, 598, 599, 600, 
	601, 602, 603, 604, 619, 621, 623, 625, 
	627, 629, 631, 633, 635, 637, 639, 641, 
	643, 645, 647, 649, 651, 653, 655, 657, 
	659, 661, 663, 666, 668, 670, 672, 674, 
	679, 681, 683, 685, 687, 689, 691, 693, 
	697, 699, 701, 703, 707, 709, 711, 713, 
	715, 717, 719, 721, 723, 725, 727, 729, 
	731, 733, 736, 738, 740, 742, 744, 746, 
	748, 752, 758, 761, 763, 769, 787, 789, 
	791, 793, 795, 797, 799, 801, 803, 805, 
	807, 809, 811, 813, 815, 817, 819, 821, 
	823, 825, 828, 830, 832, 834, 836, 841, 
	843, 845, 847, 849, 851, 853, 855, 859, 
	861, 863, 865, 869, 871, 873, 875, 877, 
	879, 881, 883, 885, 887, 889, 891, 893, 
	895, 899, 901, 903, 905, 907, 909, 911, 
	913, 915, 917, 919, 921, 923, 926, 928, 
	930, 932, 934, 935, 936
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-59, -56, -17, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 68, 69, 70, 83, 
	124, 9, 13, -98, 105, 32, 10, 10, 
	13, -59, -56, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 68, 69, 70, 83, 
	124, 9, 13, -104, 34, 34, 10, 13, 
	10, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	9, 13, 10, 32, 9, 13, 10, 13, 
	10, 95, 70, 69, 65, 84, 85, 82, 
	69, 95, 69, 78, 68, 95, 37, 13, 
	32, 64, 9, 10, 9, 10, 13, 32, 
	64, 11, 12, 10, 32, 64, 9, 13, 
	116, 117, 110, 99, -61, 97, 111, -94, 
	110, 100, 110, 116, 101, 120, 116, 58, 
	10, 10, -59, -56, 10, 32, 35, 37, 
	42, 64, 65, 67, 68, 70, 83, 9, 
	13, -98, 10, 10, 105, 10, 32, -59, 
	-56, 10, 32, 34, 35, 37, 42, 64, 
	65, 67, 68, 69, 70, 83, 124, 9, 
	13, 97, -59, -56, 114, 116, -93, 105, 
	32, 102, 105, 105, -101, 32, 101, 105, 
	120, 101, 109, 112, 108, 101, 58, 10, 
	10, 10, 32, 35, 70, 124, 9, 13, 
	10, 117, 10, 110, 10, 99, -59, -56, 
	10, 116, -93, 10, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 116, 10, 97, 10, 116, 10, 101, 
	10, 58, -101, 10, 117, 110, 99, -59, 
	-56, 116, -93, 105, 111, 110, 97, 108, 
	105, 116, 97, 116, 101, 58, 10, 10, 
	10, 32, 35, 37, 64, 67, 69, 70, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	111, 10, 110, 10, 116, 10, 101, 10, 
	120, 10, 116, 10, 58, 10, 120, 10, 
	101, 10, 109, 10, 112, 10, 108, 10, 
	101, 10, 117, 10, 110, 10, 99, -59, 
	-56, 10, 116, -93, 10, 10, 105, 10, 
	111, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, 10, 97, 10, 116, -101, 
	10, 10, 99, 116, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 114, 10, 117, 10, 99, 10, 116, 
	10, 117, 10, 114, -60, 10, 97, -125, 
	10, 10, 32, 10, 115, 10, 99, -101, 
	99, 105, 116, 101, 110, 97, 114, 105, 
	117, 58, 10, 10, -59, -56, 10, 32, 
	35, 37, 42, 64, 65, 67, 68, 70, 
	83, 9, 13, -98, 10, 10, 105, 10, 
	32, -104, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	116, 10, 117, 10, 110, 10, 99, -61, 
	10, 97, 111, -94, 10, 10, 110, 10, 
	100, 10, 110, 10, 116, 10, 101, 10, 
	120, 10, 116, 10, 58, 10, 97, -59, 
	-56, 10, 114, 116, -93, 10, 10, 105, 
	10, 32, 10, 102, 10, 105, 10, 105, 
	-101, 10, 10, 32, 101, 105, 10, 117, 
	10, 110, 10, 99, -59, -56, 10, 116, 
	-93, 10, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	10, 97, 10, 116, 10, 101, -101, 10, 
	10, 99, 105, 116, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 114, 10, 117, 10, 99, 10, 116, 
	10, 117, 10, 114, -60, 10, 97, -125, 
	10, 10, 32, 10, 115, 10, 99, 114, 
	117, 99, 116, 117, 114, -60, 97, -125, 
	32, 115, 99, 101, 110, 97, 114, 105, 
	117, 58, 10, 10, -59, -56, 10, 32, 
	35, 37, 42, 64, 65, 67, 68, 70, 
	83, 9, 13, -98, 10, 10, 105, 10, 
	32, -104, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	116, 10, 117, 10, 110, 10, 99, -61, 
	10, 97, -94, 10, 10, 110, 10, 100, 
	10, 97, -59, -56, 10, 114, 116, -93, 
	10, 10, 105, 10, 32, 10, 102, 10, 
	105, 10, 105, -101, 10, 10, 32, 101, 
	105, 10, 117, 10, 110, 10, 99, -59, 
	-56, 10, 116, -93, 10, 10, 105, 10, 
	111, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, 10, 97, 10, 116, 10, 
	101, 10, 58, -101, 10, 10, 99, 105, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 117, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, -59, -56, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 68, 69, 70, 83, 
	124, 9, 13, -104, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 116, 10, 117, 10, 110, 10, 
	99, -61, 10, 97, -94, 10, 10, 110, 
	10, 100, 10, 97, -59, -56, 10, 114, 
	116, -93, 10, 10, 105, 10, 32, 10, 
	102, 10, 105, 10, 105, -101, 10, 10, 
	32, 101, 105, 10, 117, 10, 110, 10, 
	99, -59, -56, 10, 116, -93, 10, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, 10, 97, 10, 
	116, 10, 101, 10, 58, -101, 10, 10, 
	99, 105, 116, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 117, 10, 
	114, 10, 117, 10, 99, 10, 116, 10, 
	117, 10, 114, -60, 10, 97, -125, 10, 
	10, 32, 10, 115, 10, 99, -69, -65, 
	0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 17, 1, 1, 1, 1, 2, 16, 
	1, 1, 1, 2, 2, 3, 3, 3, 
	3, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 5, 3, 1, 1, 
	1, 1, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 13, 2, 
	2, 2, 16, 1, 4, 1, 1, 1, 
	1, 1, 1, 1, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 9, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 1, 
	3, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 13, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 5, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 5, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 4, 3, 2, 4, 16, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 5, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 1, 1, 0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 19, 21, 23, 25, 27, 30, 
	48, 50, 52, 54, 57, 60, 65, 70, 
	75, 80, 84, 88, 91, 93, 95, 97, 
	99, 101, 103, 105, 107, 109, 111, 113, 
	115, 117, 119, 121, 126, 133, 138, 140, 
	142, 144, 146, 150, 152, 154, 156, 158, 
	160, 162, 164, 166, 168, 170, 172, 187, 
	190, 193, 196, 214, 216, 221, 223, 225, 
	227, 229, 231, 233, 235, 239, 241, 243, 
	245, 247, 249, 251, 253, 255, 257, 264, 
	267, 270, 273, 278, 281, 284, 287, 290, 
	293, 296, 299, 302, 305, 308, 311, 314, 
	317, 319, 321, 323, 327, 329, 331, 333, 
	335, 337, 339, 341, 343, 345, 347, 349, 
	351, 353, 355, 366, 369, 372, 375, 378, 
	381, 384, 387, 390, 393, 396, 399, 402, 
	405, 408, 411, 414, 417, 420, 423, 426, 
	429, 432, 435, 438, 441, 444, 447, 450, 
	453, 456, 461, 464, 467, 470, 473, 476, 
	479, 482, 485, 488, 491, 494, 498, 501, 
	504, 507, 510, 513, 516, 519, 522, 525, 
	528, 531, 534, 538, 541, 544, 547, 550, 
	552, 556, 558, 560, 562, 564, 566, 568, 
	570, 572, 574, 589, 592, 595, 598, 601, 
	604, 607, 610, 613, 616, 619, 622, 625, 
	628, 631, 634, 637, 640, 643, 646, 649, 
	652, 655, 660, 663, 666, 669, 672, 675, 
	678, 681, 684, 687, 690, 696, 699, 702, 
	705, 708, 711, 714, 717, 722, 725, 728, 
	731, 736, 739, 742, 745, 748, 751, 754, 
	757, 760, 763, 766, 769, 772, 777, 780, 
	783, 786, 789, 792, 795, 798, 801, 804, 
	807, 810, 813, 817, 820, 823, 826, 829, 
	831, 833, 835, 837, 839, 841, 844, 846, 
	848, 850, 852, 854, 856, 858, 860, 862, 
	864, 866, 868, 870, 885, 888, 891, 894, 
	897, 900, 903, 906, 909, 912, 915, 918, 
	921, 924, 927, 930, 933, 936, 939, 942, 
	945, 948, 951, 955, 958, 961, 964, 967, 
	973, 976, 979, 982, 985, 988, 991, 994, 
	999, 1002, 1005, 1008, 1013, 1016, 1019, 1022, 
	1025, 1028, 1031, 1034, 1037, 1040, 1043, 1046, 
	1049, 1052, 1056, 1059, 1062, 1065, 1068, 1071, 
	1074, 1078, 1084, 1088, 1091, 1097, 1115, 1118, 
	1121, 1124, 1127, 1130, 1133, 1136, 1139, 1142, 
	1145, 1148, 1151, 1154, 1157, 1160, 1163, 1166, 
	1169, 1172, 1176, 1179, 1182, 1185, 1188, 1194, 
	1197, 1200, 1203, 1206, 1209, 1212, 1215, 1220, 
	1223, 1226, 1229, 1234, 1237, 1240, 1243, 1246, 
	1249, 1252, 1255, 1258, 1261, 1264, 1267, 1270, 
	1273, 1278, 1281, 1284, 1287, 1290, 1293, 1296, 
	1299, 1302, 1305, 1308, 1311, 1314, 1318, 1321, 
	1324, 1327, 1330, 1332, 1334
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 2, 3, 5, 4, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 4, 0, 18, 0, 19, 0, 20, 
	0, 0, 21, 23, 24, 22, 1, 2, 
	5, 4, 6, 7, 8, 9, 10, 11, 
	12, 13, 14, 15, 16, 17, 4, 0, 
	18, 0, 25, 0, 26, 0, 28, 29, 
	27, 31, 32, 30, 35, 34, 36, 34, 
	33, 39, 38, 40, 38, 37, 39, 38, 
	41, 38, 37, 39, 38, 42, 38, 37, 
	44, 43, 43, 0, 5, 45, 45, 0, 
	47, 48, 46, 5, 0, 49, 0, 50, 
	0, 51, 0, 52, 0, 53, 0, 54, 
	0, 55, 0, 56, 0, 57, 0, 58, 
	0, 59, 0, 60, 0, 61, 0, 62, 
	0, 0, 0, 0, 0, 63, 64, 65, 
	64, 64, 67, 66, 63, 5, 68, 10, 
	68, 0, 69, 0, 70, 0, 71, 0, 
	18, 0, 72, 73, 74, 0, 73, 0, 
	75, 0, 19, 0, 76, 0, 77, 0, 
	78, 0, 79, 0, 80, 0, 81, 0, 
	83, 82, 85, 84, 86, 87, 85, 88, 
	89, 90, 91, 89, 92, 93, 94, 95, 
	96, 88, 84, 97, 85, 84, 85, 98, 
	84, 85, 99, 84, 100, 101, 103, 102, 
	104, 105, 106, 107, 108, 109, 110, 111, 
	112, 113, 114, 115, 102, 0, 116, 0, 
	117, 118, 19, 119, 0, 120, 0, 121, 
	0, 122, 0, 123, 0, 124, 0, 73, 
	0, 120, 0, 122, 121, 121, 0, 125, 
	0, 126, 0, 127, 0, 128, 0, 129, 
	0, 130, 0, 131, 0, 133, 132, 135, 
	134, 135, 136, 137, 138, 137, 136, 134, 
	135, 139, 134, 135, 140, 134, 135, 141, 
	134, 142, 143, 135, 144, 134, 144, 135, 
	134, 135, 145, 134, 135, 146, 134, 135, 
	147, 134, 135, 148, 134, 135, 149, 134, 
	135, 150, 134, 135, 151, 134, 135, 152, 
	134, 135, 153, 134, 135, 154, 134, 135, 
	155, 134, 144, 135, 134, 156, 0, 157, 
	0, 158, 0, 159, 160, 161, 0, 161, 
	0, 162, 0, 163, 0, 164, 0, 165, 
	0, 166, 0, 167, 0, 168, 0, 169, 
	0, 170, 0, 171, 0, 172, 0, 174, 
	173, 176, 175, 176, 177, 178, 179, 178, 
	180, 181, 182, 183, 177, 175, 176, 184, 
	175, 176, 185, 175, 176, 186, 175, 176, 
	187, 175, 176, 188, 175, 176, 189, 175, 
	176, 190, 175, 176, 191, 175, 176, 192, 
	175, 176, 193, 175, 176, 194, 175, 176, 
	195, 175, 176, 196, 175, 176, 197, 175, 
	176, 198, 175, 176, 199, 175, 176, 200, 
	175, 176, 201, 175, 176, 202, 175, 176, 
	203, 175, 176, 204, 175, 176, 205, 175, 
	176, 206, 175, 176, 207, 175, 176, 208, 
	175, 176, 209, 175, 176, 203, 175, 176, 
	210, 175, 176, 211, 175, 176, 212, 175, 
	213, 214, 176, 215, 175, 215, 176, 175, 
	176, 216, 175, 176, 217, 175, 176, 218, 
	175, 176, 219, 175, 176, 220, 175, 176, 
	221, 175, 176, 222, 175, 176, 223, 175, 
	176, 209, 175, 215, 176, 175, 176, 224, 
	225, 175, 176, 226, 175, 176, 227, 175, 
	176, 228, 175, 176, 229, 175, 176, 230, 
	175, 176, 203, 175, 176, 231, 175, 176, 
	232, 175, 176, 233, 175, 176, 234, 175, 
	176, 235, 175, 176, 236, 175, 237, 176, 
	238, 175, 238, 176, 175, 176, 239, 175, 
	176, 240, 175, 176, 224, 175, 161, 0, 
	241, 19, 242, 0, 243, 0, 244, 0, 
	245, 0, 246, 0, 247, 0, 248, 0, 
	249, 0, 251, 250, 253, 252, 254, 255, 
	253, 256, 257, 258, 259, 257, 260, 261, 
	262, 263, 264, 256, 252, 265, 253, 252, 
	253, 266, 252, 253, 267, 252, 265, 253, 
	252, 253, 268, 252, 253, 269, 252, 253, 
	270, 252, 253, 271, 252, 253, 272, 252, 
	253, 273, 252, 253, 274, 252, 253, 275, 
	252, 253, 276, 252, 253, 277, 252, 253, 
	278, 252, 253, 279, 252, 253, 280, 252, 
	253, 281, 252, 253, 282, 252, 253, 283, 
	252, 253, 284, 252, 253, 265, 252, 285, 
	253, 286, 287, 252, 286, 253, 252, 253, 
	288, 252, 253, 266, 252, 253, 289, 252, 
	253, 290, 252, 253, 291, 252, 253, 292, 
	252, 253, 293, 252, 253, 267, 252, 253, 
	294, 252, 295, 296, 253, 266, 297, 252, 
	298, 253, 252, 253, 299, 252, 253, 300, 
	252, 253, 301, 252, 253, 302, 252, 253, 
	286, 252, 298, 253, 252, 253, 300, 299, 
	299, 252, 253, 303, 252, 253, 304, 252, 
	253, 305, 252, 306, 307, 253, 308, 252, 
	308, 253, 252, 253, 309, 252, 253, 310, 
	252, 253, 311, 252, 253, 312, 252, 253, 
	313, 252, 253, 314, 252, 253, 315, 252, 
	253, 316, 252, 253, 317, 252, 253, 293, 
	252, 308, 253, 252, 253, 318, 266, 319, 
	252, 253, 320, 252, 253, 321, 252, 253, 
	322, 252, 253, 323, 252, 253, 324, 252, 
	253, 293, 252, 253, 325, 252, 253, 326, 
	252, 253, 327, 252, 253, 328, 252, 253, 
	329, 252, 253, 330, 252, 331, 253, 332, 
	252, 332, 253, 252, 253, 333, 252, 253, 
	334, 252, 253, 318, 252, 335, 0, 336, 
	0, 337, 0, 338, 0, 339, 0, 340, 
	0, 341, 342, 0, 342, 0, 343, 0, 
	344, 0, 345, 0, 346, 0, 347, 0, 
	348, 0, 349, 0, 350, 0, 351, 0, 
	352, 0, 354, 353, 356, 355, 357, 358, 
	356, 359, 360, 361, 362, 360, 363, 364, 
	365, 366, 367, 359, 355, 368, 356, 355, 
	356, 369, 355, 356, 370, 355, 368, 356, 
	355, 356, 371, 355, 356, 372, 355, 356, 
	373, 355, 356, 374, 355, 356, 375, 355, 
	356, 376, 355, 356, 377, 355, 356, 378, 
	355, 356, 379, 355, 356, 380, 355, 356, 
	381, 355, 356, 382, 355, 356, 383, 355, 
	356, 384, 355, 356, 385, 355, 356, 386, 
	355, 356, 387, 355, 356, 368, 355, 388, 
	356, 389, 355, 389, 356, 355, 356, 390, 
	355, 356, 369, 355, 356, 391, 355, 392, 
	393, 356, 369, 394, 355, 395, 356, 355, 
	356, 396, 355, 356, 397, 355, 356, 398, 
	355, 356, 399, 355, 356, 389, 355, 395, 
	356, 355, 356, 397, 396, 396, 355, 356, 
	400, 355, 356, 401, 355, 356, 402, 355, 
	403, 404, 356, 405, 355, 405, 356, 355, 
	356, 406, 355, 356, 407, 355, 356, 408, 
	355, 356, 409, 355, 356, 410, 355, 356, 
	411, 355, 356, 412, 355, 356, 413, 355, 
	356, 414, 355, 356, 415, 355, 356, 370, 
	355, 405, 356, 355, 356, 416, 369, 355, 
	356, 417, 355, 356, 418, 355, 356, 419, 
	355, 356, 420, 355, 356, 421, 355, 356, 
	415, 355, 422, 423, 422, 0, 426, 425, 
	427, 428, 425, 424, 0, 430, 431, 429, 
	0, 430, 429, 426, 432, 430, 431, 432, 
	429, 433, 434, 426, 435, 436, 437, 438, 
	439, 440, 441, 442, 443, 444, 445, 446, 
	447, 435, 0, 97, 85, 84, 85, 448, 
	84, 85, 449, 84, 85, 450, 84, 85, 
	451, 84, 85, 452, 84, 85, 453, 84, 
	85, 454, 84, 85, 455, 84, 85, 456, 
	84, 85, 457, 84, 85, 458, 84, 85, 
	459, 84, 85, 460, 84, 85, 461, 84, 
	85, 462, 84, 85, 463, 84, 85, 464, 
	84, 85, 97, 84, 465, 85, 466, 84, 
	466, 85, 84, 85, 467, 84, 85, 98, 
	84, 85, 468, 84, 469, 470, 85, 98, 
	471, 84, 472, 85, 84, 85, 473, 84, 
	85, 474, 84, 85, 475, 84, 85, 476, 
	84, 85, 466, 84, 472, 85, 84, 85, 
	474, 473, 473, 84, 85, 477, 84, 85, 
	478, 84, 85, 479, 84, 480, 481, 85, 
	482, 84, 482, 85, 84, 85, 483, 84, 
	85, 484, 84, 85, 485, 84, 85, 486, 
	84, 85, 487, 84, 85, 488, 84, 85, 
	489, 84, 85, 490, 84, 85, 491, 84, 
	85, 492, 84, 85, 99, 84, 482, 85, 
	84, 85, 493, 98, 494, 84, 85, 495, 
	84, 85, 496, 84, 85, 497, 84, 85, 
	498, 84, 85, 499, 84, 85, 492, 84, 
	85, 500, 84, 85, 501, 84, 85, 502, 
	84, 85, 503, 84, 85, 504, 84, 85, 
	505, 84, 506, 85, 507, 84, 507, 85, 
	84, 85, 508, 84, 85, 509, 84, 85, 
	493, 84, 510, 0, 4, 0, 511, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 8, 418, 7, 7, 9, 19, 
	21, 4, 35, 38, 42, 59, 69, 96, 
	176, 344, 3, 4, 5, 6, 6, 7, 
	20, 10, 11, 12, 13, 12, 12, 13, 
	12, 14, 14, 14, 15, 14, 14, 14, 
	15, 16, 17, 18, 7, 18, 19, 7, 
	20, 22, 23, 24, 25, 26, 27, 28, 
	29, 30, 31, 32, 33, 34, 420, 36, 
	37, 7, 36, 35, 37, 39, 40, 41, 
	43, 44, 46, 45, 47, 48, 49, 50, 
	51, 52, 53, 54, 53, 54, 55, 350, 
	54, 7, 351, 57, 365, 369, 373, 383, 
	400, 56, 57, 58, 2, 8, 7, 7, 
	9, 19, 21, 4, 35, 38, 42, 59, 
	69, 96, 176, 344, 60, 61, 67, 68, 
	62, 63, 64, 65, 66, 70, 71, 72, 
	73, 74, 75, 76, 77, 78, 77, 78, 
	78, 7, 79, 80, 81, 82, 83, 95, 
	84, 85, 86, 87, 88, 89, 90, 91, 
	92, 93, 94, 58, 97, 98, 99, 100, 
	175, 101, 102, 103, 104, 105, 106, 107, 
	108, 109, 110, 111, 112, 113, 114, 113, 
	114, 114, 7, 115, 129, 136, 142, 157, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 7, 130, 131, 
	132, 133, 134, 135, 58, 137, 138, 139, 
	140, 141, 143, 144, 145, 146, 156, 147, 
	148, 149, 150, 151, 152, 153, 154, 155, 
	158, 164, 159, 160, 161, 162, 163, 165, 
	166, 167, 168, 169, 170, 171, 172, 173, 
	174, 177, 263, 178, 179, 180, 181, 182, 
	183, 184, 185, 186, 185, 186, 187, 190, 
	186, 7, 191, 189, 205, 209, 219, 229, 
	245, 188, 189, 58, 192, 193, 194, 195, 
	196, 197, 198, 199, 200, 201, 202, 203, 
	204, 7, 206, 207, 208, 210, 211, 213, 
	212, 214, 215, 216, 217, 218, 220, 221, 
	227, 228, 222, 223, 224, 225, 226, 230, 
	231, 232, 233, 244, 234, 235, 236, 237, 
	238, 239, 240, 241, 242, 243, 246, 252, 
	247, 248, 249, 250, 251, 253, 254, 255, 
	256, 257, 258, 259, 260, 261, 262, 264, 
	265, 266, 267, 268, 269, 270, 271, 272, 
	273, 274, 275, 276, 277, 278, 279, 280, 
	281, 282, 283, 282, 283, 284, 287, 283, 
	7, 288, 286, 302, 306, 310, 320, 337, 
	285, 286, 58, 289, 290, 291, 292, 293, 
	294, 295, 296, 297, 298, 299, 300, 301, 
	7, 303, 304, 305, 307, 308, 309, 311, 
	312, 318, 319, 313, 314, 315, 316, 317, 
	321, 322, 323, 324, 336, 325, 326, 327, 
	328, 329, 330, 331, 332, 333, 334, 335, 
	338, 339, 340, 341, 342, 343, 344, 345, 
	346, 348, 349, 347, 345, 346, 347, 345, 
	348, 2, 8, 349, 9, 19, 21, 4, 
	35, 38, 42, 59, 69, 96, 176, 344, 
	352, 353, 354, 355, 356, 357, 358, 359, 
	360, 361, 362, 363, 364, 7, 366, 367, 
	368, 370, 371, 372, 374, 375, 381, 382, 
	376, 377, 378, 379, 380, 384, 385, 386, 
	387, 399, 388, 389, 390, 391, 392, 393, 
	394, 395, 396, 397, 398, 401, 407, 402, 
	403, 404, 405, 406, 408, 409, 410, 411, 
	412, 413, 414, 415, 416, 417, 419, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 29, 29, 0, 0, 54, 3, 1, 
	0, 29, 1, 29, 29, 29, 29, 29, 
	29, 35, 0, 0, 0, 57, 0, 110, 
	23, 0, 0, 7, 135, 48, 0, 102, 
	9, 5, 45, 130, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 84, 84, 
	0, 72, 33, 84, 84, 84, 84, 84, 
	84, 0, 0, 15, 63, 63, 31, 126, 
	60, 57, 31, 63, 57, 63, 63, 63, 
	63, 63, 63, 66, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 81, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 84, 84, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 0, 0, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 84, 84, 0, 
	78, 33, 84, 84, 84, 84, 84, 84, 
	0, 0, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	37, 37, 54, 37, 87, 0, 0, 39, 
	0, 96, 96, 0, 93, 90, 41, 96, 
	90, 96, 96, 96, 96, 96, 96, 99, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 420;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 814 "lib/gherkin/rb_lexer/ro.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
        
# line 823 "lib/gherkin/rb_lexer/ro.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1067 "lib/gherkin/rb_lexer/ro.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1106 "lib/gherkin/rb_lexer/ro.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ro.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
