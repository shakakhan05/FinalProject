
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Cy_gb #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/cy_gb.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 18, 19, 20, 37, 38, 39, 
	41, 43, 48, 53, 58, 63, 67, 71, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	89, 90, 92, 97, 104, 109, 112, 113, 
	114, 115, 116, 117, 118, 119, 120, 121, 
	122, 123, 124, 125, 126, 127, 128, 129, 
	140, 142, 144, 146, 148, 150, 152, 154, 
	156, 158, 160, 162, 164, 166, 168, 170, 
	172, 174, 176, 178, 180, 197, 198, 199, 
	200, 201, 202, 203, 204, 205, 206, 219, 
	221, 223, 225, 227, 229, 231, 233, 235, 
	237, 239, 241, 243, 245, 247, 249, 253, 
	255, 257, 259, 261, 263, 265, 267, 269, 
	271, 273, 275, 277, 279, 281, 283, 285, 
	287, 289, 291, 293, 295, 297, 299, 301, 
	303, 305, 308, 310, 312, 314, 316, 318, 
	320, 322, 324, 326, 328, 330, 331, 332, 
	333, 334, 335, 336, 337, 338, 339, 340, 
	341, 342, 343, 344, 345, 352, 354, 356, 
	358, 360, 362, 364, 365, 366, 367, 368, 
	369, 370, 371, 372, 373, 374, 375, 377, 
	378, 379, 380, 381, 382, 383, 384, 385, 
	386, 387, 388, 389, 390, 403, 405, 407, 
	409, 411, 413, 415, 417, 419, 421, 423, 
	425, 427, 429, 431, 433, 437, 439, 441, 
	443, 445, 447, 449, 451, 453, 455, 457, 
	459, 461, 463, 465, 467, 469, 471, 473, 
	475, 477, 479, 481, 483, 485, 487, 489, 
	491, 492, 493, 507, 509, 511, 513, 515, 
	517, 519, 521, 523, 525, 527, 529, 531, 
	533, 535, 537, 541, 543, 545, 547, 549, 
	551, 553, 555, 557, 559, 561, 563, 565, 
	567, 569, 571, 573, 575, 577, 579, 581, 
	583, 585, 587, 589, 591, 593, 595, 597, 
	599, 601, 603, 605, 608, 610, 612, 614, 
	616, 618, 620, 622, 624, 626, 628, 630, 
	631, 635, 641, 644, 646, 652, 669, 671, 
	673, 675, 677, 679, 681, 683, 685, 687, 
	689, 691, 693, 695, 697, 699, 701, 703, 
	705, 707, 709, 711, 713, 715, 717, 719, 
	722, 724, 726, 728, 730, 732, 734, 736, 
	738, 740, 742
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-17, 10, 32, 34, 35, 37, 42, 64, 
	65, 67, 69, 79, 80, 83, 89, 124, 
	9, 13, -69, -65, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 69, 79, 80, 
	83, 89, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 10, 13, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 32, 110, 114, 
	114, 104, 101, 103, 101, 100, 105, 103, 
	32, 97, 119, 101, 100, 100, 58, 10, 
	10, 10, 32, 35, 37, 64, 65, 67, 
	69, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 114, 10, 119, 10, 101, 10, 100, 
	10, 100, 10, 58, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 69, 79, 80, 
	83, 89, 124, 9, 13, 101, 102, 110, 
	100, 105, 114, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 79, 80, 83, 
	89, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 32, 110, 114, 10, 114, 10, 
	104, 10, 101, 10, 103, 10, 101, 10, 
	100, 10, 105, 10, 103, 10, 32, 10, 
	97, 10, 119, 10, 101, 10, 100, 10, 
	100, 10, 58, 10, 110, 10, 100, 10, 
	114, 10, 121, 10, 99, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 32, 58, 10, 65, 10, 109, 
	10, 108, 10, 105, 10, 110, 10, 101, 
	10, 108, 10, 108, 10, 111, 10, 108, 
	10, 110, 110, 103, 104, 114, 101, 105, 
	102, 102, 116, 105, 97, 117, 58, 10, 
	10, 10, 32, 35, 65, 124, 9, 13, 
	10, 114, 10, 119, 10, 101, 10, 100, 
	10, 100, 10, 58, 110, 100, 114, 121, 
	99, 101, 110, 97, 114, 105, 111, 32, 
	58, 65, 109, 108, 105, 110, 101, 108, 
	108, 111, 108, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 79, 80, 83, 
	89, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 32, 110, 114, 10, 114, 10, 
	104, 10, 101, 10, 103, 10, 101, 10, 
	100, 10, 105, 10, 103, 10, 32, 10, 
	97, 10, 119, 10, 101, 10, 100, 10, 
	100, 10, 58, 10, 110, 10, 100, 10, 
	114, 10, 121, 10, 99, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 110, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 67, 79, 80, 83, 
	89, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 32, 110, 114, 10, 114, 10, 
	104, 10, 101, 10, 103, 10, 101, 10, 
	100, 10, 105, 10, 103, 10, 32, 10, 
	97, 10, 119, 10, 101, 10, 100, 10, 
	100, 10, 58, 10, 101, 10, 102, 10, 
	110, 10, 100, 10, 105, 10, 114, 10, 
	110, 10, 100, 10, 114, 10, 121, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 32, 58, 
	10, 65, 10, 109, 10, 108, 10, 105, 
	10, 110, 10, 101, 10, 108, 10, 108, 
	10, 111, 10, 108, 10, 110, 110, 32, 
	124, 9, 13, 10, 32, 92, 124, 9, 
	13, 10, 92, 124, 10, 92, 10, 32, 
	92, 124, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 69, 79, 80, 
	83, 89, 124, 9, 13, 10, 101, 10, 
	102, 10, 110, 10, 100, 10, 105, 10, 
	114, 10, 110, 10, 103, 10, 104, 10, 
	114, 10, 101, 10, 105, 10, 102, 10, 
	102, 10, 116, 10, 105, 10, 97, 10, 
	117, 10, 99, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 111, 10, 
	32, 58, 10, 65, 10, 109, 10, 108, 
	10, 105, 10, 110, 10, 101, 10, 108, 
	10, 108, 10, 111, 10, 108, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 16, 1, 1, 15, 1, 1, 2, 
	2, 3, 3, 3, 3, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 3, 5, 3, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 15, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 11, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 5, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 12, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	2, 4, 3, 2, 4, 15, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 18, 20, 22, 39, 41, 43, 
	46, 49, 54, 59, 64, 69, 73, 77, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 110, 
	112, 114, 117, 122, 129, 134, 138, 140, 
	142, 144, 146, 148, 150, 152, 154, 156, 
	158, 160, 162, 164, 166, 168, 170, 172, 
	183, 186, 189, 192, 195, 198, 201, 204, 
	207, 210, 213, 216, 219, 222, 225, 228, 
	231, 234, 237, 240, 243, 260, 262, 264, 
	266, 268, 270, 272, 274, 276, 278, 291, 
	294, 297, 300, 303, 306, 309, 312, 315, 
	318, 321, 324, 327, 330, 333, 336, 341, 
	344, 347, 350, 353, 356, 359, 362, 365, 
	368, 371, 374, 377, 380, 383, 386, 389, 
	392, 395, 398, 401, 404, 407, 410, 413, 
	416, 419, 423, 426, 429, 432, 435, 438, 
	441, 444, 447, 450, 453, 456, 458, 460, 
	462, 464, 466, 468, 470, 472, 474, 476, 
	478, 480, 482, 484, 486, 493, 496, 499, 
	502, 505, 508, 511, 513, 515, 517, 519, 
	521, 523, 525, 527, 529, 531, 533, 536, 
	538, 540, 542, 544, 546, 548, 550, 552, 
	554, 556, 558, 560, 562, 575, 578, 581, 
	584, 587, 590, 593, 596, 599, 602, 605, 
	608, 611, 614, 617, 620, 625, 628, 631, 
	634, 637, 640, 643, 646, 649, 652, 655, 
	658, 661, 664, 667, 670, 673, 676, 679, 
	682, 685, 688, 691, 694, 697, 700, 703, 
	706, 708, 710, 724, 727, 730, 733, 736, 
	739, 742, 745, 748, 751, 754, 757, 760, 
	763, 766, 769, 774, 777, 780, 783, 786, 
	789, 792, 795, 798, 801, 804, 807, 810, 
	813, 816, 819, 822, 825, 828, 831, 834, 
	837, 840, 843, 846, 849, 852, 855, 858, 
	861, 864, 867, 870, 874, 877, 880, 883, 
	886, 889, 892, 895, 898, 901, 904, 907, 
	909, 913, 919, 923, 926, 932, 949, 952, 
	955, 958, 961, 964, 967, 970, 973, 976, 
	979, 982, 985, 988, 991, 994, 997, 1000, 
	1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 
	1028, 1031, 1034, 1037, 1040, 1043, 1046, 1049, 
	1052, 1055, 1058
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	2, 0, 17, 0, 2, 0, 3, 2, 
	4, 5, 6, 7, 8, 9, 10, 11, 
	12, 13, 14, 15, 16, 2, 0, 18, 
	0, 19, 0, 21, 22, 20, 24, 25, 
	23, 28, 27, 29, 27, 26, 32, 31, 
	33, 31, 30, 32, 31, 34, 31, 30, 
	32, 31, 35, 31, 30, 37, 36, 36, 
	0, 3, 38, 38, 0, 40, 41, 39, 
	3, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	0, 57, 59, 60, 58, 0, 0, 0, 
	0, 61, 62, 63, 62, 62, 65, 64, 
	61, 3, 66, 8, 66, 0, 56, 67, 
	68, 0, 69, 0, 70, 0, 71, 0, 
	72, 0, 73, 0, 74, 0, 75, 0, 
	76, 0, 77, 0, 78, 0, 79, 0, 
	80, 0, 81, 0, 82, 0, 83, 0, 
	85, 84, 87, 86, 87, 88, 89, 90, 
	89, 91, 92, 93, 94, 88, 86, 87, 
	95, 86, 87, 96, 86, 87, 97, 86, 
	87, 98, 86, 87, 99, 86, 87, 100, 
	86, 87, 101, 86, 87, 102, 86, 87, 
	103, 86, 87, 104, 86, 87, 105, 86, 
	87, 106, 86, 87, 107, 86, 87, 108, 
	86, 87, 109, 86, 87, 110, 86, 87, 
	111, 86, 87, 112, 86, 87, 113, 86, 
	87, 114, 86, 116, 115, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	128, 129, 115, 0, 130, 0, 131, 0, 
	132, 0, 133, 0, 134, 0, 135, 0, 
	136, 0, 138, 137, 140, 139, 140, 141, 
	142, 143, 144, 142, 145, 146, 147, 148, 
	149, 141, 139, 140, 150, 139, 140, 151, 
	139, 140, 152, 139, 140, 153, 139, 140, 
	154, 139, 140, 155, 139, 140, 156, 139, 
	140, 157, 139, 140, 158, 139, 140, 159, 
	139, 140, 160, 139, 140, 161, 139, 140, 
	162, 139, 140, 163, 139, 140, 164, 139, 
	140, 164, 165, 166, 139, 140, 167, 139, 
	140, 168, 139, 140, 169, 139, 140, 170, 
	139, 140, 171, 139, 140, 172, 139, 140, 
	173, 139, 140, 174, 139, 140, 175, 139, 
	140, 176, 139, 140, 177, 139, 140, 178, 
	139, 140, 179, 139, 140, 180, 139, 140, 
	164, 139, 140, 181, 139, 140, 176, 139, 
	140, 182, 139, 140, 181, 139, 140, 183, 
	139, 140, 184, 139, 140, 185, 139, 140, 
	186, 139, 140, 187, 139, 140, 188, 139, 
	140, 189, 139, 140, 190, 164, 139, 140, 
	191, 139, 140, 192, 139, 140, 193, 139, 
	140, 194, 139, 140, 195, 139, 140, 196, 
	139, 140, 197, 139, 140, 198, 139, 140, 
	199, 139, 140, 180, 139, 140, 175, 139, 
	200, 0, 201, 0, 202, 0, 203, 0, 
	204, 0, 205, 0, 206, 0, 207, 0, 
	208, 0, 209, 0, 210, 0, 211, 0, 
	212, 0, 214, 213, 216, 215, 216, 217, 
	218, 219, 218, 217, 215, 216, 220, 215, 
	216, 221, 215, 216, 222, 215, 216, 223, 
	215, 216, 224, 215, 216, 225, 215, 226, 
	0, 78, 0, 227, 0, 226, 0, 228, 
	0, 229, 0, 230, 0, 231, 0, 232, 
	0, 233, 0, 234, 0, 235, 236, 0, 
	237, 0, 238, 0, 239, 0, 240, 0, 
	241, 0, 242, 0, 243, 0, 244, 0, 
	245, 0, 246, 0, 247, 0, 249, 248, 
	251, 250, 251, 252, 253, 254, 255, 253, 
	256, 257, 258, 259, 260, 252, 250, 251, 
	261, 250, 251, 262, 250, 251, 263, 250, 
	251, 264, 250, 251, 265, 250, 251, 266, 
	250, 251, 267, 250, 251, 268, 250, 251, 
	269, 250, 251, 270, 250, 251, 271, 250, 
	251, 272, 250, 251, 273, 250, 251, 274, 
	250, 251, 275, 250, 251, 275, 276, 277, 
	250, 251, 278, 250, 251, 279, 250, 251, 
	280, 250, 251, 281, 250, 251, 282, 250, 
	251, 283, 250, 251, 284, 250, 251, 285, 
	250, 251, 286, 250, 251, 287, 250, 251, 
	288, 250, 251, 289, 250, 251, 290, 250, 
	251, 291, 250, 251, 275, 250, 251, 292, 
	250, 251, 287, 250, 251, 293, 250, 251, 
	292, 250, 251, 294, 250, 251, 295, 250, 
	251, 296, 250, 251, 297, 250, 251, 298, 
	250, 251, 299, 250, 251, 291, 250, 251, 
	286, 250, 301, 300, 303, 302, 303, 304, 
	305, 306, 307, 305, 308, 309, 310, 311, 
	312, 313, 304, 302, 303, 314, 302, 303, 
	315, 302, 303, 316, 302, 303, 317, 302, 
	303, 318, 302, 303, 319, 302, 303, 320, 
	302, 303, 321, 302, 303, 322, 302, 303, 
	323, 302, 303, 324, 302, 303, 325, 302, 
	303, 326, 302, 303, 327, 302, 303, 328, 
	302, 303, 328, 329, 330, 302, 303, 331, 
	302, 303, 332, 302, 303, 333, 302, 303, 
	334, 302, 303, 335, 302, 303, 336, 302, 
	303, 337, 302, 303, 338, 302, 303, 339, 
	302, 303, 340, 302, 303, 341, 302, 303, 
	342, 302, 303, 343, 302, 303, 344, 302, 
	303, 328, 302, 303, 345, 302, 303, 346, 
	302, 303, 347, 302, 303, 348, 302, 303, 
	349, 302, 303, 344, 302, 303, 350, 302, 
	303, 340, 302, 303, 351, 302, 303, 350, 
	302, 303, 352, 302, 303, 353, 302, 303, 
	354, 302, 303, 355, 302, 303, 356, 302, 
	303, 357, 302, 303, 358, 302, 303, 359, 
	328, 302, 303, 360, 302, 303, 361, 302, 
	303, 362, 302, 303, 363, 302, 303, 364, 
	302, 303, 365, 302, 303, 366, 302, 303, 
	367, 302, 303, 368, 302, 303, 344, 302, 
	303, 339, 302, 77, 0, 369, 370, 369, 
	0, 373, 372, 374, 375, 372, 371, 0, 
	377, 378, 376, 0, 377, 376, 373, 379, 
	377, 378, 379, 376, 373, 380, 381, 382, 
	383, 384, 385, 386, 387, 388, 389, 390, 
	391, 392, 393, 380, 0, 87, 394, 86, 
	87, 395, 86, 87, 396, 86, 87, 397, 
	86, 87, 398, 86, 87, 113, 86, 87, 
	399, 86, 87, 400, 86, 87, 401, 86, 
	87, 402, 86, 87, 403, 86, 87, 404, 
	86, 87, 405, 86, 87, 406, 86, 87, 
	407, 86, 87, 408, 86, 87, 409, 86, 
	87, 113, 86, 87, 410, 86, 87, 411, 
	86, 87, 412, 86, 87, 413, 86, 87, 
	414, 86, 87, 415, 86, 87, 416, 86, 
	87, 417, 114, 86, 87, 418, 86, 87, 
	419, 86, 87, 420, 86, 87, 421, 86, 
	87, 422, 86, 87, 423, 86, 87, 424, 
	86, 87, 425, 86, 87, 426, 86, 87, 
	113, 86, 427, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 4, 4, 5, 15, 17, 31, 
	34, 37, 77, 141, 163, 165, 167, 295, 
	296, 3, 6, 7, 8, 9, 8, 8, 
	9, 8, 10, 10, 10, 11, 10, 10, 
	10, 11, 12, 13, 14, 4, 14, 15, 
	4, 16, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 29, 30, 338, 
	32, 33, 33, 4, 16, 35, 36, 4, 
	35, 34, 36, 38, 48, 39, 40, 41, 
	42, 43, 44, 45, 46, 47, 31, 49, 
	50, 51, 52, 53, 54, 55, 54, 55, 
	55, 4, 56, 70, 302, 308, 320, 57, 
	58, 59, 60, 61, 62, 63, 64, 65, 
	66, 67, 68, 69, 4, 71, 72, 73, 
	74, 75, 76, 4, 4, 5, 15, 17, 
	31, 34, 37, 77, 141, 163, 165, 167, 
	295, 296, 78, 79, 80, 81, 82, 83, 
	84, 85, 86, 85, 86, 86, 4, 87, 
	101, 102, 118, 120, 122, 140, 88, 89, 
	90, 91, 92, 93, 94, 95, 96, 97, 
	98, 99, 100, 4, 76, 103, 113, 104, 
	105, 106, 107, 108, 109, 110, 111, 112, 
	101, 114, 115, 116, 117, 119, 121, 123, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	132, 133, 134, 135, 136, 137, 138, 139, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 155, 156, 155, 
	156, 156, 4, 157, 158, 159, 160, 161, 
	162, 76, 164, 166, 168, 169, 170, 171, 
	172, 173, 174, 175, 232, 176, 177, 178, 
	179, 180, 181, 182, 183, 184, 185, 186, 
	187, 188, 187, 188, 188, 4, 189, 203, 
	204, 220, 222, 224, 231, 190, 191, 192, 
	193, 194, 195, 196, 197, 198, 199, 200, 
	201, 202, 4, 76, 205, 215, 206, 207, 
	208, 209, 210, 211, 212, 213, 214, 203, 
	216, 217, 218, 219, 221, 223, 225, 226, 
	227, 228, 229, 230, 233, 234, 233, 234, 
	234, 4, 235, 249, 250, 266, 272, 274, 
	276, 294, 236, 237, 238, 239, 240, 241, 
	242, 243, 244, 245, 246, 247, 248, 4, 
	76, 251, 261, 252, 253, 254, 255, 256, 
	257, 258, 259, 260, 249, 262, 263, 264, 
	265, 267, 268, 269, 270, 271, 273, 275, 
	277, 278, 279, 280, 281, 282, 283, 284, 
	285, 286, 287, 288, 289, 290, 291, 292, 
	293, 296, 297, 298, 300, 301, 299, 297, 
	298, 299, 297, 300, 301, 5, 15, 17, 
	31, 34, 37, 77, 141, 163, 165, 167, 
	295, 296, 303, 304, 305, 306, 307, 309, 
	310, 311, 312, 313, 314, 315, 316, 317, 
	318, 319, 321, 322, 323, 324, 325, 326, 
	327, 328, 329, 330, 331, 332, 333, 334, 
	335, 336, 337, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 0, 0, 54, 3, 1, 0, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 135, 48, 0, 
	102, 9, 5, 45, 130, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 0, 110, 23, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 69, 33, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 13, 31, 126, 60, 57, 31, 
	63, 57, 63, 63, 63, 63, 63, 63, 
	63, 66, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 72, 33, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 0, 81, 84, 0, 0, 0, 0, 
	0, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 140, 0, 54, 0, 78, 33, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 37, 37, 54, 37, 87, 
	0, 0, 39, 0, 0, 93, 90, 41, 
	96, 90, 96, 96, 96, 96, 96, 96, 
	96, 99, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 338;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 685 "lib/gherkin/rb_lexer/cy_gb.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
        
# line 694 "lib/gherkin/rb_lexer/cy_gb.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 938 "lib/gherkin/rb_lexer/cy_gb.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 977 "lib/gherkin/rb_lexer/cy_gb.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/cy_gb.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
