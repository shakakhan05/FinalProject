
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Tr #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/tr.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 20, 21, 23, 24, 25, 26, 
	27, 28, 29, 30, 31, 32, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 74, 
	93, 94, 95, 97, 99, 104, 109, 114, 
	119, 123, 127, 129, 130, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 148, 153, 160, 
	165, 166, 167, 168, 169, 170, 171, 172, 
	173, 174, 175, 176, 177, 178, 179, 180, 
	181, 182, 183, 184, 185, 186, 187, 188, 
	189, 190, 191, 192, 193, 194, 210, 212, 
	214, 216, 218, 220, 222, 224, 226, 228, 
	230, 232, 234, 236, 238, 240, 242, 244, 
	246, 248, 250, 252, 254, 256, 258, 260, 
	262, 264, 266, 268, 270, 272, 274, 276, 
	278, 280, 282, 284, 286, 288, 290, 292, 
	294, 296, 298, 300, 302, 304, 306, 308, 
	310, 312, 314, 316, 318, 321, 323, 325, 
	327, 329, 331, 333, 335, 337, 339, 341, 
	342, 343, 344, 345, 346, 347, 348, 349, 
	350, 351, 352, 353, 355, 356, 357, 358, 
	359, 360, 361, 362, 363, 364, 365, 366, 
	367, 383, 385, 387, 389, 391, 393, 395, 
	397, 399, 401, 403, 405, 407, 409, 411, 
	413, 415, 417, 419, 421, 423, 425, 427, 
	429, 431, 433, 435, 437, 439, 441, 443, 
	445, 447, 449, 451, 453, 455, 457, 459, 
	461, 463, 465, 467, 469, 471, 473, 475, 
	477, 479, 481, 483, 485, 487, 489, 491, 
	493, 494, 495, 512, 514, 516, 518, 520, 
	522, 524, 526, 528, 530, 532, 534, 536, 
	538, 540, 542, 544, 546, 548, 550, 552, 
	554, 556, 558, 560, 562, 564, 566, 568, 
	570, 572, 574, 576, 578, 580, 582, 584, 
	586, 588, 590, 592, 594, 596, 598, 600, 
	602, 604, 606, 608, 610, 612, 614, 616, 
	618, 620, 622, 624, 626, 628, 630, 632, 
	634, 637, 639, 641, 643, 645, 647, 649, 
	651, 653, 655, 657, 658, 662, 668, 671, 
	673, 679, 698, 699, 700, 701, 702, 703, 
	704, 705, 706, 716, 718, 721, 723, 725, 
	727, 729, 731, 733, 735, 737, 739, 741, 
	743, 745, 747, 749, 751, 753, 755, 757, 
	759, 761, 763, 765, 767, 769, 771, 773, 
	775, 777, 779, 781, 783, 785, 787, 789, 
	791, 793, 795, 797, 799, 802, 804, 806, 
	808, 810, 812, 814, 816, 818, 820, 821, 
	822
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-61, -17, 10, 32, 34, 35, 37, 42, 
	64, 65, 68, 69, 70, 71, 79, 83, 
	86, 124, 9, 13, -106, 114, 122, 110, 
	101, 107, 108, 101, 114, 58, 10, 10, 
	-61, 10, 32, 35, 124, 9, 13, -106, 
	10, 10, 122, 10, 101, 10, 108, 10, 
	108, 10, 105, 10, 107, 10, 58, -61, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	68, 69, 70, 71, 79, 83, 86, 124, 
	9, 13, -61, 10, 32, 34, 35, 37, 
	42, 64, 65, 68, 69, 70, 71, 79, 
	83, 86, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 10, 13, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 109, 97, 105, 
	121, 101, 108, 105, 109, 32, 107, 105, 
	-60, -97, 101, 114, 97, 107, 97, 116, 
	101, -61, -89, 109, 105, -59, -97, 58, 
	10, 10, -61, 10, 32, 35, 37, 42, 
	64, 65, 68, 69, 70, 79, 83, 86, 
	9, 13, -106, 10, 10, 122, 10, 101, 
	10, 108, 10, 108, 10, 105, 10, 107, 
	10, 58, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 109, 10, 97, 10, 105, 10, 121, 
	10, 101, 10, 108, 10, 105, 10, 109, 
	10, 32, 10, 107, 10, 105, -60, 10, 
	-97, 10, 10, 101, 10, 114, 10, 97, 
	10, 107, 10, 97, 10, 116, 10, 32, 
	10, 122, 10, 97, 10, 109, 10, 97, 
	10, 110, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 121, 10, 111, 10, 32, 
	58, 10, 116, 10, 97, 10, 115, 10, 
	108, 10, 97, -60, 10, -97, 10, -60, 
	10, -79, 10, 10, 101, 32, 122, 97, 
	109, 97, 110, 101, 110, 97, 114, 121, 
	111, 32, 58, 116, 97, 115, 108, 97, 
	-60, -97, -60, -79, 58, 10, 10, -61, 
	10, 32, 35, 37, 42, 64, 65, 68, 
	69, 70, 79, 83, 86, 9, 13, -106, 
	10, 10, 122, 10, 101, 10, 108, 10, 
	108, 10, 105, 10, 107, 10, 58, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 109, 10, 
	97, 10, 105, 10, 121, 10, 101, 10, 
	108, 10, 105, 10, 109, 10, 32, 10, 
	107, 10, 105, -60, 10, -97, 10, 10, 
	101, 10, 114, 10, 97, 10, 107, 10, 
	97, 10, 116, 10, 32, 10, 122, 10, 
	97, 10, 109, 10, 97, 10, 110, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	121, 10, 111, 10, 101, 10, 10, -61, 
	10, 32, 35, 37, 42, 64, 65, 68, 
	69, 70, 71, 79, 83, 86, 9, 13, 
	-106, 10, 10, 122, 10, 101, 10, 108, 
	10, 108, 10, 105, 10, 107, 10, 58, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 109, 
	10, 97, 10, 105, 10, 121, 10, 101, 
	10, 108, 10, 105, 10, 109, 10, 32, 
	10, 107, 10, 105, -60, 10, -97, 10, 
	10, 101, 10, 114, 10, 97, 10, 107, 
	10, 97, 10, 116, 10, 101, -61, 10, 
	-89, 10, 10, 109, 10, 105, -59, 10, 
	-97, 10, 10, 32, 10, 122, 10, 97, 
	10, 109, 10, 97, 10, 110, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 121, 
	10, 111, 10, 32, 58, 10, 116, 10, 
	97, 10, 115, 10, 108, 10, 97, -60, 
	10, -97, 10, -60, 10, -79, 10, 10, 
	101, 101, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, -61, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	68, 69, 70, 71, 79, 83, 86, 124, 
	9, 13, 101, 108, 108, 105, 107, 58, 
	10, 10, -61, 10, 32, 35, 37, 64, 
	71, 83, 9, 13, -106, 10, 10, 114, 
	122, 10, 110, 10, 101, 10, 107, 10, 
	108, 10, 101, 10, 114, 10, 58, 10, 
	101, 10, 108, 10, 108, 10, 105, 10, 
	107, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 101, -61, 
	10, -89, 10, 10, 109, 10, 105, -59, 
	10, -97, 10, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 121, 10, 111, 10, 
	32, 58, 10, 116, 10, 97, 10, 115, 
	10, 108, 10, 97, -60, 10, -97, 10, 
	-60, 10, -79, 10, -69, -65, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 18, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 2, 2, 2, 2, 2, 17, 17, 
	1, 1, 2, 2, 3, 3, 3, 3, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 3, 5, 3, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	14, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 15, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 2, 4, 3, 2, 
	4, 17, 1, 1, 1, 1, 1, 1, 
	1, 1, 8, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 20, 22, 25, 27, 29, 31, 
	33, 35, 37, 39, 41, 43, 50, 53, 
	56, 59, 62, 65, 68, 71, 74, 93, 
	112, 114, 116, 119, 122, 127, 132, 137, 
	142, 146, 150, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 177, 
	179, 181, 183, 185, 187, 190, 195, 202, 
	207, 209, 211, 213, 215, 217, 219, 221, 
	223, 225, 227, 229, 231, 233, 235, 237, 
	239, 241, 243, 245, 247, 249, 251, 253, 
	255, 257, 259, 261, 263, 265, 281, 284, 
	287, 290, 293, 296, 299, 302, 305, 308, 
	311, 314, 317, 320, 323, 326, 329, 332, 
	335, 338, 341, 344, 347, 350, 353, 356, 
	359, 362, 365, 368, 371, 374, 377, 380, 
	383, 386, 389, 392, 395, 398, 401, 404, 
	407, 410, 413, 416, 419, 422, 425, 428, 
	431, 434, 437, 440, 443, 447, 450, 453, 
	456, 459, 462, 465, 468, 471, 474, 477, 
	479, 481, 483, 485, 487, 489, 491, 493, 
	495, 497, 499, 501, 504, 506, 508, 510, 
	512, 514, 516, 518, 520, 522, 524, 526, 
	528, 544, 547, 550, 553, 556, 559, 562, 
	565, 568, 571, 574, 577, 580, 583, 586, 
	589, 592, 595, 598, 601, 604, 607, 610, 
	613, 616, 619, 622, 625, 628, 631, 634, 
	637, 640, 643, 646, 649, 652, 655, 658, 
	661, 664, 667, 670, 673, 676, 679, 682, 
	685, 688, 691, 694, 697, 700, 703, 706, 
	709, 711, 713, 730, 733, 736, 739, 742, 
	745, 748, 751, 754, 757, 760, 763, 766, 
	769, 772, 775, 778, 781, 784, 787, 790, 
	793, 796, 799, 802, 805, 808, 811, 814, 
	817, 820, 823, 826, 829, 832, 835, 838, 
	841, 844, 847, 850, 853, 856, 859, 862, 
	865, 868, 871, 874, 877, 880, 883, 886, 
	889, 892, 895, 898, 901, 904, 907, 910, 
	913, 917, 920, 923, 926, 929, 932, 935, 
	938, 941, 944, 947, 949, 953, 959, 963, 
	966, 972, 991, 993, 995, 997, 999, 1001, 
	1003, 1005, 1007, 1017, 1020, 1024, 1027, 1030, 
	1033, 1036, 1039, 1042, 1045, 1048, 1051, 1054, 
	1057, 1060, 1063, 1066, 1069, 1072, 1075, 1078, 
	1081, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 
	1105, 1108, 1111, 1114, 1117, 1120, 1123, 1126, 
	1129, 1132, 1135, 1138, 1141, 1145, 1148, 1151, 
	1154, 1157, 1160, 1163, 1166, 1169, 1172, 1174, 
	1176
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 2, 4, 3, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 3, 0, 19, 0, 20, 21, 
	0, 22, 0, 23, 0, 24, 0, 25, 
	0, 26, 0, 27, 0, 28, 0, 30, 
	29, 32, 31, 33, 32, 34, 35, 35, 
	34, 31, 36, 32, 31, 32, 37, 31, 
	32, 38, 31, 32, 39, 31, 32, 40, 
	31, 32, 41, 31, 32, 42, 31, 32, 
	43, 31, 44, 46, 45, 47, 48, 49, 
	50, 51, 52, 53, 54, 55, 56, 57, 
	58, 59, 60, 45, 0, 1, 4, 3, 
	5, 6, 7, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 18, 3, 0, 
	61, 0, 62, 0, 64, 65, 63, 67, 
	68, 66, 71, 70, 72, 70, 69, 75, 
	74, 76, 74, 73, 75, 74, 77, 74, 
	73, 75, 74, 78, 74, 73, 80, 79, 
	79, 0, 4, 81, 81, 0, 83, 84, 
	82, 4, 0, 85, 0, 86, 0, 87, 
	0, 88, 0, 89, 0, 90, 0, 91, 
	0, 92, 0, 93, 0, 94, 0, 95, 
	0, 96, 0, 97, 0, 98, 0, 99, 
	0, 0, 100, 102, 103, 101, 0, 0, 
	0, 0, 104, 105, 106, 105, 105, 108, 
	107, 104, 4, 109, 9, 109, 0, 110, 
	0, 111, 0, 112, 0, 113, 0, 114, 
	0, 115, 0, 116, 0, 117, 0, 118, 
	0, 119, 0, 111, 0, 120, 0, 121, 
	0, 122, 0, 117, 0, 123, 0, 124, 
	0, 125, 0, 111, 0, 126, 0, 127, 
	0, 128, 0, 129, 0, 130, 0, 131, 
	0, 132, 0, 133, 0, 135, 134, 137, 
	136, 138, 137, 139, 140, 141, 142, 140, 
	143, 144, 145, 146, 147, 148, 149, 139, 
	136, 150, 137, 136, 137, 151, 136, 137, 
	152, 136, 137, 153, 136, 137, 154, 136, 
	137, 155, 136, 137, 156, 136, 137, 157, 
	136, 137, 158, 136, 137, 159, 136, 137, 
	160, 136, 137, 161, 136, 137, 162, 136, 
	137, 163, 136, 137, 164, 136, 137, 165, 
	136, 137, 166, 136, 137, 167, 136, 137, 
	168, 136, 137, 169, 136, 137, 170, 136, 
	137, 171, 136, 137, 157, 136, 137, 172, 
	136, 137, 173, 136, 137, 174, 136, 137, 
	175, 136, 137, 176, 136, 137, 177, 136, 
	137, 178, 136, 137, 179, 136, 137, 180, 
	136, 137, 181, 136, 137, 173, 136, 182, 
	137, 136, 183, 137, 136, 137, 184, 136, 
	137, 179, 136, 137, 185, 136, 137, 186, 
	136, 137, 187, 136, 137, 173, 136, 137, 
	188, 136, 137, 189, 136, 137, 190, 136, 
	137, 191, 136, 137, 192, 136, 137, 173, 
	136, 137, 193, 136, 137, 194, 136, 137, 
	195, 136, 137, 196, 136, 137, 197, 136, 
	137, 198, 136, 137, 199, 157, 136, 137, 
	200, 136, 137, 201, 136, 137, 202, 136, 
	137, 203, 136, 137, 204, 136, 205, 137, 
	136, 206, 137, 136, 207, 137, 136, 156, 
	137, 136, 137, 173, 136, 208, 0, 209, 
	0, 210, 0, 211, 0, 212, 0, 111, 
	0, 213, 0, 214, 0, 215, 0, 216, 
	0, 217, 0, 218, 0, 219, 220, 0, 
	221, 0, 222, 0, 223, 0, 224, 0, 
	225, 0, 226, 0, 227, 0, 228, 0, 
	229, 0, 230, 0, 232, 231, 234, 233, 
	235, 234, 236, 237, 238, 239, 237, 240, 
	241, 242, 243, 244, 245, 246, 236, 233, 
	247, 234, 233, 234, 248, 233, 234, 249, 
	233, 234, 250, 233, 234, 251, 233, 234, 
	252, 233, 234, 253, 233, 234, 254, 233, 
	234, 255, 233, 234, 256, 233, 234, 257, 
	233, 234, 258, 233, 234, 259, 233, 234, 
	260, 233, 234, 261, 233, 234, 262, 233, 
	234, 263, 233, 234, 264, 233, 234, 265, 
	233, 234, 266, 233, 234, 267, 233, 234, 
	268, 233, 234, 254, 233, 234, 269, 233, 
	234, 270, 233, 234, 271, 233, 234, 272, 
	233, 234, 273, 233, 234, 274, 233, 234, 
	275, 233, 234, 276, 233, 234, 277, 233, 
	234, 278, 233, 234, 270, 233, 279, 234, 
	233, 280, 234, 233, 234, 281, 233, 234, 
	276, 233, 234, 282, 233, 234, 283, 233, 
	234, 284, 233, 234, 270, 233, 234, 285, 
	233, 234, 286, 233, 234, 287, 233, 234, 
	288, 233, 234, 289, 233, 234, 270, 233, 
	234, 290, 233, 234, 291, 233, 234, 292, 
	233, 234, 293, 233, 234, 294, 233, 234, 
	253, 233, 234, 270, 233, 296, 295, 298, 
	297, 299, 298, 300, 301, 302, 303, 301, 
	304, 305, 306, 307, 308, 309, 310, 311, 
	300, 297, 312, 298, 297, 298, 313, 297, 
	298, 314, 297, 298, 315, 297, 298, 316, 
	297, 298, 317, 297, 298, 318, 297, 298, 
	319, 297, 298, 320, 297, 298, 321, 297, 
	298, 322, 297, 298, 323, 297, 298, 324, 
	297, 298, 325, 297, 298, 326, 297, 298, 
	327, 297, 298, 328, 297, 298, 329, 297, 
	298, 330, 297, 298, 331, 297, 298, 332, 
	297, 298, 333, 297, 298, 319, 297, 298, 
	334, 297, 298, 335, 297, 298, 336, 297, 
	298, 337, 297, 298, 338, 297, 298, 339, 
	297, 298, 340, 297, 298, 341, 297, 298, 
	342, 297, 298, 343, 297, 298, 335, 297, 
	344, 298, 297, 345, 298, 297, 298, 346, 
	297, 298, 341, 297, 298, 347, 297, 298, 
	348, 297, 298, 349, 297, 298, 335, 297, 
	298, 350, 297, 351, 298, 297, 352, 298, 
	297, 298, 353, 297, 298, 354, 297, 355, 
	298, 297, 318, 298, 297, 298, 356, 297, 
	298, 357, 297, 298, 358, 297, 298, 359, 
	297, 298, 360, 297, 298, 335, 297, 298, 
	361, 297, 298, 362, 297, 298, 363, 297, 
	298, 364, 297, 298, 365, 297, 298, 366, 
	297, 298, 367, 319, 297, 298, 368, 297, 
	298, 369, 297, 298, 370, 297, 298, 371, 
	297, 298, 372, 297, 373, 298, 297, 374, 
	298, 297, 375, 298, 297, 318, 298, 297, 
	298, 335, 297, 111, 0, 376, 377, 376, 
	0, 380, 379, 381, 382, 379, 378, 0, 
	384, 385, 383, 0, 384, 383, 380, 386, 
	384, 385, 386, 383, 387, 380, 388, 389, 
	390, 391, 392, 393, 394, 395, 396, 397, 
	398, 399, 400, 401, 402, 388, 0, 403, 
	0, 404, 0, 405, 0, 406, 0, 407, 
	0, 408, 0, 410, 409, 412, 411, 413, 
	412, 414, 415, 416, 415, 417, 418, 414, 
	411, 419, 412, 411, 412, 420, 421, 411, 
	412, 422, 411, 412, 423, 411, 412, 424, 
	411, 412, 425, 411, 412, 426, 411, 412, 
	427, 411, 412, 428, 411, 412, 429, 411, 
	412, 430, 411, 412, 431, 411, 412, 432, 
	411, 412, 427, 411, 412, 433, 411, 412, 
	434, 411, 412, 435, 411, 412, 436, 411, 
	412, 437, 411, 412, 438, 411, 412, 439, 
	411, 412, 440, 411, 412, 441, 411, 412, 
	442, 411, 412, 443, 411, 412, 444, 411, 
	412, 445, 411, 412, 446, 411, 412, 447, 
	411, 448, 412, 411, 449, 412, 411, 412, 
	450, 411, 412, 451, 411, 452, 412, 411, 
	427, 412, 411, 412, 453, 411, 412, 454, 
	411, 412, 455, 411, 412, 456, 411, 412, 
	457, 411, 412, 458, 411, 412, 459, 428, 
	411, 412, 460, 411, 412, 461, 411, 412, 
	462, 411, 412, 463, 411, 412, 464, 411, 
	465, 412, 411, 466, 412, 411, 467, 412, 
	411, 427, 412, 411, 468, 0, 3, 0, 
	469, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 374, 23, 23, 24, 34, 36, 
	50, 53, 56, 58, 67, 71, 75, 151, 
	157, 307, 308, 3, 4, 314, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 12, 
	13, 14, 13, 23, 15, 16, 17, 18, 
	19, 20, 21, 22, 2, 23, 23, 24, 
	34, 36, 50, 53, 56, 58, 67, 71, 
	75, 151, 157, 307, 308, 25, 26, 27, 
	28, 27, 27, 28, 27, 29, 29, 29, 
	30, 29, 29, 29, 30, 31, 32, 33, 
	23, 33, 34, 23, 35, 37, 38, 39, 
	40, 41, 42, 43, 44, 45, 46, 47, 
	48, 49, 376, 51, 52, 52, 23, 35, 
	54, 55, 23, 54, 53, 55, 57, 50, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	68, 69, 70, 72, 73, 74, 76, 77, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	84, 85, 86, 85, 23, 94, 108, 109, 
	111, 120, 124, 128, 134, 150, 87, 88, 
	89, 90, 91, 92, 93, 22, 95, 96, 
	97, 98, 99, 100, 101, 102, 103, 104, 
	105, 106, 107, 23, 110, 108, 112, 113, 
	114, 115, 116, 117, 118, 119, 121, 122, 
	123, 125, 126, 127, 129, 130, 131, 132, 
	133, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	152, 153, 154, 155, 156, 158, 159, 160, 
	161, 162, 163, 164, 232, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	176, 175, 176, 177, 176, 23, 185, 199, 
	200, 202, 211, 215, 219, 225, 231, 178, 
	179, 180, 181, 182, 183, 184, 22, 186, 
	187, 188, 189, 190, 191, 192, 193, 194, 
	195, 196, 197, 198, 23, 201, 199, 203, 
	204, 205, 206, 207, 208, 209, 210, 212, 
	213, 214, 216, 217, 218, 220, 221, 222, 
	223, 224, 226, 227, 228, 229, 230, 233, 
	234, 233, 234, 235, 234, 23, 243, 257, 
	258, 260, 269, 273, 277, 284, 290, 306, 
	236, 237, 238, 239, 240, 241, 242, 22, 
	244, 245, 246, 247, 248, 249, 250, 251, 
	252, 253, 254, 255, 256, 23, 259, 257, 
	261, 262, 263, 264, 265, 266, 267, 268, 
	270, 271, 272, 274, 275, 276, 278, 279, 
	280, 281, 282, 283, 285, 286, 287, 288, 
	289, 291, 292, 293, 294, 295, 296, 297, 
	298, 299, 300, 301, 302, 303, 304, 305, 
	308, 309, 310, 312, 313, 311, 309, 310, 
	311, 309, 312, 2, 313, 24, 34, 36, 
	50, 53, 56, 58, 67, 71, 75, 151, 
	157, 307, 308, 315, 316, 317, 318, 319, 
	320, 321, 322, 321, 322, 323, 322, 23, 
	337, 351, 358, 324, 325, 332, 326, 327, 
	328, 329, 330, 331, 22, 333, 334, 335, 
	336, 338, 339, 340, 341, 342, 343, 344, 
	345, 346, 347, 348, 349, 350, 23, 352, 
	353, 354, 355, 356, 357, 359, 360, 361, 
	362, 363, 364, 365, 366, 367, 368, 369, 
	370, 371, 372, 373, 375, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 29, 0, 0, 54, 3, 1, 0, 
	29, 1, 29, 29, 29, 29, 29, 29, 
	29, 29, 35, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 84, 0, 81, 0, 0, 0, 0, 
	0, 0, 0, 21, 63, 31, 126, 60, 
	57, 31, 63, 57, 63, 63, 63, 63, 
	63, 63, 63, 63, 66, 0, 0, 7, 
	135, 48, 0, 102, 9, 5, 45, 130, 
	45, 0, 33, 122, 33, 33, 0, 11, 
	106, 0, 0, 114, 25, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 0, 110, 23, 
	0, 27, 118, 27, 51, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 84, 0, 72, 33, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 84, 0, 78, 33, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 84, 0, 75, 33, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 37, 37, 54, 37, 87, 0, 
	0, 39, 0, 96, 0, 93, 90, 41, 
	96, 90, 96, 96, 96, 96, 96, 96, 
	96, 96, 99, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 84, 0, 69, 
	33, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 376;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 745 "lib/gherkin/rb_lexer/tr.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
        
# line 754 "lib/gherkin/rb_lexer/tr.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 998 "lib/gherkin/rb_lexer/tr.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1037 "lib/gherkin/rb_lexer/tr.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/tr.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
