
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Nl #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/nl.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 19, 20, 21, 39, 40, 41, 
	43, 45, 50, 55, 60, 65, 69, 73, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	91, 92, 94, 99, 106, 111, 114, 115, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	132, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 175, 
	177, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 206, 207, 208, 209, 
	210, 211, 212, 213, 214, 225, 227, 229, 
	231, 233, 235, 237, 239, 241, 243, 245, 
	247, 249, 251, 253, 256, 258, 260, 262, 
	264, 266, 268, 270, 272, 274, 276, 278, 
	280, 282, 284, 286, 288, 290, 292, 294, 
	296, 298, 300, 302, 304, 306, 308, 310, 
	312, 314, 316, 318, 320, 322, 324, 326, 
	328, 330, 332, 334, 336, 338, 340, 342, 
	344, 346, 348, 350, 352, 354, 355, 356, 
	357, 358, 359, 360, 361, 362, 364, 365, 
	366, 367, 368, 369, 370, 371, 372, 373, 
	388, 390, 392, 394, 396, 398, 400, 402, 
	404, 406, 408, 410, 412, 414, 416, 418, 
	422, 424, 426, 428, 430, 432, 434, 436, 
	438, 440, 442, 444, 446, 448, 450, 452, 
	454, 456, 458, 460, 462, 464, 466, 468, 
	470, 472, 474, 476, 478, 480, 482, 484, 
	486, 488, 490, 492, 494, 496, 498, 500, 
	502, 504, 506, 508, 510, 512, 514, 516, 
	518, 520, 522, 525, 527, 529, 530, 531, 
	532, 533, 534, 535, 536, 537, 538, 539, 
	540, 541, 542, 543, 544, 551, 553, 555, 
	557, 559, 561, 563, 565, 567, 569, 571, 
	573, 575, 577, 579, 581, 585, 591, 594, 
	596, 602, 620, 622, 624, 626, 628, 630, 
	632, 634, 636, 638, 640, 642, 644, 646, 
	648, 650, 652, 654, 656, 658, 660, 662, 
	664, 666, 668, 670, 672, 674, 677, 679, 
	681, 683, 685, 687, 689, 691, 693, 694, 
	695, 696, 697, 698, 699, 700, 701, 702, 
	703, 704, 705, 720, 722, 724, 726, 728, 
	730, 732, 734, 736, 738, 740, 742, 744, 
	746, 748, 750, 753, 755, 757, 759, 761, 
	763, 765, 767, 769, 771, 773, 775, 777, 
	779, 781, 783, 785, 787, 789, 791, 793, 
	795, 797, 799, 801, 803, 805, 807, 809, 
	811, 813, 815, 817, 819, 821, 823, 825, 
	827, 829, 831, 833, 835, 838, 840, 842, 
	843
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-17, 10, 32, 34, 35, 37, 42, 64, 
	65, 68, 69, 70, 71, 77, 83, 86, 
	124, 9, 13, -69, -65, 10, 32, 34, 
	35, 37, 42, 64, 65, 68, 69, 70, 
	71, 77, 83, 86, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 10, 13, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 98, 
	99, 108, 115, 116, 114, 97, 99, 116, 
	32, 83, 99, 101, 110, 97, 114, 105, 
	111, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 68, 69, 70, 71, 77, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 32, 34, 35, 37, 42, 64, 
	65, 68, 69, 70, 71, 77, 83, 86, 
	124, 9, 13, 97, 110, 117, 110, 99, 
	116, 105, 111, 110, 97, 108, 105, 116, 
	101, 105, 116, 58, 10, 10, 10, 32, 
	35, 37, 64, 65, 70, 83, 86, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 98, 99, 
	10, 115, 10, 116, 10, 114, 10, 97, 
	10, 99, 10, 116, 10, 32, 10, 83, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 58, 
	10, 104, 10, 116, 10, 101, 10, 114, 
	10, 103, 10, 114, 10, 111, 10, 110, 
	10, 100, 10, 117, 10, 110, 10, 99, 
	10, 116, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	10, 101, 10, 105, 10, 116, 10, 111, 
	10, 111, 10, 114, 10, 98, 10, 101, 
	10, 101, 10, 108, 10, 100, 10, 101, 
	10, 110, 101, 103, 101, 118, 101, 97, 
	97, 114, 99, 116, 101, 110, 97, 114, 
	105, 111, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 68, 69, 70, 71, 
	77, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 98, 99, 108, 10, 115, 
	10, 116, 10, 114, 10, 97, 10, 99, 
	10, 116, 10, 32, 10, 83, 10, 99, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 58, 10, 104, 
	10, 116, 10, 101, 10, 114, 10, 103, 
	10, 114, 10, 111, 10, 110, 10, 100, 
	10, 115, 10, 97, 10, 110, 10, 117, 
	10, 110, 10, 99, 10, 116, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, 10, 101, 10, 105, 
	10, 116, 10, 101, 10, 103, 10, 101, 
	10, 118, 10, 101, 10, 97, 10, 97, 
	10, 114, 10, 99, 116, 10, 101, 10, 
	108, 101, 108, 111, 111, 114, 98, 101, 
	101, 108, 100, 101, 110, 58, 10, 10, 
	10, 32, 35, 70, 124, 9, 13, 10, 
	117, 10, 110, 10, 99, 10, 116, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, 10, 101, 10, 
	105, 10, 116, 10, 58, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 68, 69, 70, 71, 77, 83, 
	86, 124, 9, 13, 10, 108, 10, 115, 
	10, 97, 10, 110, 10, 117, 10, 110, 
	10, 99, 10, 116, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 116, 10, 101, 10, 105, 10, 116, 
	10, 58, 10, 101, 10, 103, 10, 101, 
	10, 118, 10, 101, 10, 97, 10, 97, 
	10, 114, 10, 99, 116, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 101, 10, 108, 104, 116, 101, 
	114, 103, 114, 111, 110, 100, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	68, 69, 70, 71, 77, 83, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 98, 
	108, 10, 115, 10, 116, 10, 114, 10, 
	97, 10, 99, 10, 116, 10, 32, 10, 
	83, 10, 99, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 111, 10, 
	58, 10, 115, 10, 97, 10, 110, 10, 
	117, 10, 110, 10, 99, 10, 116, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, 10, 101, 10, 
	105, 10, 116, 10, 101, 10, 103, 10, 
	101, 10, 118, 10, 101, 10, 97, 10, 
	97, 10, 114, 10, 99, 116, 10, 101, 
	10, 108, 115, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 17, 1, 1, 16, 1, 1, 2, 
	2, 3, 3, 3, 3, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 3, 5, 3, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	16, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 9, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 13, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 5, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 3, 2, 
	4, 16, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 13, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 1, 
	0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 19, 21, 23, 41, 43, 45, 
	48, 51, 56, 61, 66, 71, 75, 79, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 112, 
	114, 116, 119, 124, 131, 136, 140, 142, 
	144, 146, 148, 150, 152, 154, 156, 158, 
	160, 162, 164, 166, 168, 170, 172, 174, 
	176, 191, 194, 197, 200, 203, 206, 209, 
	212, 215, 218, 221, 224, 227, 230, 233, 
	236, 254, 256, 258, 260, 262, 264, 266, 
	268, 270, 272, 274, 276, 278, 280, 282, 
	284, 286, 288, 290, 292, 303, 306, 309, 
	312, 315, 318, 321, 324, 327, 330, 333, 
	336, 339, 342, 345, 349, 352, 355, 358, 
	361, 364, 367, 370, 373, 376, 379, 382, 
	385, 388, 391, 394, 397, 400, 403, 406, 
	409, 412, 415, 418, 421, 424, 427, 430, 
	433, 436, 439, 442, 445, 448, 451, 454, 
	457, 460, 463, 466, 469, 472, 475, 478, 
	481, 484, 487, 490, 493, 496, 498, 500, 
	502, 504, 506, 508, 510, 512, 515, 517, 
	519, 521, 523, 525, 527, 529, 531, 533, 
	548, 551, 554, 557, 560, 563, 566, 569, 
	572, 575, 578, 581, 584, 587, 590, 593, 
	598, 601, 604, 607, 610, 613, 616, 619, 
	622, 625, 628, 631, 634, 637, 640, 643, 
	646, 649, 652, 655, 658, 661, 664, 667, 
	670, 673, 676, 679, 682, 685, 688, 691, 
	694, 697, 700, 703, 706, 709, 712, 715, 
	718, 721, 724, 727, 730, 733, 736, 739, 
	742, 745, 748, 752, 755, 758, 760, 762, 
	764, 766, 768, 770, 772, 774, 776, 778, 
	780, 782, 784, 786, 788, 795, 798, 801, 
	804, 807, 810, 813, 816, 819, 822, 825, 
	828, 831, 834, 837, 840, 844, 850, 854, 
	857, 863, 881, 884, 887, 890, 893, 896, 
	899, 902, 905, 908, 911, 914, 917, 920, 
	923, 926, 929, 932, 935, 938, 941, 944, 
	947, 950, 953, 956, 959, 962, 966, 969, 
	972, 975, 978, 981, 984, 987, 990, 992, 
	994, 996, 998, 1000, 1002, 1004, 1006, 1008, 
	1010, 1012, 1014, 1029, 1032, 1035, 1038, 1041, 
	1044, 1047, 1050, 1053, 1056, 1059, 1062, 1065, 
	1068, 1071, 1074, 1078, 1081, 1084, 1087, 1090, 
	1093, 1096, 1099, 1102, 1105, 1108, 1111, 1114, 
	1117, 1120, 1123, 1126, 1129, 1132, 1135, 1138, 
	1141, 1144, 1147, 1150, 1153, 1156, 1159, 1162, 
	1165, 1168, 1171, 1174, 1177, 1180, 1183, 1186, 
	1189, 1192, 1195, 1198, 1201, 1205, 1208, 1211, 
	1213
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 2, 0, 18, 0, 2, 0, 3, 
	2, 4, 5, 6, 7, 8, 9, 10, 
	11, 12, 13, 14, 15, 16, 17, 2, 
	0, 19, 0, 20, 0, 22, 23, 21, 
	25, 26, 24, 29, 28, 30, 28, 27, 
	33, 32, 34, 32, 31, 33, 32, 35, 
	32, 31, 33, 32, 36, 32, 31, 38, 
	37, 37, 0, 3, 39, 39, 0, 41, 
	42, 40, 3, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	57, 0, 0, 58, 60, 61, 59, 0, 
	0, 0, 0, 62, 63, 64, 63, 63, 
	66, 65, 62, 3, 67, 8, 67, 0, 
	68, 69, 70, 0, 71, 0, 72, 0, 
	73, 0, 74, 0, 75, 0, 76, 0, 
	77, 0, 78, 0, 79, 0, 80, 0, 
	81, 0, 82, 0, 83, 0, 84, 0, 
	85, 0, 86, 0, 88, 87, 90, 89, 
	90, 91, 92, 93, 94, 92, 95, 96, 
	97, 98, 99, 100, 101, 91, 89, 90, 
	102, 89, 90, 103, 89, 90, 104, 89, 
	90, 105, 89, 90, 106, 89, 90, 107, 
	89, 90, 108, 89, 90, 109, 89, 90, 
	110, 89, 90, 111, 89, 90, 112, 89, 
	90, 113, 89, 90, 114, 89, 90, 115, 
	89, 90, 116, 89, 118, 117, 119, 120, 
	121, 122, 123, 124, 125, 126, 127, 128, 
	129, 130, 131, 132, 117, 0, 133, 0, 
	134, 0, 135, 0, 136, 0, 137, 0, 
	138, 0, 139, 0, 140, 0, 141, 0, 
	142, 0, 143, 0, 144, 0, 145, 0, 
	146, 0, 147, 0, 148, 0, 149, 0, 
	151, 150, 153, 152, 153, 154, 155, 156, 
	155, 157, 158, 159, 160, 154, 152, 153, 
	161, 152, 153, 162, 152, 153, 163, 152, 
	153, 164, 152, 153, 165, 152, 153, 166, 
	152, 153, 167, 152, 153, 168, 152, 153, 
	169, 152, 153, 170, 152, 153, 171, 152, 
	153, 172, 152, 153, 173, 152, 153, 174, 
	152, 153, 175, 176, 152, 153, 177, 152, 
	153, 178, 152, 153, 179, 152, 153, 180, 
	152, 153, 181, 152, 153, 182, 152, 153, 
	183, 152, 153, 184, 152, 153, 185, 152, 
	153, 186, 152, 153, 187, 152, 153, 188, 
	152, 153, 189, 152, 153, 190, 152, 153, 
	191, 152, 153, 192, 152, 153, 193, 152, 
	153, 194, 152, 153, 195, 152, 153, 196, 
	152, 153, 197, 152, 153, 198, 152, 153, 
	199, 152, 153, 200, 152, 153, 191, 152, 
	153, 201, 152, 153, 202, 152, 153, 203, 
	152, 153, 204, 152, 153, 205, 152, 153, 
	206, 152, 153, 207, 152, 153, 208, 152, 
	153, 209, 152, 153, 210, 152, 153, 211, 
	152, 153, 212, 152, 153, 213, 152, 153, 
	191, 152, 153, 214, 152, 153, 215, 152, 
	153, 216, 152, 153, 217, 152, 153, 218, 
	152, 153, 219, 152, 153, 220, 152, 153, 
	221, 152, 153, 222, 152, 153, 191, 152, 
	223, 0, 224, 0, 225, 0, 226, 0, 
	133, 0, 227, 0, 228, 0, 134, 0, 
	229, 230, 0, 231, 0, 232, 0, 233, 
	0, 234, 0, 235, 0, 236, 0, 237, 
	0, 239, 238, 241, 240, 241, 242, 243, 
	244, 245, 243, 246, 247, 248, 249, 250, 
	251, 252, 242, 240, 241, 253, 240, 241, 
	254, 240, 241, 255, 240, 241, 256, 240, 
	241, 257, 240, 241, 258, 240, 241, 259, 
	240, 241, 260, 240, 241, 261, 240, 241, 
	262, 240, 241, 263, 240, 241, 264, 240, 
	241, 265, 240, 241, 266, 240, 241, 267, 
	240, 241, 268, 269, 270, 240, 241, 271, 
	240, 241, 272, 240, 241, 273, 240, 241, 
	274, 240, 241, 275, 240, 241, 276, 240, 
	241, 277, 240, 241, 278, 240, 241, 279, 
	240, 241, 280, 240, 241, 281, 240, 241, 
	282, 240, 241, 283, 240, 241, 284, 240, 
	241, 285, 240, 241, 267, 240, 241, 286, 
	240, 241, 287, 240, 241, 288, 240, 241, 
	289, 240, 241, 290, 240, 241, 291, 240, 
	241, 292, 240, 241, 293, 240, 241, 285, 
	240, 241, 294, 240, 241, 295, 240, 241, 
	294, 240, 241, 296, 240, 241, 297, 240, 
	241, 298, 240, 241, 299, 240, 241, 300, 
	240, 241, 301, 240, 241, 302, 240, 241, 
	303, 240, 241, 304, 240, 241, 305, 240, 
	241, 306, 240, 241, 307, 240, 241, 308, 
	240, 241, 285, 240, 241, 309, 240, 241, 
	310, 240, 241, 311, 240, 241, 312, 240, 
	241, 295, 240, 241, 313, 240, 241, 314, 
	240, 241, 294, 240, 241, 279, 315, 240, 
	241, 316, 240, 241, 294, 240, 317, 0, 
	134, 0, 318, 0, 319, 0, 320, 0, 
	321, 0, 322, 0, 323, 0, 324, 0, 
	325, 0, 326, 0, 327, 0, 328, 0, 
	330, 329, 332, 331, 332, 333, 334, 335, 
	334, 333, 331, 332, 336, 331, 332, 337, 
	331, 332, 338, 331, 332, 339, 331, 332, 
	340, 331, 332, 341, 331, 332, 342, 331, 
	332, 343, 331, 332, 344, 331, 332, 345, 
	331, 332, 346, 331, 332, 347, 331, 332, 
	348, 331, 332, 349, 331, 332, 350, 331, 
	351, 352, 351, 0, 355, 354, 356, 357, 
	354, 353, 0, 359, 360, 358, 0, 359, 
	358, 355, 361, 359, 360, 361, 358, 355, 
	362, 363, 364, 365, 366, 367, 368, 369, 
	370, 371, 372, 373, 374, 375, 376, 362, 
	0, 90, 377, 89, 90, 378, 89, 90, 
	379, 89, 90, 378, 89, 90, 380, 89, 
	90, 381, 89, 90, 382, 89, 90, 383, 
	89, 90, 384, 89, 90, 385, 89, 90, 
	386, 89, 90, 387, 89, 90, 388, 89, 
	90, 389, 89, 90, 390, 89, 90, 391, 
	89, 90, 392, 89, 90, 393, 89, 90, 
	116, 89, 90, 394, 89, 90, 395, 89, 
	90, 396, 89, 90, 397, 89, 90, 379, 
	89, 90, 398, 89, 90, 399, 89, 90, 
	378, 89, 90, 400, 401, 89, 90, 402, 
	89, 90, 403, 89, 90, 404, 89, 90, 
	405, 89, 90, 406, 89, 90, 393, 89, 
	90, 407, 89, 90, 378, 89, 408, 0, 
	409, 0, 410, 0, 411, 0, 412, 0, 
	413, 0, 414, 0, 415, 0, 416, 0, 
	417, 0, 419, 418, 421, 420, 421, 422, 
	423, 424, 425, 423, 426, 427, 428, 429, 
	430, 431, 432, 422, 420, 421, 433, 420, 
	421, 434, 420, 421, 435, 420, 421, 436, 
	420, 421, 437, 420, 421, 438, 420, 421, 
	439, 420, 421, 440, 420, 421, 441, 420, 
	421, 442, 420, 421, 443, 420, 421, 444, 
	420, 421, 445, 420, 421, 446, 420, 421, 
	447, 420, 421, 448, 449, 420, 421, 450, 
	420, 421, 451, 420, 421, 452, 420, 421, 
	453, 420, 421, 454, 420, 421, 455, 420, 
	421, 456, 420, 421, 457, 420, 421, 458, 
	420, 421, 459, 420, 421, 460, 420, 421, 
	461, 420, 421, 462, 420, 421, 463, 420, 
	421, 464, 420, 421, 447, 420, 421, 465, 
	420, 421, 466, 420, 421, 465, 420, 421, 
	467, 420, 421, 468, 420, 421, 469, 420, 
	421, 470, 420, 421, 471, 420, 421, 472, 
	420, 421, 473, 420, 421, 474, 420, 421, 
	475, 420, 421, 476, 420, 421, 477, 420, 
	421, 478, 420, 421, 479, 420, 421, 464, 
	420, 421, 480, 420, 421, 481, 420, 421, 
	482, 420, 421, 483, 420, 421, 466, 420, 
	421, 484, 420, 421, 485, 420, 421, 465, 
	420, 421, 458, 486, 420, 421, 487, 420, 
	421, 465, 420, 134, 0, 488, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 4, 4, 5, 15, 17, 31, 
	34, 37, 73, 74, 75, 157, 162, 165, 
	247, 276, 3, 6, 7, 8, 9, 8, 
	8, 9, 8, 10, 10, 10, 11, 10, 
	10, 10, 11, 12, 13, 14, 4, 14, 
	15, 4, 16, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 29, 30, 
	392, 32, 33, 33, 4, 16, 35, 36, 
	4, 35, 34, 36, 38, 318, 391, 39, 
	40, 41, 42, 43, 44, 45, 46, 47, 
	48, 49, 50, 51, 52, 53, 54, 55, 
	56, 55, 56, 56, 4, 57, 71, 282, 
	284, 285, 286, 301, 306, 309, 58, 59, 
	60, 61, 62, 63, 64, 65, 66, 67, 
	68, 69, 70, 4, 72, 4, 4, 5, 
	15, 17, 31, 34, 37, 73, 74, 75, 
	157, 162, 165, 247, 276, 74, 31, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	91, 92, 92, 4, 93, 107, 133, 116, 
	147, 94, 95, 96, 97, 98, 99, 100, 
	101, 102, 103, 104, 105, 106, 4, 108, 
	124, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	72, 125, 126, 127, 128, 129, 130, 131, 
	132, 134, 135, 136, 137, 138, 139, 140, 
	141, 142, 143, 144, 145, 146, 148, 149, 
	150, 151, 152, 153, 154, 155, 156, 158, 
	159, 160, 161, 163, 164, 166, 245, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	174, 175, 175, 4, 176, 190, 191, 218, 
	219, 220, 234, 239, 242, 177, 178, 179, 
	180, 181, 182, 183, 184, 185, 186, 187, 
	188, 189, 4, 72, 192, 208, 217, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 206, 207, 209, 210, 
	211, 212, 213, 214, 215, 216, 190, 219, 
	221, 222, 223, 224, 225, 226, 227, 228, 
	229, 230, 231, 232, 233, 235, 236, 237, 
	238, 240, 241, 243, 244, 246, 248, 249, 
	250, 251, 252, 253, 254, 255, 256, 257, 
	258, 259, 260, 259, 260, 260, 4, 261, 
	262, 263, 264, 265, 266, 267, 268, 269, 
	270, 271, 272, 273, 274, 275, 72, 276, 
	277, 278, 280, 281, 279, 277, 278, 279, 
	277, 280, 281, 5, 15, 17, 31, 34, 
	37, 73, 74, 75, 157, 162, 165, 247, 
	276, 283, 71, 285, 287, 288, 289, 290, 
	291, 292, 293, 294, 295, 296, 297, 298, 
	299, 300, 302, 303, 304, 305, 307, 308, 
	310, 316, 311, 312, 313, 314, 315, 317, 
	319, 320, 321, 322, 323, 324, 325, 326, 
	327, 328, 329, 330, 329, 330, 330, 4, 
	331, 345, 346, 364, 365, 366, 380, 385, 
	388, 332, 333, 334, 335, 336, 337, 338, 
	339, 340, 341, 342, 343, 344, 4, 72, 
	347, 363, 348, 349, 350, 351, 352, 353, 
	354, 355, 356, 357, 358, 359, 360, 361, 
	362, 345, 365, 367, 368, 369, 370, 371, 
	372, 373, 374, 375, 376, 377, 378, 379, 
	381, 382, 383, 384, 386, 387, 389, 390, 
	0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 0, 0, 54, 3, 1, 0, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 35, 0, 0, 0, 7, 135, 48, 
	0, 102, 9, 5, 45, 130, 45, 0, 
	33, 122, 33, 33, 0, 11, 106, 0, 
	0, 114, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 19, 31, 126, 60, 
	57, 31, 63, 57, 63, 63, 63, 63, 
	63, 63, 63, 63, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 0, 69, 33, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 140, 
	0, 54, 0, 75, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 81, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 0, 93, 90, 41, 96, 90, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	99, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 72, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 392;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 768 "lib/gherkin/rb_lexer/nl.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
        
# line 777 "lib/gherkin/rb_lexer/nl.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1021 "lib/gherkin/rb_lexer/nl.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1060 "lib/gherkin/rb_lexer/nl.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/nl.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
