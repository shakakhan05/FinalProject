
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class En_scouse #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/en_scouse.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 20, 21, 22, 41, 42, 43, 
	45, 47, 52, 57, 62, 67, 71, 75, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 96, 101, 108, 113, 114, 115, 
	116, 119, 120, 121, 122, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 170, 172, 174, 
	176, 178, 180, 182, 184, 186, 188, 190, 
	192, 194, 196, 198, 200, 219, 220, 221, 
	222, 223, 224, 225, 226, 227, 228, 229, 
	236, 238, 240, 242, 244, 246, 248, 250, 
	251, 252, 253, 254, 255, 256, 257, 258, 
	259, 271, 273, 275, 277, 279, 281, 283, 
	285, 287, 289, 291, 293, 295, 297, 299, 
	301, 303, 305, 307, 309, 311, 313, 315, 
	317, 319, 321, 323, 325, 327, 329, 331, 
	333, 335, 337, 339, 341, 343, 345, 347, 
	349, 351, 353, 355, 357, 359, 361, 363, 
	365, 367, 369, 371, 373, 375, 377, 379, 
	381, 383, 385, 387, 389, 391, 393, 395, 
	397, 399, 401, 403, 405, 407, 409, 411, 
	413, 415, 417, 418, 419, 420, 421, 422, 
	423, 424, 425, 426, 427, 428, 429, 430, 
	431, 432, 433, 434, 435, 436, 437, 438, 
	439, 440, 456, 458, 460, 462, 464, 466, 
	468, 470, 472, 474, 476, 478, 480, 482, 
	484, 486, 488, 490, 492, 496, 498, 500, 
	502, 504, 506, 508, 510, 512, 514, 516, 
	518, 520, 522, 524, 526, 528, 530, 532, 
	534, 536, 538, 540, 542, 544, 546, 548, 
	550, 552, 554, 556, 558, 560, 562, 564, 
	566, 568, 570, 572, 574, 576, 578, 580, 
	582, 584, 586, 588, 590, 592, 594, 596, 
	598, 600, 602, 604, 606, 608, 610, 612, 
	614, 617, 619, 621, 623, 625, 627, 629, 
	631, 633, 635, 637, 639, 641, 643, 645, 
	647, 649, 651, 653, 656, 658, 660, 662, 
	664, 666, 668, 670, 672, 674, 676, 678, 
	680, 682, 684, 686, 688, 690, 692, 694, 
	696, 698, 699, 700, 701, 702, 703, 704, 
	705, 706, 707, 708, 709, 710, 711, 712, 
	728, 730, 732, 734, 736, 738, 740, 742, 
	744, 746, 748, 750, 752, 754, 756, 758, 
	760, 762, 764, 767, 769, 771, 773, 775, 
	777, 779, 781, 783, 785, 787, 789, 791, 
	793, 795, 797, 799, 801, 803, 805, 807, 
	809, 811, 813, 815, 817, 819, 821, 823, 
	825, 827, 829, 831, 833, 835, 837, 839, 
	841, 843, 845, 847, 849, 851, 853, 855, 
	857, 859, 861, 863, 865, 867, 870, 872, 
	874, 876, 878, 880, 882, 884, 886, 888, 
	890, 892, 894, 896, 898, 900, 902, 904, 
	906, 908, 910, 911, 912, 913, 914, 915, 
	916, 917, 918, 919, 920, 922, 923, 924, 
	925, 926, 927, 928, 929, 930, 931, 932, 
	933, 934, 935, 936, 937, 938, 939, 940, 
	941, 942, 946, 952, 955, 957, 963, 982, 
	984, 986, 988, 991, 993, 995, 997, 999, 
	1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 
	1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 
	1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 
	1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 
	1065, 1067, 1069, 1071, 1074, 1076, 1078, 1080, 
	1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 
	1098, 1100, 1102, 1104, 1106, 1108, 1110, 1113, 
	1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 
	1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 
	1147, 1149, 1151, 1153
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-17, 10, 32, 34, 35, 37, 42, 64, 
	65, 66, 68, 69, 70, 71, 84, 87, 
	89, 124, 9, 13, -69, -65, 10, 32, 
	34, 35, 37, 42, 64, 65, 66, 68, 
	69, 70, 71, 84, 87, 89, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 10, 13, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 110, 117, 104, 101, 105, 117, 110, 
	32, 121, 111, 117, 115, 101, 32, 103, 
	111, 116, 116, 97, 115, 32, 105, 115, 
	32, 119, 104, 97, 116, 32, 119, 101, 
	110, 116, 32, 100, 111, 119, 110, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 66, 68, 70, 71, 84, 87, 89, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 68, 69, 70, 71, 84, 87, 89, 
	124, 9, 13, 120, 97, 109, 112, 108, 
	101, 115, 58, 10, 10, 10, 32, 35, 
	70, 124, 9, 13, 10, 101, 10, 97, 
	10, 116, 10, 117, 10, 114, 10, 101, 
	10, 58, 101, 97, 116, 117, 114, 101, 
	58, 10, 10, 10, 32, 35, 37, 64, 
	68, 69, 70, 84, 87, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 105, 10, 115, 10, 
	32, 10, 105, 10, 115, 10, 32, 10, 
	119, 10, 104, 10, 97, 10, 116, 10, 
	32, 10, 119, 10, 101, 10, 110, 10, 
	116, 10, 32, 10, 100, 10, 111, 10, 
	119, 10, 110, 10, 58, 10, 120, 10, 
	97, 10, 109, 10, 112, 10, 108, 10, 
	101, 10, 115, 10, 101, 10, 97, 10, 
	116, 10, 117, 10, 114, 10, 101, 10, 
	104, 10, 101, 10, 32, 10, 116, 10, 
	104, 10, 105, 10, 110, 10, 103, 10, 
	32, 10, 111, 10, 102, 10, 32, 10, 
	105, 10, 116, 10, 32, 10, 105, 10, 
	104, 10, 97, 10, 114, 10, 114, 10, 
	105, 10, 109, 10, 101, 10, 97, 10, 
	110, 105, 118, 117, 104, 101, 32, 116, 
	104, 105, 110, 103, 32, 111, 102, 32, 
	105, 116, 32, 105, 115, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 66, 
	68, 70, 71, 84, 87, 89, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 110, 
	10, 117, 10, 104, 10, 101, 105, 117, 
	10, 110, 10, 32, 10, 121, 10, 111, 
	10, 117, 10, 115, 10, 101, 10, 32, 
	10, 103, 10, 111, 10, 116, 10, 116, 
	10, 97, 10, 115, 10, 32, 10, 105, 
	10, 115, 10, 32, 10, 119, 10, 104, 
	10, 97, 10, 116, 10, 32, 10, 119, 
	10, 101, 10, 110, 10, 116, 10, 32, 
	10, 100, 10, 111, 10, 119, 10, 110, 
	10, 58, 10, 101, 10, 97, 10, 116, 
	10, 117, 10, 114, 10, 101, 10, 105, 
	10, 118, 10, 117, 10, 104, 10, 101, 
	10, 32, 10, 116, 10, 104, 10, 105, 
	10, 110, 10, 103, 10, 32, 10, 111, 
	10, 102, 10, 32, 10, 105, 10, 116, 
	10, 32, 10, 105, 10, 115, 10, 104, 
	117, 10, 97, 10, 114, 10, 114, 10, 
	105, 10, 109, 10, 101, 10, 97, 10, 
	110, 10, 111, 10, 117, 10, 115, 10, 
	101, 10, 32, 10, 107, 10, 110, 10, 
	111, 10, 119, 10, 32, 10, 108, 119, 
	10, 105, 10, 107, 10, 101, 10, 32, 
	10, 119, 10, 104, 10, 101, 10, 104, 
	10, 101, 10, 110, 10, 32, 10, 121, 
	10, 111, 10, 117, 10, 115, 10, 101, 
	10, 32, 10, 103, 10, 111, 10, 116, 
	104, 117, 97, 114, 114, 105, 109, 101, 
	97, 110, 32, 105, 115, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 66, 
	68, 70, 71, 84, 87, 89, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 110, 
	10, 117, 10, 104, 10, 101, 117, 10, 
	110, 10, 32, 10, 121, 10, 111, 10, 
	117, 10, 115, 10, 101, 10, 32, 10, 
	103, 10, 111, 10, 116, 10, 116, 10, 
	97, 10, 101, 10, 97, 10, 116, 10, 
	117, 10, 114, 10, 101, 10, 58, 10, 
	105, 10, 118, 10, 117, 10, 104, 10, 
	101, 10, 32, 10, 116, 10, 104, 10, 
	105, 10, 110, 10, 103, 10, 32, 10, 
	111, 10, 102, 10, 32, 10, 105, 10, 
	116, 10, 32, 10, 105, 10, 115, 10, 
	111, 10, 117, 10, 115, 10, 101, 10, 
	32, 10, 107, 10, 110, 10, 111, 10, 
	119, 10, 32, 10, 108, 119, 10, 105, 
	10, 107, 10, 101, 10, 32, 10, 119, 
	10, 104, 10, 101, 10, 104, 10, 101, 
	10, 110, 10, 32, 10, 121, 10, 111, 
	10, 117, 10, 115, 10, 101, 10, 32, 
	10, 103, 10, 111, 10, 116, 111, 117, 
	115, 101, 32, 107, 110, 111, 119, 32, 
	108, 119, 105, 107, 101, 32, 119, 104, 
	101, 104, 101, 110, 32, 121, 111, 117, 
	115, 101, 32, 103, 111, 116, 32, 124, 
	9, 13, 10, 32, 92, 124, 9, 13, 
	10, 92, 124, 10, 92, 10, 32, 92, 
	124, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 68, 69, 70, 71, 
	84, 87, 89, 124, 9, 13, 10, 110, 
	10, 117, 10, 104, 10, 101, 117, 10, 
	110, 10, 32, 10, 121, 10, 111, 10, 
	117, 10, 115, 10, 101, 10, 32, 10, 
	103, 10, 111, 10, 116, 10, 116, 10, 
	97, 10, 101, 10, 97, 10, 116, 10, 
	117, 10, 114, 10, 101, 10, 58, 10, 
	105, 10, 118, 10, 117, 10, 104, 10, 
	101, 10, 32, 10, 116, 10, 104, 10, 
	105, 10, 110, 10, 103, 10, 32, 10, 
	111, 10, 102, 10, 32, 10, 105, 10, 
	116, 10, 32, 10, 105, 10, 115, 10, 
	104, 117, 10, 97, 10, 114, 10, 114, 
	10, 105, 10, 109, 10, 101, 10, 97, 
	10, 110, 10, 111, 10, 117, 10, 115, 
	10, 101, 10, 32, 10, 107, 10, 110, 
	10, 111, 10, 119, 10, 32, 10, 108, 
	119, 10, 105, 10, 107, 10, 101, 10, 
	32, 10, 119, 10, 104, 10, 101, 10, 
	104, 10, 101, 10, 110, 10, 32, 10, 
	121, 10, 111, 10, 117, 10, 115, 10, 
	101, 10, 32, 10, 103, 10, 111, 10, 
	116, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 18, 1, 1, 17, 1, 1, 2, 
	2, 3, 3, 3, 3, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 3, 5, 3, 1, 1, 1, 
	3, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 14, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 17, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 5, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	10, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 14, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 4, 3, 2, 4, 17, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 20, 22, 24, 43, 45, 47, 
	50, 53, 58, 63, 68, 73, 77, 81, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 114, 
	116, 118, 121, 126, 133, 138, 140, 142, 
	144, 148, 150, 152, 154, 156, 158, 160, 
	162, 164, 166, 168, 170, 172, 174, 176, 
	178, 180, 182, 184, 186, 188, 190, 192, 
	194, 196, 198, 200, 202, 204, 206, 208, 
	210, 212, 214, 216, 218, 234, 237, 240, 
	243, 246, 249, 252, 255, 258, 261, 264, 
	267, 270, 273, 276, 279, 298, 300, 302, 
	304, 306, 308, 310, 312, 314, 316, 318, 
	325, 328, 331, 334, 337, 340, 343, 346, 
	348, 350, 352, 354, 356, 358, 360, 362, 
	364, 376, 379, 382, 385, 388, 391, 394, 
	397, 400, 403, 406, 409, 412, 415, 418, 
	421, 424, 427, 430, 433, 436, 439, 442, 
	445, 448, 451, 454, 457, 460, 463, 466, 
	469, 472, 475, 478, 481, 484, 487, 490, 
	493, 496, 499, 502, 505, 508, 511, 514, 
	517, 520, 523, 526, 529, 532, 535, 538, 
	541, 544, 547, 550, 553, 556, 559, 562, 
	565, 568, 571, 574, 577, 580, 583, 586, 
	589, 592, 595, 597, 599, 601, 603, 605, 
	607, 609, 611, 613, 615, 617, 619, 621, 
	623, 625, 627, 629, 631, 633, 635, 637, 
	639, 641, 657, 660, 663, 666, 669, 672, 
	675, 678, 681, 684, 687, 690, 693, 696, 
	699, 702, 705, 708, 711, 716, 719, 722, 
	725, 728, 731, 734, 737, 740, 743, 746, 
	749, 752, 755, 758, 761, 764, 767, 770, 
	773, 776, 779, 782, 785, 788, 791, 794, 
	797, 800, 803, 806, 809, 812, 815, 818, 
	821, 824, 827, 830, 833, 836, 839, 842, 
	845, 848, 851, 854, 857, 860, 863, 866, 
	869, 872, 875, 878, 881, 884, 887, 890, 
	893, 897, 900, 903, 906, 909, 912, 915, 
	918, 921, 924, 927, 930, 933, 936, 939, 
	942, 945, 948, 951, 955, 958, 961, 964, 
	967, 970, 973, 976, 979, 982, 985, 988, 
	991, 994, 997, 1000, 1003, 1006, 1009, 1012, 
	1015, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 
	1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 
	1062, 1065, 1068, 1071, 1074, 1077, 1080, 1083, 
	1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 
	1110, 1113, 1116, 1120, 1123, 1126, 1129, 1132, 
	1135, 1138, 1141, 1144, 1147, 1150, 1153, 1156, 
	1159, 1162, 1165, 1168, 1171, 1174, 1177, 1180, 
	1183, 1186, 1189, 1192, 1195, 1198, 1201, 1204, 
	1207, 1210, 1213, 1216, 1219, 1222, 1225, 1228, 
	1231, 1234, 1237, 1240, 1243, 1246, 1249, 1252, 
	1255, 1258, 1261, 1264, 1267, 1270, 1274, 1277, 
	1280, 1283, 1286, 1289, 1292, 1295, 1298, 1301, 
	1304, 1307, 1310, 1313, 1316, 1319, 1322, 1325, 
	1328, 1331, 1334, 1336, 1338, 1340, 1342, 1344, 
	1346, 1348, 1350, 1352, 1354, 1357, 1359, 1361, 
	1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 
	1379, 1381, 1383, 1385, 1387, 1389, 1391, 1393, 
	1395, 1397, 1401, 1407, 1411, 1414, 1420, 1439, 
	1442, 1445, 1448, 1452, 1455, 1458, 1461, 1464, 
	1467, 1470, 1473, 1476, 1479, 1482, 1485, 1488, 
	1491, 1494, 1497, 1500, 1503, 1506, 1509, 1512, 
	1515, 1518, 1521, 1524, 1527, 1530, 1533, 1536, 
	1539, 1542, 1545, 1548, 1551, 1554, 1557, 1560, 
	1563, 1566, 1569, 1572, 1576, 1579, 1582, 1585, 
	1588, 1591, 1594, 1597, 1600, 1603, 1606, 1609, 
	1612, 1615, 1618, 1621, 1624, 1627, 1630, 1634, 
	1637, 1640, 1643, 1646, 1649, 1652, 1655, 1658, 
	1661, 1664, 1667, 1670, 1673, 1676, 1679, 1682, 
	1685, 1688, 1691, 1694
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 2, 0, 19, 0, 2, 0, 
	3, 2, 4, 5, 6, 7, 8, 9, 
	10, 11, 12, 13, 14, 15, 16, 17, 
	18, 2, 0, 20, 0, 21, 0, 23, 
	24, 22, 26, 27, 25, 30, 29, 31, 
	29, 28, 34, 33, 35, 33, 32, 34, 
	33, 36, 33, 32, 34, 33, 37, 33, 
	32, 39, 38, 38, 0, 3, 40, 40, 
	0, 42, 43, 41, 3, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	57, 0, 58, 0, 0, 59, 61, 62, 
	60, 0, 0, 0, 0, 63, 64, 65, 
	64, 64, 67, 66, 63, 3, 68, 8, 
	68, 0, 69, 0, 70, 0, 69, 0, 
	71, 72, 73, 0, 74, 0, 75, 0, 
	76, 0, 77, 0, 78, 0, 79, 0, 
	80, 0, 81, 0, 82, 0, 83, 0, 
	84, 0, 85, 0, 69, 0, 86, 0, 
	87, 0, 88, 0, 89, 0, 90, 0, 
	91, 0, 92, 0, 93, 0, 94, 0, 
	95, 0, 96, 0, 97, 0, 98, 0, 
	99, 0, 100, 0, 101, 0, 102, 0, 
	103, 0, 104, 0, 105, 0, 107, 106, 
	109, 108, 109, 110, 111, 112, 113, 111, 
	114, 115, 116, 117, 118, 119, 120, 121, 
	110, 108, 109, 122, 108, 109, 123, 108, 
	109, 124, 108, 109, 125, 108, 109, 126, 
	108, 109, 127, 108, 109, 128, 108, 109, 
	129, 108, 109, 130, 108, 109, 131, 108, 
	109, 132, 108, 109, 133, 108, 109, 134, 
	108, 109, 135, 108, 109, 136, 108, 138, 
	137, 139, 140, 141, 142, 143, 144, 145, 
	146, 147, 148, 149, 150, 151, 152, 153, 
	137, 0, 154, 0, 155, 0, 156, 0, 
	157, 0, 158, 0, 159, 0, 160, 0, 
	161, 0, 163, 162, 165, 164, 165, 166, 
	167, 168, 167, 166, 164, 165, 169, 164, 
	165, 170, 164, 165, 171, 164, 165, 172, 
	164, 165, 173, 164, 165, 174, 164, 165, 
	175, 164, 176, 0, 177, 0, 178, 0, 
	179, 0, 180, 0, 181, 0, 182, 0, 
	184, 183, 186, 185, 186, 187, 188, 189, 
	188, 190, 191, 192, 193, 194, 187, 185, 
	186, 195, 185, 186, 196, 185, 186, 197, 
	185, 186, 198, 185, 186, 199, 185, 186, 
	200, 185, 186, 201, 185, 186, 202, 185, 
	186, 203, 185, 186, 204, 185, 186, 205, 
	185, 186, 206, 185, 186, 207, 185, 186, 
	208, 185, 186, 209, 185, 186, 210, 185, 
	186, 211, 185, 186, 212, 185, 186, 213, 
	185, 186, 214, 185, 186, 215, 185, 186, 
	216, 185, 186, 217, 185, 186, 218, 185, 
	186, 219, 185, 186, 220, 185, 186, 221, 
	185, 186, 222, 185, 186, 223, 185, 186, 
	224, 185, 186, 225, 185, 186, 226, 185, 
	186, 227, 185, 186, 228, 185, 186, 229, 
	185, 186, 230, 185, 186, 231, 185, 186, 
	232, 185, 186, 233, 185, 186, 234, 185, 
	186, 235, 185, 186, 228, 185, 186, 236, 
	185, 186, 237, 185, 186, 238, 185, 186, 
	239, 185, 186, 240, 185, 186, 228, 185, 
	186, 241, 185, 186, 242, 185, 186, 243, 
	185, 186, 244, 185, 186, 245, 185, 186, 
	246, 185, 186, 247, 185, 186, 248, 185, 
	186, 249, 185, 186, 250, 185, 186, 251, 
	185, 186, 252, 185, 186, 253, 185, 186, 
	254, 185, 186, 255, 185, 186, 235, 185, 
	186, 256, 185, 186, 257, 185, 186, 258, 
	185, 186, 259, 185, 186, 260, 185, 186, 
	261, 185, 186, 262, 185, 186, 263, 185, 
	186, 254, 185, 264, 0, 265, 0, 73, 
	0, 266, 0, 267, 0, 268, 0, 269, 
	0, 270, 0, 271, 0, 272, 0, 273, 
	0, 274, 0, 275, 0, 276, 0, 277, 
	0, 278, 0, 279, 0, 280, 0, 281, 
	0, 282, 0, 283, 0, 285, 284, 287, 
	286, 287, 288, 289, 290, 291, 289, 292, 
	293, 294, 295, 296, 297, 298, 299, 288, 
	286, 287, 300, 286, 287, 301, 286, 287, 
	302, 286, 287, 303, 286, 287, 304, 286, 
	287, 305, 286, 287, 306, 286, 287, 307, 
	286, 287, 308, 286, 287, 309, 286, 287, 
	310, 286, 287, 311, 286, 287, 312, 286, 
	287, 313, 286, 287, 314, 286, 287, 315, 
	286, 287, 316, 286, 287, 315, 286, 287, 
	317, 318, 319, 286, 287, 320, 286, 287, 
	321, 286, 287, 322, 286, 287, 323, 286, 
	287, 324, 286, 287, 325, 286, 287, 326, 
	286, 287, 327, 286, 287, 328, 286, 287, 
	329, 286, 287, 330, 286, 287, 331, 286, 
	287, 315, 286, 287, 332, 286, 287, 333, 
	286, 287, 334, 286, 287, 335, 286, 287, 
	336, 286, 287, 337, 286, 287, 338, 286, 
	287, 339, 286, 287, 340, 286, 287, 341, 
	286, 287, 342, 286, 287, 343, 286, 287, 
	344, 286, 287, 345, 286, 287, 346, 286, 
	287, 347, 286, 287, 348, 286, 287, 349, 
	286, 287, 350, 286, 287, 314, 286, 287, 
	351, 286, 287, 352, 286, 287, 353, 286, 
	287, 354, 286, 287, 355, 286, 287, 350, 
	286, 287, 356, 286, 287, 357, 286, 287, 
	319, 286, 287, 358, 286, 287, 359, 286, 
	287, 360, 286, 287, 361, 286, 287, 362, 
	286, 287, 363, 286, 287, 364, 286, 287, 
	365, 286, 287, 366, 286, 287, 367, 286, 
	287, 368, 286, 287, 369, 286, 287, 370, 
	286, 287, 371, 286, 287, 372, 286, 287, 
	373, 286, 287, 350, 286, 287, 374, 319, 
	286, 287, 375, 286, 287, 376, 286, 287, 
	377, 286, 287, 378, 286, 287, 379, 286, 
	287, 380, 286, 287, 381, 286, 287, 371, 
	286, 287, 382, 286, 287, 383, 286, 287, 
	384, 286, 287, 385, 286, 287, 386, 286, 
	287, 387, 286, 287, 388, 286, 287, 389, 
	286, 287, 390, 286, 287, 391, 286, 287, 
	392, 393, 286, 287, 394, 286, 287, 395, 
	286, 287, 396, 286, 287, 397, 286, 287, 
	398, 286, 287, 399, 286, 287, 319, 286, 
	287, 400, 286, 287, 401, 286, 287, 402, 
	286, 287, 403, 286, 287, 404, 286, 287, 
	405, 286, 287, 406, 286, 287, 407, 286, 
	287, 408, 286, 287, 409, 286, 287, 410, 
	286, 287, 411, 286, 287, 315, 286, 412, 
	73, 0, 413, 0, 414, 0, 415, 0, 
	416, 0, 417, 0, 418, 0, 419, 0, 
	420, 0, 421, 0, 422, 0, 423, 0, 
	424, 0, 426, 425, 428, 427, 428, 429, 
	430, 431, 432, 430, 433, 434, 435, 436, 
	437, 438, 439, 440, 429, 427, 428, 441, 
	427, 428, 442, 427, 428, 443, 427, 428, 
	444, 427, 428, 445, 427, 428, 446, 427, 
	428, 447, 427, 428, 448, 427, 428, 449, 
	427, 428, 450, 427, 428, 451, 427, 428, 
	452, 427, 428, 453, 427, 428, 454, 427, 
	428, 455, 427, 428, 456, 427, 428, 457, 
	427, 428, 456, 427, 428, 458, 459, 427, 
	428, 460, 427, 428, 461, 427, 428, 462, 
	427, 428, 463, 427, 428, 464, 427, 428, 
	465, 427, 428, 466, 427, 428, 467, 427, 
	428, 468, 427, 428, 469, 427, 428, 470, 
	427, 428, 471, 427, 428, 456, 427, 428, 
	472, 427, 428, 473, 427, 428, 474, 427, 
	428, 475, 427, 428, 476, 427, 428, 477, 
	427, 428, 455, 427, 428, 478, 427, 428, 
	479, 427, 428, 459, 427, 428, 480, 427, 
	428, 481, 427, 428, 482, 427, 428, 483, 
	427, 428, 484, 427, 428, 485, 427, 428, 
	486, 427, 428, 487, 427, 428, 488, 427, 
	428, 489, 427, 428, 490, 427, 428, 491, 
	427, 428, 492, 427, 428, 493, 427, 428, 
	494, 427, 428, 495, 427, 428, 477, 427, 
	428, 496, 427, 428, 497, 427, 428, 498, 
	427, 428, 499, 427, 428, 500, 427, 428, 
	501, 427, 428, 502, 427, 428, 503, 427, 
	428, 504, 427, 428, 505, 427, 428, 506, 
	507, 427, 428, 508, 427, 428, 509, 427, 
	428, 510, 427, 428, 511, 427, 428, 512, 
	427, 428, 513, 427, 428, 459, 427, 428, 
	514, 427, 428, 515, 427, 428, 516, 427, 
	428, 517, 427, 428, 518, 427, 428, 519, 
	427, 428, 520, 427, 428, 521, 427, 428, 
	522, 427, 428, 523, 427, 428, 524, 427, 
	428, 525, 427, 428, 456, 427, 526, 0, 
	527, 0, 528, 0, 529, 0, 530, 0, 
	531, 0, 532, 0, 533, 0, 534, 0, 
	535, 0, 536, 537, 0, 538, 0, 539, 
	0, 540, 0, 541, 0, 542, 0, 543, 
	0, 73, 0, 544, 0, 545, 0, 546, 
	0, 547, 0, 548, 0, 549, 0, 550, 
	0, 551, 0, 552, 0, 553, 0, 554, 
	0, 555, 0, 69, 0, 556, 557, 556, 
	0, 560, 559, 561, 562, 559, 558, 0, 
	564, 565, 563, 0, 564, 563, 560, 566, 
	564, 565, 566, 563, 560, 567, 568, 569, 
	570, 571, 572, 573, 574, 575, 576, 577, 
	578, 579, 580, 581, 582, 567, 0, 109, 
	583, 108, 109, 584, 108, 109, 583, 108, 
	109, 585, 586, 108, 109, 587, 108, 109, 
	588, 108, 109, 589, 108, 109, 590, 108, 
	109, 591, 108, 109, 592, 108, 109, 593, 
	108, 109, 594, 108, 109, 595, 108, 109, 
	596, 108, 109, 597, 108, 109, 598, 108, 
	109, 583, 108, 109, 599, 108, 109, 600, 
	108, 109, 601, 108, 109, 602, 108, 109, 
	603, 108, 109, 604, 108, 109, 136, 108, 
	109, 605, 108, 109, 606, 108, 109, 586, 
	108, 109, 607, 108, 109, 608, 108, 109, 
	609, 108, 109, 610, 108, 109, 611, 108, 
	109, 612, 108, 109, 613, 108, 109, 614, 
	108, 109, 615, 108, 109, 616, 108, 109, 
	617, 108, 109, 618, 108, 109, 619, 108, 
	109, 620, 108, 109, 621, 108, 109, 622, 
	108, 109, 604, 108, 109, 623, 586, 108, 
	109, 624, 108, 109, 625, 108, 109, 626, 
	108, 109, 627, 108, 109, 628, 108, 109, 
	629, 108, 109, 630, 108, 109, 620, 108, 
	109, 631, 108, 109, 632, 108, 109, 633, 
	108, 109, 634, 108, 109, 635, 108, 109, 
	636, 108, 109, 637, 108, 109, 638, 108, 
	109, 639, 108, 109, 640, 108, 109, 641, 
	642, 108, 109, 643, 108, 109, 644, 108, 
	109, 645, 108, 109, 646, 108, 109, 647, 
	108, 109, 648, 108, 109, 586, 108, 109, 
	649, 108, 109, 650, 108, 109, 651, 108, 
	109, 652, 108, 109, 653, 108, 109, 654, 
	108, 109, 655, 108, 109, 656, 108, 109, 
	657, 108, 109, 658, 108, 109, 659, 108, 
	109, 660, 108, 109, 583, 108, 661, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 4, 4, 5, 15, 17, 31, 
	34, 37, 38, 40, 93, 111, 194, 197, 
	336, 442, 473, 3, 6, 7, 8, 9, 
	8, 8, 9, 8, 10, 10, 10, 11, 
	10, 10, 10, 11, 12, 13, 14, 4, 
	14, 15, 4, 16, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 29, 
	30, 563, 32, 33, 33, 4, 16, 35, 
	36, 4, 35, 34, 36, 31, 39, 41, 
	54, 37, 42, 43, 44, 45, 46, 47, 
	48, 49, 50, 51, 52, 53, 55, 56, 
	57, 58, 59, 60, 61, 62, 63, 64, 
	65, 66, 67, 68, 69, 70, 71, 72, 
	73, 74, 75, 76, 75, 76, 76, 4, 
	77, 91, 479, 480, 482, 496, 503, 506, 
	523, 532, 78, 79, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 4, 
	92, 4, 4, 5, 15, 17, 31, 34, 
	37, 38, 40, 93, 111, 194, 197, 336, 
	442, 473, 94, 95, 96, 97, 98, 99, 
	100, 101, 102, 103, 102, 103, 103, 4, 
	104, 105, 106, 107, 108, 109, 110, 92, 
	112, 113, 114, 115, 116, 117, 118, 119, 
	120, 119, 120, 120, 4, 121, 135, 156, 
	163, 169, 185, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 131, 132, 133, 134, 
	4, 136, 137, 138, 139, 140, 141, 142, 
	143, 144, 145, 146, 147, 148, 149, 150, 
	151, 152, 153, 154, 155, 92, 157, 158, 
	159, 160, 161, 162, 164, 165, 166, 167, 
	168, 170, 171, 172, 173, 174, 175, 176, 
	177, 178, 179, 180, 181, 182, 183, 184, 
	186, 187, 188, 189, 190, 191, 192, 193, 
	195, 196, 198, 199, 200, 201, 202, 203, 
	204, 205, 206, 207, 208, 209, 210, 211, 
	212, 213, 214, 215, 216, 217, 216, 217, 
	217, 4, 218, 232, 233, 234, 236, 270, 
	276, 279, 296, 305, 219, 220, 221, 222, 
	223, 224, 225, 226, 227, 228, 229, 230, 
	231, 4, 92, 232, 235, 237, 250, 233, 
	238, 239, 240, 241, 242, 243, 244, 245, 
	246, 247, 248, 249, 251, 252, 253, 254, 
	255, 256, 257, 258, 259, 260, 261, 262, 
	263, 264, 265, 266, 267, 268, 269, 271, 
	272, 273, 274, 275, 277, 278, 280, 281, 
	282, 283, 284, 285, 286, 287, 288, 289, 
	290, 291, 292, 293, 294, 295, 297, 298, 
	299, 300, 301, 302, 303, 304, 306, 307, 
	308, 309, 310, 311, 312, 313, 314, 315, 
	316, 323, 317, 318, 319, 320, 321, 322, 
	324, 325, 326, 327, 328, 329, 330, 331, 
	332, 333, 334, 335, 337, 338, 339, 340, 
	341, 342, 343, 344, 345, 346, 347, 348, 
	349, 350, 351, 350, 351, 351, 4, 352, 
	366, 367, 368, 370, 384, 391, 394, 393, 
	411, 353, 354, 355, 356, 357, 358, 359, 
	360, 361, 362, 363, 364, 365, 4, 92, 
	366, 369, 371, 367, 372, 373, 374, 375, 
	376, 377, 378, 379, 380, 381, 382, 383, 
	385, 386, 387, 388, 389, 390, 392, 393, 
	395, 396, 397, 398, 399, 400, 401, 402, 
	403, 404, 405, 406, 407, 408, 409, 410, 
	412, 413, 414, 415, 416, 417, 418, 419, 
	420, 421, 422, 429, 423, 424, 425, 426, 
	427, 428, 430, 431, 432, 433, 434, 435, 
	436, 437, 438, 439, 440, 441, 443, 444, 
	445, 446, 447, 448, 449, 450, 451, 452, 
	453, 460, 454, 455, 456, 457, 458, 459, 
	461, 462, 463, 464, 465, 466, 467, 468, 
	469, 470, 471, 472, 473, 474, 475, 477, 
	478, 476, 474, 475, 476, 474, 477, 478, 
	5, 15, 17, 31, 34, 37, 38, 40, 
	93, 111, 194, 197, 336, 442, 473, 91, 
	481, 483, 479, 484, 485, 486, 487, 488, 
	489, 490, 491, 492, 493, 494, 495, 497, 
	498, 499, 500, 501, 502, 504, 505, 507, 
	508, 509, 510, 511, 512, 513, 514, 515, 
	516, 517, 518, 519, 520, 521, 522, 524, 
	525, 526, 527, 528, 529, 530, 531, 533, 
	534, 535, 536, 537, 538, 539, 540, 541, 
	542, 543, 550, 544, 545, 546, 547, 548, 
	549, 551, 552, 553, 554, 555, 556, 557, 
	558, 559, 560, 561, 562, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 0, 0, 54, 3, 1, 0, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 35, 0, 0, 0, 7, 135, 
	48, 0, 102, 9, 5, 45, 130, 45, 
	0, 33, 122, 33, 33, 0, 11, 106, 
	0, 0, 114, 25, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 72, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	15, 31, 126, 60, 57, 31, 63, 57, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 66, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 0, 81, 
	84, 0, 0, 0, 0, 0, 0, 21, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 0, 69, 33, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 17, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 140, 0, 54, 0, 78, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 37, 37, 
	54, 37, 87, 0, 0, 39, 0, 0, 
	93, 90, 41, 96, 90, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 99, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 563;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 1014 "lib/gherkin/rb_lexer/en_scouse.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
        
# line 1023 "lib/gherkin/rb_lexer/en_scouse.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1267 "lib/gherkin/rb_lexer/en_scouse.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1306 "lib/gherkin/rb_lexer/en_scouse.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/en_scouse.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
