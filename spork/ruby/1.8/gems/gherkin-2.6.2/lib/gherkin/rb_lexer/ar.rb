
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Ar #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/ar.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 13, 19, 21, 22, 23, 24, 
	25, 26, 27, 28, 30, 42, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 54, 
	55, 57, 59, 64, 69, 74, 79, 83, 
	87, 89, 90, 91, 92, 93, 94, 95, 
	96, 97, 98, 99, 100, 101, 102, 103, 
	104, 109, 116, 121, 125, 131, 134, 136, 
	142, 154, 156, 157, 158, 159, 160, 161, 
	162, 163, 164, 165, 166, 167, 168, 169, 
	179, 186, 188, 190, 192, 194, 196, 198, 
	200, 212, 214, 216, 218, 220, 222, 224, 
	226, 228, 230, 232, 234, 236, 238, 240, 
	242, 244, 246, 248, 250, 252, 254, 256, 
	258, 260, 262, 264, 266, 268, 270, 273, 
	275, 277, 279, 281, 283, 285, 287, 289, 
	291, 293, 295, 297, 299, 301, 303, 305, 
	309, 311, 313, 315, 317, 319, 321, 323, 
	325, 327, 329, 331, 333, 335, 337, 339, 
	341, 343, 345, 347, 349, 351, 353, 354, 
	355, 356, 357, 358, 359, 360, 361, 362, 
	369, 371, 373, 375, 377, 379, 381, 383, 
	385, 387, 389, 390, 391, 392, 393, 394, 
	395, 396, 397, 398, 399, 400, 401, 402, 
	403, 404, 405, 406, 407, 408, 416, 420, 
	422, 425, 427, 429, 431, 433, 435, 437, 
	439, 441, 443, 445, 447, 449, 451, 453, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 479, 481, 483, 485, 
	487, 490, 492, 494, 496, 498, 500, 502, 
	504, 506, 508, 510, 512, 514, 516, 518, 
	520, 522, 524, 526, 528, 530, 532, 534, 
	535, 536, 537, 538, 539, 540, 541, 542, 
	543, 544, 545, 546, 548, 549, 550, 551, 
	552, 553, 554, 555, 556, 557, 558, 559, 
	569, 576, 578, 580, 582, 584, 586, 588, 
	590, 592, 594, 596, 598, 600, 602, 604, 
	606, 608, 610, 612, 614, 616, 618, 620, 
	622, 624, 626, 628, 630, 632, 634, 636, 
	638, 640, 642, 644, 646, 648, 650, 652, 
	654, 656, 658, 660, 662, 664, 668, 670, 
	672, 674, 676, 678, 680, 682, 684, 686, 
	688, 690, 692, 694, 696, 698, 700, 702, 
	704, 706, 708, 710, 712, 713, 714, 724, 
	731, 734, 736, 738, 740, 742, 744, 746, 
	748, 750, 752, 754, 756, 758, 760, 762, 
	764, 766, 768, 770, 772, 774, 776, 778, 
	780, 782, 784, 786, 788, 790, 792, 794, 
	796, 798, 800, 802, 804, 806, 808, 810, 
	812, 814, 816, 818, 821, 823, 825, 827, 
	829, 831, 833, 835, 837, 839, 841, 843, 
	845, 847, 849, 851, 853, 857, 859, 861, 
	863, 865, 867, 869, 871, 873, 875, 877, 
	879, 881, 883, 885, 887, 889, 891, 893, 
	895, 897, 899, 901, 902, 903, 904, 905, 
	906, 907, 908, 909, 910, 911
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-40, -39, -17, 10, 32, 34, 35, 37, 
	42, 64, 124, 9, 13, -89, -88, -85, 
	-82, -77, -71, -40, -39, -80, -40, -89, 
	-39, -117, 32, 10, 10, 13, -40, -39, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -124, -123, -120, -39, -125, -39, 
	-122, -40, -86, -39, -119, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 32, 124, 9, 13, 10, 32, 92, 
	124, 9, 13, 10, 92, 124, 10, 92, 
	10, 32, 92, 124, 9, 13, -40, -39, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -124, -123, -40, -82, -39, -124, 
	-39, -127, -39, -118, -40, -87, 58, 10, 
	10, -40, -39, 10, 32, 35, 37, 42, 
	64, 9, 13, -89, -88, -85, -82, -77, 
	-71, 10, -40, 10, -80, 10, -40, 10, 
	-89, 10, -39, 10, -117, 10, 10, 32, 
	-40, -39, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -39, 10, -127, 10, 
	-40, 10, -79, 10, -40, 10, -74, 10, 
	-39, 10, -123, 10, -40, 10, -89, 10, 
	-40, 10, -75, 10, -39, 10, -118, 10, 
	-40, 10, -87, 10, 10, 58, -39, 10, 
	-118, 10, -39, 10, -122, 10, -40, 10, 
	-89, 10, -40, 10, -79, 10, -39, 10, 
	-118, 10, -39, 10, -120, 10, 10, 32, 
	58, -39, 10, -123, 10, -40, 10, -82, 
	10, -40, 10, -73, 10, -40, 10, -73, 
	10, -39, 10, -122, 10, -40, 10, -81, 
	10, -39, 10, -123, 10, -40, 10, -89, 
	10, -124, -123, -120, 10, -39, 10, -125, 
	10, -39, 10, -122, 10, -40, 10, -86, 
	10, -39, 10, -119, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, -40, -85, -39, -124, -40, -87, 58, 
	10, 10, -40, 10, 32, 35, 124, 9, 
	13, -82, 10, -40, 10, -89, 10, -40, 
	10, -75, 10, -39, 10, -118, 10, -40, 
	10, -87, 10, 10, 58, -39, -127, -40, 
	-79, -40, -74, -39, -123, -40, -89, -40, 
	-75, -39, -118, -40, -87, 58, 10, 10, 
	-40, 10, 32, 35, 37, 64, 9, 13, 
	-89, -82, -77, 10, -39, 10, -124, -123, 
	10, -40, 10, -82, 10, -39, 10, -124, 
	10, -39, 10, -127, 10, -39, 10, -118, 
	10, -40, 10, -87, 10, 10, 58, -40, 
	10, -85, 10, -39, 10, -124, 10, -40, 
	10, -89, 10, -40, 10, -75, 10, -39, 
	10, -118, 10, -39, 10, -122, 10, -40, 
	10, -89, 10, -40, 10, -79, 10, -39, 
	10, -118, 10, -39, 10, -120, 10, 10, 
	32, 58, -39, 10, -123, 10, -40, 10, 
	-82, 10, -40, 10, -73, 10, -40, 10, 
	-73, 10, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, -39, -118, 
	-39, -122, -40, -89, -40, -79, -39, -118, 
	-39, -120, 32, 58, -39, -123, -40, -82, 
	-40, -73, -40, -73, 58, 10, 10, -40, 
	-39, 10, 32, 35, 37, 42, 64, 9, 
	13, -89, -88, -85, -82, -77, -71, 10, 
	-40, 10, -80, 10, -40, 10, -89, 10, 
	-39, 10, -117, 10, 10, 32, -39, 10, 
	-127, 10, -40, 10, -79, 10, -40, 10, 
	-74, 10, -39, 10, -123, 10, -40, 10, 
	-89, 10, -40, 10, -75, 10, -39, 10, 
	-118, 10, -40, 10, -87, 10, 10, 58, 
	-39, 10, -118, 10, -39, 10, -122, 10, 
	-40, 10, -89, 10, -40, 10, -79, 10, 
	-39, 10, -118, 10, -39, 10, -120, 10, 
	-39, 10, -122, 10, -40, 10, -81, 10, 
	-39, 10, -123, 10, -40, 10, -89, 10, 
	-124, -123, -120, 10, -39, 10, -125, 10, 
	-39, 10, -122, 10, -40, 10, -86, 10, 
	-39, 10, -119, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 10, -40, -39, 10, 32, 35, 37, 
	42, 64, 9, 13, -89, -88, -85, -82, 
	-77, -71, 10, -40, -39, 10, -80, 10, 
	-40, 10, -89, 10, -39, 10, -117, 10, 
	10, 32, -124, 10, -40, 10, -82, 10, 
	-39, 10, -124, 10, -39, 10, -127, 10, 
	-39, 10, -118, 10, -40, 10, -87, 10, 
	10, 58, -39, 10, -127, 10, -40, 10, 
	-79, 10, -40, 10, -74, 10, -39, 10, 
	-123, 10, -40, 10, -89, 10, -40, 10, 
	-75, 10, -39, 10, -118, 10, -39, 10, 
	-122, 10, -40, 10, -89, 10, -40, 10, 
	-79, 10, -39, 10, -118, 10, -39, 10, 
	-120, 10, 10, 32, 58, -39, 10, -123, 
	10, -40, 10, -82, 10, -40, 10, -73, 
	10, -40, 10, -73, 10, -39, 10, -122, 
	10, -40, 10, -81, 10, -39, 10, -123, 
	10, -40, 10, -89, 10, -124, -123, -120, 
	10, -39, 10, -125, 10, -39, 10, -122, 
	10, -40, 10, -86, 10, -39, 10, -119, 
	10, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, -39, -122, -40, 
	-81, -39, -123, -40, -89, -69, -65, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 11, 6, 2, 1, 1, 1, 1, 
	1, 1, 1, 2, 10, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 2, 3, 3, 3, 3, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 5, 3, 2, 4, 3, 2, 4, 
	10, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 8, 
	7, 2, 2, 2, 2, 2, 2, 2, 
	10, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 6, 4, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 8, 
	7, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 8, 7, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 13, 20, 23, 25, 27, 29, 
	31, 33, 35, 37, 40, 52, 56, 58, 
	60, 62, 64, 66, 68, 70, 72, 74, 
	76, 79, 82, 87, 92, 97, 102, 106, 
	110, 113, 115, 117, 119, 121, 123, 125, 
	127, 129, 131, 133, 135, 137, 139, 141, 
	143, 148, 155, 160, 164, 170, 174, 177, 
	183, 195, 198, 200, 202, 204, 206, 208, 
	210, 212, 214, 216, 218, 220, 222, 224, 
	234, 242, 245, 248, 251, 254, 257, 260, 
	263, 275, 278, 281, 284, 287, 290, 293, 
	296, 299, 302, 305, 308, 311, 314, 317, 
	320, 323, 326, 329, 332, 335, 338, 341, 
	344, 347, 350, 353, 356, 359, 362, 366, 
	369, 372, 375, 378, 381, 384, 387, 390, 
	393, 396, 399, 402, 405, 408, 411, 414, 
	419, 422, 425, 428, 431, 434, 437, 440, 
	443, 446, 449, 452, 455, 458, 461, 464, 
	467, 470, 473, 476, 479, 482, 485, 487, 
	489, 491, 493, 495, 497, 499, 501, 503, 
	510, 513, 516, 519, 522, 525, 528, 531, 
	534, 537, 540, 542, 544, 546, 548, 550, 
	552, 554, 556, 558, 560, 562, 564, 566, 
	568, 570, 572, 574, 576, 578, 586, 591, 
	594, 598, 601, 604, 607, 610, 613, 616, 
	619, 622, 625, 628, 631, 634, 637, 640, 
	643, 646, 649, 652, 655, 658, 661, 664, 
	667, 670, 673, 676, 679, 682, 685, 688, 
	691, 695, 698, 701, 704, 707, 710, 713, 
	716, 719, 722, 725, 728, 731, 734, 737, 
	740, 743, 746, 749, 752, 755, 758, 761, 
	763, 765, 767, 769, 771, 773, 775, 777, 
	779, 781, 783, 785, 788, 790, 792, 794, 
	796, 798, 800, 802, 804, 806, 808, 810, 
	820, 828, 831, 834, 837, 840, 843, 846, 
	849, 852, 855, 858, 861, 864, 867, 870, 
	873, 876, 879, 882, 885, 888, 891, 894, 
	897, 900, 903, 906, 909, 912, 915, 918, 
	921, 924, 927, 930, 933, 936, 939, 942, 
	945, 948, 951, 954, 957, 960, 965, 968, 
	971, 974, 977, 980, 983, 986, 989, 992, 
	995, 998, 1001, 1004, 1007, 1010, 1013, 1016, 
	1019, 1022, 1025, 1028, 1031, 1033, 1035, 1045, 
	1053, 1057, 1060, 1063, 1066, 1069, 1072, 1075, 
	1078, 1081, 1084, 1087, 1090, 1093, 1096, 1099, 
	1102, 1105, 1108, 1111, 1114, 1117, 1120, 1123, 
	1126, 1129, 1132, 1135, 1138, 1141, 1144, 1147, 
	1150, 1153, 1156, 1159, 1162, 1165, 1168, 1171, 
	1174, 1177, 1180, 1183, 1187, 1190, 1193, 1196, 
	1199, 1202, 1205, 1208, 1211, 1214, 1217, 1220, 
	1223, 1226, 1229, 1232, 1235, 1240, 1243, 1246, 
	1249, 1252, 1255, 1258, 1261, 1264, 1267, 1270, 
	1273, 1276, 1279, 1282, 1285, 1288, 1291, 1294, 
	1297, 1300, 1303, 1306, 1308, 1310, 1312, 1314, 
	1316, 1318, 1320, 1322, 1324, 1326
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 2, 3, 5, 4, 6, 7, 8, 
	9, 10, 11, 4, 0, 12, 13, 14, 
	15, 16, 17, 0, 18, 19, 0, 20, 
	0, 21, 0, 22, 0, 23, 0, 24, 
	0, 25, 0, 0, 26, 28, 29, 27, 
	1, 2, 5, 4, 6, 7, 8, 9, 
	10, 11, 4, 0, 30, 31, 24, 0, 
	32, 0, 33, 0, 34, 0, 24, 0, 
	35, 0, 36, 0, 37, 0, 24, 0, 
	38, 0, 39, 0, 41, 42, 40, 44, 
	45, 43, 48, 47, 49, 47, 46, 52, 
	51, 53, 51, 50, 52, 51, 54, 51, 
	50, 52, 51, 55, 51, 50, 57, 56, 
	56, 0, 5, 58, 58, 0, 60, 61, 
	59, 5, 0, 62, 0, 63, 0, 64, 
	0, 65, 0, 66, 0, 67, 0, 68, 
	0, 69, 0, 70, 0, 71, 0, 72, 
	0, 73, 0, 74, 0, 75, 0, 0, 
	0, 0, 0, 76, 77, 78, 77, 77, 
	80, 79, 76, 5, 81, 10, 81, 0, 
	82, 83, 82, 0, 86, 85, 87, 88, 
	85, 84, 0, 90, 91, 89, 0, 90, 
	89, 86, 92, 90, 91, 92, 89, 93, 
	94, 86, 95, 96, 97, 98, 99, 100, 
	101, 95, 0, 102, 103, 0, 104, 0, 
	105, 0, 106, 0, 107, 0, 108, 0, 
	109, 0, 110, 0, 111, 0, 112, 0, 
	113, 0, 114, 0, 116, 115, 118, 117, 
	119, 120, 118, 121, 122, 123, 124, 122, 
	121, 117, 125, 126, 127, 128, 129, 130, 
	118, 117, 131, 118, 117, 132, 118, 117, 
	133, 118, 117, 134, 118, 117, 135, 118, 
	117, 136, 118, 117, 118, 137, 117, 138, 
	139, 141, 140, 142, 143, 144, 145, 146, 
	147, 140, 0, 148, 118, 117, 149, 118, 
	117, 150, 118, 117, 151, 118, 117, 152, 
	118, 117, 136, 118, 117, 153, 118, 117, 
	136, 118, 117, 154, 118, 117, 155, 118, 
	117, 156, 118, 117, 157, 118, 117, 158, 
	118, 117, 159, 118, 117, 160, 118, 117, 
	161, 118, 117, 118, 137, 117, 162, 118, 
	117, 163, 118, 117, 164, 118, 117, 165, 
	118, 117, 166, 118, 117, 167, 118, 117, 
	168, 118, 117, 169, 118, 117, 170, 118, 
	117, 171, 118, 117, 172, 118, 117, 173, 
	118, 117, 118, 174, 137, 117, 175, 118, 
	117, 176, 118, 117, 177, 118, 117, 178, 
	118, 117, 179, 118, 117, 180, 118, 117, 
	181, 118, 117, 161, 118, 117, 182, 118, 
	117, 183, 118, 117, 184, 118, 117, 185, 
	118, 117, 186, 118, 117, 187, 118, 117, 
	188, 118, 117, 136, 118, 117, 189, 190, 
	136, 118, 117, 191, 118, 117, 192, 118, 
	117, 193, 118, 117, 136, 118, 117, 194, 
	118, 117, 195, 118, 117, 196, 118, 117, 
	136, 118, 117, 118, 197, 117, 118, 198, 
	117, 118, 199, 117, 118, 200, 117, 118, 
	201, 117, 118, 202, 117, 118, 203, 117, 
	118, 204, 117, 118, 205, 117, 118, 206, 
	117, 118, 207, 117, 118, 208, 117, 118, 
	209, 117, 118, 210, 117, 211, 0, 212, 
	0, 213, 0, 214, 0, 215, 0, 216, 
	0, 217, 0, 219, 218, 221, 220, 222, 
	221, 223, 224, 224, 223, 220, 225, 221, 
	220, 226, 221, 220, 227, 221, 220, 228, 
	221, 220, 229, 221, 220, 230, 221, 220, 
	231, 221, 220, 232, 221, 220, 233, 221, 
	220, 221, 234, 220, 235, 0, 236, 0, 
	237, 0, 238, 0, 239, 0, 24, 0, 
	240, 0, 24, 0, 241, 0, 242, 0, 
	243, 0, 244, 0, 245, 0, 246, 0, 
	247, 0, 248, 0, 249, 0, 251, 250, 
	253, 252, 254, 253, 255, 256, 257, 256, 
	255, 252, 258, 259, 260, 253, 252, 261, 
	253, 252, 262, 263, 253, 252, 264, 253, 
	252, 265, 253, 252, 266, 253, 252, 267, 
	253, 252, 268, 253, 252, 269, 253, 252, 
	270, 253, 252, 271, 253, 252, 272, 253, 
	252, 273, 253, 252, 253, 274, 252, 275, 
	253, 252, 276, 253, 252, 277, 253, 252, 
	271, 253, 252, 278, 253, 252, 279, 253, 
	252, 280, 253, 252, 269, 253, 252, 281, 
	253, 252, 282, 253, 252, 283, 253, 252, 
	284, 253, 252, 285, 253, 252, 286, 253, 
	252, 287, 253, 252, 288, 253, 252, 289, 
	253, 252, 290, 253, 252, 291, 253, 252, 
	292, 253, 252, 253, 293, 274, 252, 294, 
	253, 252, 295, 253, 252, 296, 253, 252, 
	297, 253, 252, 298, 253, 252, 299, 253, 
	252, 300, 253, 252, 273, 253, 252, 253, 
	301, 252, 253, 302, 252, 253, 303, 252, 
	253, 304, 252, 253, 305, 252, 253, 306, 
	252, 253, 307, 252, 253, 308, 252, 253, 
	309, 252, 253, 310, 252, 253, 311, 252, 
	253, 312, 252, 253, 313, 252, 253, 314, 
	252, 315, 0, 316, 0, 317, 0, 318, 
	0, 319, 0, 320, 0, 321, 0, 322, 
	0, 323, 0, 324, 0, 325, 0, 326, 
	0, 327, 328, 0, 329, 0, 330, 0, 
	331, 0, 332, 0, 333, 0, 334, 0, 
	335, 0, 336, 0, 337, 0, 339, 338, 
	341, 340, 342, 343, 341, 344, 345, 346, 
	347, 345, 344, 340, 348, 349, 350, 351, 
	352, 353, 341, 340, 354, 341, 340, 355, 
	341, 340, 356, 341, 340, 357, 341, 340, 
	358, 341, 340, 359, 341, 340, 341, 360, 
	340, 361, 341, 340, 362, 341, 340, 363, 
	341, 340, 364, 341, 340, 365, 341, 340, 
	359, 341, 340, 366, 341, 340, 359, 341, 
	340, 367, 341, 340, 368, 341, 340, 369, 
	341, 340, 370, 341, 340, 371, 341, 340, 
	372, 341, 340, 373, 341, 340, 374, 341, 
	340, 341, 360, 340, 375, 341, 340, 376, 
	341, 340, 377, 341, 340, 378, 341, 340, 
	379, 341, 340, 380, 341, 340, 381, 341, 
	340, 382, 341, 340, 383, 341, 340, 384, 
	341, 340, 385, 341, 340, 374, 341, 340, 
	386, 341, 340, 387, 341, 340, 388, 341, 
	340, 389, 341, 340, 390, 341, 340, 391, 
	341, 340, 392, 341, 340, 359, 341, 340, 
	393, 394, 359, 341, 340, 395, 341, 340, 
	396, 341, 340, 397, 341, 340, 359, 341, 
	340, 398, 341, 340, 399, 341, 340, 400, 
	341, 340, 359, 341, 340, 341, 401, 340, 
	341, 402, 340, 341, 403, 340, 341, 404, 
	340, 341, 405, 340, 341, 406, 340, 341, 
	407, 340, 341, 408, 340, 341, 409, 340, 
	341, 410, 340, 341, 411, 340, 341, 412, 
	340, 341, 413, 340, 341, 414, 340, 416, 
	415, 418, 417, 419, 420, 418, 421, 422, 
	423, 424, 422, 421, 417, 425, 426, 427, 
	428, 429, 430, 418, 417, 431, 432, 418, 
	417, 433, 418, 417, 434, 418, 417, 435, 
	418, 417, 436, 418, 417, 437, 418, 417, 
	418, 438, 417, 439, 418, 417, 440, 418, 
	417, 441, 418, 417, 442, 418, 417, 443, 
	418, 417, 444, 418, 417, 445, 418, 417, 
	446, 418, 417, 447, 418, 417, 448, 418, 
	417, 449, 418, 417, 418, 438, 417, 450, 
	418, 417, 451, 418, 417, 452, 418, 417, 
	453, 418, 417, 454, 418, 417, 437, 418, 
	417, 455, 418, 417, 437, 418, 417, 456, 
	418, 417, 457, 418, 417, 458, 418, 417, 
	445, 418, 417, 459, 418, 417, 460, 418, 
	417, 461, 418, 417, 462, 418, 417, 463, 
	418, 417, 464, 418, 417, 465, 418, 417, 
	466, 418, 417, 467, 418, 417, 468, 418, 
	417, 469, 418, 417, 470, 418, 417, 418, 
	471, 438, 417, 472, 418, 417, 473, 418, 
	417, 474, 418, 417, 475, 418, 417, 476, 
	418, 417, 477, 418, 417, 478, 418, 417, 
	449, 418, 417, 479, 418, 417, 480, 418, 
	417, 481, 418, 417, 482, 418, 417, 483, 
	418, 417, 484, 418, 417, 485, 418, 417, 
	437, 418, 417, 486, 487, 437, 418, 417, 
	488, 418, 417, 489, 418, 417, 490, 418, 
	417, 437, 418, 417, 491, 418, 417, 492, 
	418, 417, 493, 418, 417, 437, 418, 417, 
	418, 494, 417, 418, 495, 417, 418, 496, 
	417, 418, 497, 417, 418, 498, 417, 418, 
	499, 417, 418, 500, 417, 418, 501, 417, 
	418, 502, 417, 418, 503, 417, 418, 504, 
	417, 418, 505, 417, 418, 506, 417, 418, 
	507, 417, 508, 0, 509, 0, 510, 0, 
	511, 0, 512, 0, 513, 0, 514, 0, 
	24, 0, 515, 0, 4, 0, 516, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 13, 435, 12, 12, 22, 32, 
	34, 9, 48, 51, 3, 170, 176, 178, 
	247, 427, 4, 57, 5, 6, 7, 8, 
	9, 10, 11, 11, 12, 33, 14, 18, 
	15, 16, 17, 19, 20, 21, 23, 24, 
	25, 26, 25, 25, 26, 25, 27, 27, 
	27, 28, 27, 27, 27, 28, 29, 30, 
	31, 12, 31, 32, 12, 33, 35, 36, 
	37, 38, 39, 40, 41, 42, 43, 44, 
	45, 46, 47, 437, 49, 50, 12, 49, 
	48, 50, 51, 52, 53, 55, 56, 54, 
	52, 53, 54, 52, 55, 2, 13, 56, 
	22, 32, 34, 9, 48, 51, 58, 150, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	67, 68, 69, 70, 71, 70, 71, 72, 
	127, 71, 12, 136, 79, 73, 81, 87, 
	89, 98, 119, 74, 75, 76, 77, 78, 
	79, 80, 2, 13, 12, 12, 22, 32, 
	34, 9, 48, 51, 82, 83, 84, 85, 
	86, 88, 90, 91, 92, 93, 94, 95, 
	96, 97, 99, 100, 101, 102, 103, 104, 
	105, 106, 107, 108, 109, 110, 111, 112, 
	113, 114, 115, 116, 117, 118, 120, 121, 
	122, 123, 124, 125, 126, 128, 132, 129, 
	130, 131, 133, 134, 135, 137, 138, 139, 
	140, 141, 142, 143, 144, 145, 146, 147, 
	148, 149, 12, 151, 152, 153, 154, 155, 
	156, 157, 158, 159, 158, 159, 160, 159, 
	12, 161, 162, 163, 164, 165, 166, 167, 
	168, 169, 80, 171, 172, 173, 174, 175, 
	177, 179, 180, 181, 182, 183, 184, 185, 
	186, 187, 188, 189, 188, 189, 190, 189, 
	12, 233, 191, 208, 212, 192, 193, 204, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 80, 205, 206, 207, 209, 210, 
	211, 213, 214, 215, 216, 217, 218, 219, 
	220, 221, 222, 223, 224, 225, 226, 227, 
	228, 229, 230, 231, 232, 234, 235, 236, 
	237, 238, 239, 240, 241, 242, 243, 244, 
	245, 246, 12, 248, 249, 250, 251, 252, 
	253, 254, 255, 256, 257, 258, 259, 260, 
	340, 261, 262, 263, 264, 265, 266, 267, 
	268, 269, 270, 271, 270, 271, 272, 317, 
	271, 12, 326, 279, 273, 280, 286, 288, 
	297, 309, 274, 275, 276, 277, 278, 279, 
	80, 281, 282, 283, 284, 285, 287, 289, 
	290, 291, 292, 293, 294, 295, 296, 298, 
	299, 300, 301, 302, 303, 304, 305, 306, 
	307, 308, 310, 311, 312, 313, 314, 315, 
	316, 318, 322, 319, 320, 321, 323, 324, 
	325, 327, 328, 329, 330, 331, 332, 333, 
	334, 335, 336, 337, 338, 339, 12, 341, 
	342, 341, 342, 343, 404, 342, 12, 413, 
	350, 344, 363, 369, 371, 375, 396, 345, 
	351, 346, 347, 348, 349, 350, 80, 352, 
	353, 354, 355, 356, 357, 358, 359, 360, 
	361, 362, 364, 365, 366, 367, 368, 370, 
	372, 373, 374, 376, 377, 378, 379, 380, 
	381, 382, 383, 384, 385, 386, 387, 388, 
	389, 390, 391, 392, 393, 394, 395, 397, 
	398, 399, 400, 401, 402, 403, 405, 409, 
	406, 407, 408, 410, 411, 412, 414, 415, 
	416, 417, 418, 419, 420, 421, 422, 423, 
	424, 425, 426, 12, 428, 429, 430, 431, 
	432, 433, 434, 436, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 29, 29, 0, 0, 54, 3, 1, 
	0, 29, 1, 35, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 0, 110, 23, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 135, 48, 0, 102, 9, 5, 45, 
	130, 45, 0, 33, 122, 33, 33, 0, 
	11, 106, 0, 0, 114, 25, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 118, 27, 
	51, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 96, 96, 0, 
	93, 90, 41, 96, 90, 99, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 140, 0, 54, 84, 
	84, 0, 72, 33, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 63, 63, 31, 126, 60, 57, 
	31, 63, 57, 66, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 84, 0, 
	81, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 84, 0, 
	69, 33, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 84, 84, 
	0, 78, 33, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 57, 
	140, 0, 54, 84, 84, 0, 75, 33, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 437;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 821 "lib/gherkin/rb_lexer/ar.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
        
# line 830 "lib/gherkin/rb_lexer/ar.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1074 "lib/gherkin/rb_lexer/ar.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1113 "lib/gherkin/rb_lexer/ar.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ar.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
