
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Bg #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/bg.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 12, 21, 22, 23, 24, 25, 
	26, 27, 28, 29, 30, 31, 32, 33, 
	35, 46, 47, 48, 50, 52, 57, 62, 
	67, 72, 76, 80, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 93, 
	94, 95, 96, 97, 102, 109, 114, 118, 
	124, 127, 129, 135, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 155, 156, 157, 
	159, 160, 161, 162, 163, 164, 165, 166, 
	167, 168, 169, 170, 171, 172, 173, 174, 
	175, 176, 177, 178, 187, 196, 198, 200, 
	202, 204, 206, 208, 210, 212, 214, 216, 
	218, 229, 231, 233, 235, 237, 239, 241, 
	243, 245, 247, 249, 251, 253, 255, 257, 
	259, 261, 263, 265, 267, 269, 271, 273, 
	275, 277, 279, 281, 283, 285, 287, 289, 
	291, 293, 295, 297, 299, 301, 303, 305, 
	307, 309, 311, 313, 315, 317, 319, 321, 
	323, 325, 327, 329, 331, 333, 335, 337, 
	339, 341, 343, 345, 347, 349, 351, 353, 
	355, 357, 359, 361, 363, 365, 367, 369, 
	371, 373, 375, 377, 379, 381, 383, 385, 
	387, 388, 389, 390, 391, 392, 393, 394, 
	395, 396, 397, 398, 405, 407, 409, 411, 
	413, 415, 417, 419, 421, 423, 425, 427, 
	429, 431, 433, 435, 437, 439, 441, 443, 
	445, 447, 449, 451, 453, 455, 457, 459, 
	461, 462, 463, 464, 465, 466, 467, 468, 
	469, 470, 471, 472, 473, 474, 475, 476, 
	477, 478, 479, 480, 481, 482, 483, 484, 
	485, 486, 487, 488, 489, 490, 491, 492, 
	493, 494, 503, 511, 513, 515, 517, 519, 
	521, 523, 525, 527, 529, 531, 533, 535, 
	537, 539, 541, 543, 545, 547, 549, 551, 
	553, 555, 557, 559, 561, 563, 565, 567, 
	569, 571, 573, 575, 577, 579, 581, 583, 
	585, 587, 589, 591, 593, 595, 597, 599, 
	601, 603, 605, 607, 609, 611, 613, 615, 
	617, 619, 621, 623, 625, 627, 629, 631, 
	633, 635, 637, 639, 641, 643, 645, 647, 
	649, 651, 653, 655, 657, 659, 660, 661, 
	662, 663, 664, 665, 666, 667, 668, 669, 
	670, 671, 672, 673, 674, 675, 676, 685, 
	695, 697, 699, 701, 703, 705, 707, 709, 
	711, 713, 715, 717, 719, 721, 723, 725, 
	727, 729, 731, 733, 735, 737, 739, 741, 
	743, 745, 747, 749, 751, 753, 755, 757, 
	759, 761, 763, 765, 767, 769, 771, 773, 
	775, 777, 779, 781, 783, 785, 787, 789, 
	791, 793, 795, 797, 799, 801, 803, 805, 
	807, 809, 811, 813, 815, 817, 819, 821, 
	823, 825, 827, 829, 831, 833, 835, 837, 
	839, 841, 843, 845, 847, 849, 851, 853, 
	855, 857, 859, 861, 863, 865, 867, 869, 
	871, 873, 875, 877, 879, 881, 883, 885, 
	887, 889, 891, 893, 895, 897, 899, 901, 
	903, 905, 907, 909, 911, 913, 915, 916, 
	917, 918, 919, 920, 921, 922, 923, 924, 
	925, 926, 927, 928, 929, 930, 931, 932, 
	933, 934, 935, 936, 937, 938, 939, 940, 
	941, 942, 943, 944, 952, 957, 959, 961, 
	963, 966, 968, 970, 972, 974, 976, 978, 
	980, 982, 984, 986, 988, 990, 992, 994, 
	996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 
	1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 
	1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 
	1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 
	1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 
	1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 
	1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 
	1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 
	1124, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 
	1140, 1142, 1144, 1146, 1148, 1150, 1152, 1154, 
	1156, 1157, 1158
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-48, -17, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -108, -104, -102, -99, 
	-97, -96, -95, -94, -92, -48, -80, -48, 
	-76, -48, -75, -48, -67, -48, -66, 32, 
	10, 10, 13, -48, 10, 32, 34, 35, 
	37, 42, 64, 124, 9, 13, 34, 34, 
	10, 13, 10, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 9, 13, 10, 32, 9, 13, 
	10, 13, 10, 95, 70, 69, 65, 84, 
	85, 82, 69, 95, 69, 78, 68, 95, 
	37, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, -48, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -48, -66, -48, -77, -48, -80, 
	-47, -126, -47, -128, -48, -75, -72, -48, 
	-76, -48, -72, -47, -127, -47, -126, -48, 
	-66, -47, -128, -48, -72, -47, -113, 58, 
	10, 10, -48, 10, 32, 35, 37, 42, 
	64, 9, 13, -108, -104, -102, -99, -96, 
	-95, -94, -92, 10, -48, 10, -80, 10, 
	-48, 10, -76, 10, -48, 10, -75, 10, 
	-48, 10, -67, 10, -48, 10, -66, 10, 
	10, 32, -48, 10, 32, 34, 35, 37, 
	42, 64, 124, 9, 13, -48, 10, -66, 
	10, -48, 10, -77, 10, -48, 10, -80, 
	10, -47, 10, -126, 10, -48, 10, -80, 
	10, -48, 10, -68, 10, -48, 10, -70, 
	10, -48, 10, -80, 10, 10, 32, -48, 
	10, -67, 10, -48, 10, -80, 10, 10, 
	32, -47, 10, -127, 10, -47, 10, -122, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -48, 10, -72, 10, -48, 10, -71, 
	10, 10, 58, -47, 10, -125, 10, -48, 
	10, -67, 10, -48, 10, -70, 10, -47, 
	10, -122, 10, -48, 10, -72, 10, -48, 
	10, -66, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -48, 10, -69, 10, -48, 
	10, -67, 10, -48, 10, -66, 10, -47, 
	10, -127, 10, -47, 10, -126, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, -48, -68, -48, -75, -47, 
	-128, -48, -72, 58, 10, 10, -48, 10, 
	32, 35, 124, 9, 13, -92, 10, -47, 
	10, -125, 10, -48, 10, -67, 10, -48, 
	10, -70, 10, -47, 10, -122, 10, -48, 
	10, -72, 10, -48, 10, -66, 10, -48, 
	10, -67, 10, -48, 10, -80, 10, -48, 
	10, -69, 10, -48, 10, -67, 10, -48, 
	10, -66, 10, -47, 10, -127, 10, -47, 
	10, -126, 10, 10, 58, -48, -80, -48, 
	-68, -48, -70, -48, -80, 32, -48, -67, 
	-48, -80, 32, -47, -127, -47, -122, -48, 
	-75, -48, -67, -48, -80, -47, -128, -48, 
	-72, -48, -71, 58, 10, 10, -48, 10, 
	32, 35, 37, 42, 64, 9, 13, -108, 
	-104, -102, -99, -95, -94, -92, 10, -48, 
	10, -80, 10, -48, 10, -76, 10, -48, 
	10, -75, 10, -48, 10, -67, 10, -48, 
	10, -66, 10, 10, 32, -48, 10, -66, 
	10, -48, 10, -77, 10, -48, 10, -80, 
	10, -47, 10, -126, 10, -47, 10, -122, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -48, 10, -72, 10, -48, 10, -71, 
	10, 10, 58, -47, 10, -125, 10, -48, 
	10, -67, 10, -48, 10, -70, 10, -47, 
	10, -122, 10, -48, 10, -72, 10, -48, 
	10, -66, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -48, 10, -69, 10, -48, 
	10, -67, 10, -48, 10, -66, 10, -47, 
	10, -127, 10, -47, 10, -126, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, -47, -122, -48, -75, -48, 
	-67, -48, -80, -47, -128, -48, -72, -48, 
	-71, 58, 10, 10, -48, 10, 32, 35, 
	37, 42, 64, 9, 13, -108, -104, -102, 
	-99, -97, -96, -95, -94, -92, 10, -48, 
	10, -80, 10, -48, 10, -76, 10, -48, 
	10, -75, 10, -48, 10, -67, 10, -48, 
	10, -66, 10, 10, 32, -48, 10, -66, 
	10, -48, 10, -77, 10, -48, 10, -80, 
	10, -47, 10, -126, 10, -47, 10, -128, 
	10, -48, 10, -75, 10, -48, 10, -76, 
	10, -48, 10, -72, 10, -47, 10, -127, 
	10, -47, 10, -126, 10, -48, 10, -66, 
	10, -47, 10, -128, 10, -48, 10, -72, 
	10, -47, 10, -113, 10, 10, 58, -48, 
	10, -80, 10, -48, 10, -68, 10, -48, 
	10, -70, 10, -48, 10, -80, 10, 10, 
	32, -48, 10, -67, 10, -48, 10, -80, 
	10, 10, 32, -47, 10, -127, 10, -47, 
	10, -122, 10, -48, 10, -75, 10, -48, 
	10, -67, 10, -48, 10, -80, 10, -47, 
	10, -128, 10, -48, 10, -72, 10, -48, 
	10, -71, 10, -47, 10, -125, 10, -48, 
	10, -67, 10, -48, 10, -70, 10, -47, 
	10, -122, 10, -48, 10, -72, 10, -48, 
	10, -66, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -48, 10, -69, 10, -48, 
	10, -67, 10, -48, 10, -66, 10, -47, 
	10, -127, 10, -47, 10, -126, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, -47, -125, -48, -67, -48, 
	-70, -47, -122, -48, -72, -48, -66, -48, 
	-67, -48, -80, -48, -69, -48, -67, -48, 
	-66, -47, -127, -47, -126, 58, 10, 10, 
	-48, 10, 32, 35, 37, 64, 9, 13, 
	-97, -96, -95, -92, 10, -47, 10, -128, 
	10, -48, 10, -75, -72, 10, -48, 10, 
	-76, 10, -48, 10, -72, 10, -47, 10, 
	-127, 10, -47, 10, -126, 10, -48, 10, 
	-66, 10, -47, 10, -128, 10, -48, 10, 
	-72, 10, -47, 10, -113, 10, 10, 58, 
	-48, 10, -68, 10, -48, 10, -75, 10, 
	-47, 10, -128, 10, -48, 10, -72, 10, 
	-48, 10, -80, 10, -48, 10, -68, 10, 
	-48, 10, -70, 10, -48, 10, -80, 10, 
	10, 32, -48, 10, -67, 10, -48, 10, 
	-80, 10, 10, 32, -47, 10, -127, 10, 
	-47, 10, -122, 10, -48, 10, -75, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-47, 10, -128, 10, -48, 10, -72, 10, 
	-48, 10, -71, 10, -47, 10, -125, 10, 
	-48, 10, -67, 10, -48, 10, -70, 10, 
	-47, 10, -122, 10, -48, 10, -72, 10, 
	-48, 10, -66, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -48, 10, -69, 10, 
	-48, 10, -67, 10, -48, 10, -66, 10, 
	-47, 10, -127, 10, -47, 10, -126, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -69, -65, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 10, 9, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	9, 1, 1, 2, 2, 3, 3, 3, 
	3, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 5, 3, 2, 4, 
	3, 2, 4, 9, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 9, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	9, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 7, 8, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 7, 10, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 6, 5, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 12, 22, 24, 26, 28, 30, 
	32, 34, 36, 38, 40, 42, 44, 46, 
	49, 60, 62, 64, 67, 70, 75, 80, 
	85, 90, 94, 98, 101, 103, 105, 107, 
	109, 111, 113, 115, 117, 119, 121, 123, 
	125, 127, 129, 131, 136, 143, 148, 152, 
	158, 162, 165, 171, 182, 184, 186, 188, 
	190, 192, 194, 196, 198, 200, 202, 204, 
	207, 209, 211, 213, 215, 217, 219, 221, 
	223, 225, 227, 229, 231, 233, 235, 237, 
	239, 241, 243, 245, 254, 264, 267, 270, 
	273, 276, 279, 282, 285, 288, 291, 294, 
	297, 308, 311, 314, 317, 320, 323, 326, 
	329, 332, 335, 338, 341, 344, 347, 350, 
	353, 356, 359, 362, 365, 368, 371, 374, 
	377, 380, 383, 386, 389, 392, 395, 398, 
	401, 404, 407, 410, 413, 416, 419, 422, 
	425, 428, 431, 434, 437, 440, 443, 446, 
	449, 452, 455, 458, 461, 464, 467, 470, 
	473, 476, 479, 482, 485, 488, 491, 494, 
	497, 500, 503, 506, 509, 512, 515, 518, 
	521, 524, 527, 530, 533, 536, 539, 542, 
	545, 547, 549, 551, 553, 555, 557, 559, 
	561, 563, 565, 567, 574, 577, 580, 583, 
	586, 589, 592, 595, 598, 601, 604, 607, 
	610, 613, 616, 619, 622, 625, 628, 631, 
	634, 637, 640, 643, 646, 649, 652, 655, 
	658, 660, 662, 664, 666, 668, 670, 672, 
	674, 676, 678, 680, 682, 684, 686, 688, 
	690, 692, 694, 696, 698, 700, 702, 704, 
	706, 708, 710, 712, 714, 716, 718, 720, 
	722, 724, 733, 742, 745, 748, 751, 754, 
	757, 760, 763, 766, 769, 772, 775, 778, 
	781, 784, 787, 790, 793, 796, 799, 802, 
	805, 808, 811, 814, 817, 820, 823, 826, 
	829, 832, 835, 838, 841, 844, 847, 850, 
	853, 856, 859, 862, 865, 868, 871, 874, 
	877, 880, 883, 886, 889, 892, 895, 898, 
	901, 904, 907, 910, 913, 916, 919, 922, 
	925, 928, 931, 934, 937, 940, 943, 946, 
	949, 952, 955, 958, 961, 964, 966, 968, 
	970, 972, 974, 976, 978, 980, 982, 984, 
	986, 988, 990, 992, 994, 996, 998, 1007, 
	1018, 1021, 1024, 1027, 1030, 1033, 1036, 1039, 
	1042, 1045, 1048, 1051, 1054, 1057, 1060, 1063, 
	1066, 1069, 1072, 1075, 1078, 1081, 1084, 1087, 
	1090, 1093, 1096, 1099, 1102, 1105, 1108, 1111, 
	1114, 1117, 1120, 1123, 1126, 1129, 1132, 1135, 
	1138, 1141, 1144, 1147, 1150, 1153, 1156, 1159, 
	1162, 1165, 1168, 1171, 1174, 1177, 1180, 1183, 
	1186, 1189, 1192, 1195, 1198, 1201, 1204, 1207, 
	1210, 1213, 1216, 1219, 1222, 1225, 1228, 1231, 
	1234, 1237, 1240, 1243, 1246, 1249, 1252, 1255, 
	1258, 1261, 1264, 1267, 1270, 1273, 1276, 1279, 
	1282, 1285, 1288, 1291, 1294, 1297, 1300, 1303, 
	1306, 1309, 1312, 1315, 1318, 1321, 1324, 1327, 
	1330, 1333, 1336, 1339, 1342, 1345, 1348, 1350, 
	1352, 1354, 1356, 1358, 1360, 1362, 1364, 1366, 
	1368, 1370, 1372, 1374, 1376, 1378, 1380, 1382, 
	1384, 1386, 1388, 1390, 1392, 1394, 1396, 1398, 
	1400, 1402, 1404, 1406, 1414, 1420, 1423, 1426, 
	1429, 1433, 1436, 1439, 1442, 1445, 1448, 1451, 
	1454, 1457, 1460, 1463, 1466, 1469, 1472, 1475, 
	1478, 1481, 1484, 1487, 1490, 1493, 1496, 1499, 
	1502, 1505, 1508, 1511, 1514, 1517, 1520, 1523, 
	1526, 1529, 1532, 1535, 1538, 1541, 1544, 1547, 
	1550, 1553, 1556, 1559, 1562, 1565, 1568, 1571, 
	1574, 1577, 1580, 1583, 1586, 1589, 1592, 1595, 
	1598, 1601, 1604, 1607, 1610, 1613, 1616, 1619, 
	1622, 1625, 1628, 1631, 1634, 1637, 1640, 1643, 
	1646, 1649, 1652, 1655, 1658, 1661, 1664, 1667, 
	1670, 1673, 1676, 1679, 1682, 1685, 1688, 1691, 
	1694, 1697, 1700, 1703, 1706, 1709, 1712, 1715, 
	1718, 1720, 1722
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 2, 4, 3, 5, 6, 7, 8, 
	9, 10, 3, 0, 11, 12, 13, 14, 
	15, 16, 17, 14, 18, 0, 19, 0, 
	20, 0, 21, 0, 22, 0, 23, 0, 
	24, 0, 25, 0, 14, 0, 26, 0, 
	12, 0, 27, 0, 0, 28, 30, 31, 
	29, 1, 4, 3, 5, 6, 7, 8, 
	9, 10, 3, 0, 32, 0, 33, 0, 
	35, 36, 34, 38, 39, 37, 42, 41, 
	43, 41, 40, 46, 45, 47, 45, 44, 
	46, 45, 48, 45, 44, 46, 45, 49, 
	45, 44, 51, 50, 50, 0, 4, 52, 
	52, 0, 54, 55, 53, 4, 0, 56, 
	0, 57, 0, 58, 0, 59, 0, 60, 
	0, 61, 0, 62, 0, 63, 0, 64, 
	0, 65, 0, 66, 0, 67, 0, 68, 
	0, 69, 0, 0, 0, 0, 0, 70, 
	71, 72, 71, 71, 74, 73, 70, 4, 
	75, 9, 75, 0, 76, 77, 76, 0, 
	80, 79, 81, 82, 79, 78, 0, 84, 
	85, 83, 0, 84, 83, 80, 86, 84, 
	85, 86, 83, 87, 80, 88, 89, 90, 
	91, 92, 93, 94, 88, 0, 95, 0, 
	96, 0, 97, 0, 98, 0, 99, 0, 
	100, 0, 101, 0, 14, 0, 102, 0, 
	103, 0, 104, 0, 105, 106, 0, 107, 
	0, 108, 0, 109, 0, 110, 0, 111, 
	0, 112, 0, 113, 0, 114, 0, 115, 
	0, 116, 0, 117, 0, 118, 0, 119, 
	0, 120, 0, 121, 0, 122, 0, 123, 
	0, 125, 124, 127, 126, 128, 127, 129, 
	130, 131, 132, 130, 129, 126, 133, 134, 
	135, 136, 137, 138, 136, 139, 127, 126, 
	140, 127, 126, 141, 127, 126, 142, 127, 
	126, 143, 127, 126, 144, 127, 126, 145, 
	127, 126, 146, 127, 126, 136, 127, 126, 
	147, 127, 126, 134, 127, 126, 127, 148, 
	126, 149, 151, 150, 152, 153, 154, 155, 
	156, 157, 150, 0, 158, 127, 126, 159, 
	127, 126, 160, 127, 126, 161, 127, 126, 
	162, 127, 126, 163, 127, 126, 164, 127, 
	126, 136, 127, 126, 165, 127, 126, 166, 
	127, 126, 167, 127, 126, 168, 127, 126, 
	169, 127, 126, 170, 127, 126, 171, 127, 
	126, 172, 127, 126, 127, 173, 126, 174, 
	127, 126, 175, 127, 126, 176, 127, 126, 
	177, 127, 126, 127, 178, 126, 179, 127, 
	126, 138, 127, 126, 180, 127, 126, 181, 
	127, 126, 182, 127, 126, 183, 127, 126, 
	184, 127, 126, 185, 127, 126, 186, 127, 
	126, 187, 127, 126, 188, 127, 126, 189, 
	127, 126, 190, 127, 126, 191, 127, 126, 
	192, 127, 126, 193, 127, 126, 127, 148, 
	126, 194, 127, 126, 195, 127, 126, 196, 
	127, 126, 197, 127, 126, 198, 127, 126, 
	199, 127, 126, 200, 127, 126, 201, 127, 
	126, 202, 127, 126, 203, 127, 126, 204, 
	127, 126, 205, 127, 126, 206, 127, 126, 
	207, 127, 126, 208, 127, 126, 209, 127, 
	126, 210, 127, 126, 211, 127, 126, 212, 
	127, 126, 213, 127, 126, 214, 127, 126, 
	215, 127, 126, 216, 127, 126, 217, 127, 
	126, 218, 127, 126, 193, 127, 126, 127, 
	219, 126, 127, 220, 126, 127, 221, 126, 
	127, 222, 126, 127, 223, 126, 127, 224, 
	126, 127, 225, 126, 127, 226, 126, 127, 
	227, 126, 127, 228, 126, 127, 229, 126, 
	127, 230, 126, 127, 231, 126, 127, 232, 
	126, 233, 0, 234, 0, 235, 0, 236, 
	0, 237, 0, 238, 0, 239, 0, 240, 
	0, 241, 0, 243, 242, 245, 244, 246, 
	245, 247, 248, 248, 247, 244, 249, 245, 
	244, 250, 245, 244, 251, 245, 244, 252, 
	245, 244, 253, 245, 244, 254, 245, 244, 
	255, 245, 244, 256, 245, 244, 257, 245, 
	244, 258, 245, 244, 259, 245, 244, 260, 
	245, 244, 261, 245, 244, 262, 245, 244, 
	263, 245, 244, 264, 245, 244, 265, 245, 
	244, 266, 245, 244, 267, 245, 244, 268, 
	245, 244, 269, 245, 244, 270, 245, 244, 
	271, 245, 244, 272, 245, 244, 273, 245, 
	244, 274, 245, 244, 275, 245, 244, 245, 
	276, 244, 277, 0, 278, 0, 279, 0, 
	280, 0, 281, 0, 282, 0, 283, 0, 
	284, 0, 285, 0, 286, 0, 287, 0, 
	288, 0, 289, 0, 290, 0, 291, 0, 
	292, 0, 293, 0, 294, 0, 295, 0, 
	296, 0, 297, 0, 298, 0, 299, 0, 
	300, 0, 301, 0, 302, 0, 303, 0, 
	304, 0, 305, 0, 306, 0, 307, 0, 
	309, 308, 311, 310, 312, 311, 313, 314, 
	315, 316, 314, 313, 310, 317, 318, 319, 
	320, 321, 320, 322, 311, 310, 323, 311, 
	310, 324, 311, 310, 325, 311, 310, 326, 
	311, 310, 327, 311, 310, 328, 311, 310, 
	329, 311, 310, 320, 311, 310, 330, 311, 
	310, 318, 311, 310, 311, 331, 310, 332, 
	311, 310, 333, 311, 310, 334, 311, 310, 
	335, 311, 310, 336, 311, 310, 337, 311, 
	310, 338, 311, 310, 320, 311, 310, 339, 
	311, 310, 340, 311, 310, 341, 311, 310, 
	342, 311, 310, 343, 311, 310, 344, 311, 
	310, 345, 311, 310, 346, 311, 310, 347, 
	311, 310, 348, 311, 310, 349, 311, 310, 
	350, 311, 310, 351, 311, 310, 352, 311, 
	310, 311, 331, 310, 353, 311, 310, 354, 
	311, 310, 355, 311, 310, 356, 311, 310, 
	357, 311, 310, 358, 311, 310, 359, 311, 
	310, 360, 311, 310, 361, 311, 310, 362, 
	311, 310, 363, 311, 310, 364, 311, 310, 
	365, 311, 310, 366, 311, 310, 367, 311, 
	310, 368, 311, 310, 369, 311, 310, 370, 
	311, 310, 371, 311, 310, 372, 311, 310, 
	373, 311, 310, 374, 311, 310, 375, 311, 
	310, 376, 311, 310, 377, 311, 310, 352, 
	311, 310, 311, 378, 310, 311, 379, 310, 
	311, 380, 310, 311, 381, 310, 311, 382, 
	310, 311, 383, 310, 311, 384, 310, 311, 
	385, 310, 311, 386, 310, 311, 387, 310, 
	311, 388, 310, 311, 389, 310, 311, 390, 
	310, 311, 391, 310, 392, 0, 393, 0, 
	394, 0, 395, 0, 396, 0, 397, 0, 
	398, 0, 399, 0, 400, 0, 401, 0, 
	402, 0, 403, 0, 404, 0, 405, 0, 
	406, 0, 408, 407, 410, 409, 411, 410, 
	412, 413, 414, 415, 413, 412, 409, 416, 
	417, 418, 419, 420, 421, 422, 419, 423, 
	410, 409, 424, 410, 409, 425, 410, 409, 
	426, 410, 409, 427, 410, 409, 428, 410, 
	409, 429, 410, 409, 430, 410, 409, 419, 
	410, 409, 431, 410, 409, 417, 410, 409, 
	410, 432, 409, 433, 410, 409, 434, 410, 
	409, 435, 410, 409, 436, 410, 409, 437, 
	410, 409, 438, 410, 409, 439, 410, 409, 
	419, 410, 409, 440, 410, 409, 441, 410, 
	409, 442, 410, 409, 443, 410, 409, 444, 
	410, 409, 445, 410, 409, 446, 410, 409, 
	447, 410, 409, 448, 410, 409, 449, 410, 
	409, 450, 410, 409, 451, 410, 409, 452, 
	410, 409, 453, 410, 409, 454, 410, 409, 
	455, 410, 409, 456, 410, 409, 457, 410, 
	409, 458, 410, 409, 459, 410, 409, 410, 
	432, 409, 460, 410, 409, 461, 410, 409, 
	462, 410, 409, 463, 410, 409, 464, 410, 
	409, 465, 410, 409, 466, 410, 409, 467, 
	410, 409, 410, 468, 409, 469, 410, 409, 
	470, 410, 409, 471, 410, 409, 472, 410, 
	409, 410, 473, 409, 474, 410, 409, 422, 
	410, 409, 475, 410, 409, 476, 410, 409, 
	477, 410, 409, 478, 410, 409, 479, 410, 
	409, 480, 410, 409, 481, 410, 409, 482, 
	410, 409, 483, 410, 409, 484, 410, 409, 
	485, 410, 409, 486, 410, 409, 487, 410, 
	409, 459, 410, 409, 488, 410, 409, 489, 
	410, 409, 490, 410, 409, 491, 410, 409, 
	492, 410, 409, 493, 410, 409, 494, 410, 
	409, 495, 410, 409, 496, 410, 409, 497, 
	410, 409, 498, 410, 409, 499, 410, 409, 
	500, 410, 409, 501, 410, 409, 502, 410, 
	409, 503, 410, 409, 504, 410, 409, 505, 
	410, 409, 506, 410, 409, 507, 410, 409, 
	508, 410, 409, 509, 410, 409, 510, 410, 
	409, 511, 410, 409, 512, 410, 409, 459, 
	410, 409, 410, 513, 409, 410, 514, 409, 
	410, 515, 409, 410, 516, 409, 410, 517, 
	409, 410, 518, 409, 410, 519, 409, 410, 
	520, 409, 410, 521, 409, 410, 522, 409, 
	410, 523, 409, 410, 524, 409, 410, 525, 
	409, 410, 526, 409, 527, 0, 528, 0, 
	529, 0, 530, 0, 531, 0, 532, 0, 
	533, 0, 534, 0, 535, 0, 536, 0, 
	537, 0, 538, 0, 539, 0, 540, 0, 
	541, 0, 542, 0, 543, 0, 544, 0, 
	545, 0, 546, 0, 547, 0, 548, 0, 
	549, 0, 550, 0, 551, 0, 552, 0, 
	553, 0, 555, 554, 557, 556, 558, 557, 
	559, 560, 561, 560, 559, 556, 562, 563, 
	564, 565, 557, 556, 566, 557, 556, 567, 
	557, 556, 568, 557, 556, 569, 570, 557, 
	556, 571, 557, 556, 572, 557, 556, 573, 
	557, 556, 574, 557, 556, 575, 557, 556, 
	576, 557, 556, 577, 557, 556, 578, 557, 
	556, 579, 557, 556, 580, 557, 556, 581, 
	557, 556, 582, 557, 556, 583, 557, 556, 
	584, 557, 556, 585, 557, 556, 586, 557, 
	556, 557, 587, 556, 588, 557, 556, 589, 
	557, 556, 590, 557, 556, 591, 557, 556, 
	592, 557, 556, 593, 557, 556, 594, 557, 
	556, 586, 557, 556, 595, 557, 556, 596, 
	557, 556, 597, 557, 556, 598, 557, 556, 
	599, 557, 556, 600, 557, 556, 601, 557, 
	556, 602, 557, 556, 557, 603, 556, 604, 
	557, 556, 605, 557, 556, 606, 557, 556, 
	607, 557, 556, 557, 608, 556, 609, 557, 
	556, 564, 557, 556, 610, 557, 556, 611, 
	557, 556, 612, 557, 556, 613, 557, 556, 
	614, 557, 556, 615, 557, 556, 616, 557, 
	556, 617, 557, 556, 618, 557, 556, 619, 
	557, 556, 620, 557, 556, 621, 557, 556, 
	622, 557, 556, 586, 557, 556, 623, 557, 
	556, 624, 557, 556, 625, 557, 556, 626, 
	557, 556, 627, 557, 556, 628, 557, 556, 
	629, 557, 556, 630, 557, 556, 631, 557, 
	556, 632, 557, 556, 633, 557, 556, 634, 
	557, 556, 635, 557, 556, 636, 557, 556, 
	637, 557, 556, 638, 557, 556, 639, 557, 
	556, 640, 557, 556, 641, 557, 556, 642, 
	557, 556, 643, 557, 556, 644, 557, 556, 
	645, 557, 556, 646, 557, 556, 647, 557, 
	556, 586, 557, 556, 557, 648, 556, 557, 
	649, 556, 557, 650, 556, 557, 651, 556, 
	557, 652, 556, 557, 653, 556, 557, 654, 
	556, 557, 655, 556, 557, 656, 556, 557, 
	657, 556, 557, 658, 556, 557, 659, 556, 
	557, 660, 556, 557, 661, 556, 662, 0, 
	3, 0, 663, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 584, 16, 16, 17, 27, 29, 
	13, 43, 46, 3, 13, 52, 11, 60, 
	216, 325, 454, 4, 5, 6, 7, 8, 
	9, 10, 12, 14, 15, 15, 16, 28, 
	18, 19, 20, 21, 20, 20, 21, 20, 
	22, 22, 22, 23, 22, 22, 22, 23, 
	24, 25, 26, 16, 26, 27, 16, 28, 
	30, 31, 32, 33, 34, 35, 36, 37, 
	38, 39, 40, 41, 42, 586, 44, 45, 
	16, 44, 43, 45, 46, 47, 48, 50, 
	51, 49, 47, 48, 49, 47, 50, 2, 
	51, 17, 27, 29, 13, 43, 46, 53, 
	54, 55, 56, 57, 58, 59, 61, 62, 
	63, 64, 176, 65, 66, 67, 68, 69, 
	70, 71, 72, 73, 74, 75, 76, 77, 
	78, 79, 80, 81, 82, 83, 82, 83, 
	84, 83, 16, 162, 95, 85, 95, 97, 
	93, 105, 121, 136, 86, 87, 88, 89, 
	90, 91, 92, 94, 96, 2, 16, 16, 
	17, 27, 29, 13, 43, 46, 98, 99, 
	100, 101, 102, 103, 104, 106, 107, 108, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 122, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	134, 135, 137, 138, 139, 140, 141, 142, 
	143, 144, 145, 146, 147, 148, 149, 150, 
	151, 152, 153, 154, 155, 156, 157, 158, 
	159, 160, 161, 163, 164, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	16, 177, 178, 179, 180, 181, 182, 183, 
	184, 185, 186, 187, 186, 187, 188, 187, 
	16, 189, 190, 191, 192, 193, 194, 195, 
	196, 197, 198, 199, 200, 201, 202, 203, 
	204, 205, 206, 207, 208, 209, 210, 211, 
	212, 213, 214, 215, 96, 217, 218, 219, 
	220, 221, 222, 223, 224, 225, 226, 227, 
	228, 229, 230, 231, 232, 233, 234, 235, 
	236, 237, 238, 239, 240, 241, 242, 243, 
	244, 245, 246, 247, 248, 249, 248, 249, 
	250, 249, 16, 311, 261, 251, 261, 262, 
	259, 270, 285, 252, 253, 254, 255, 256, 
	257, 258, 260, 96, 263, 264, 265, 266, 
	267, 268, 269, 271, 272, 273, 274, 275, 
	276, 277, 278, 279, 280, 281, 282, 283, 
	284, 286, 287, 288, 289, 290, 291, 292, 
	293, 294, 295, 296, 297, 298, 299, 300, 
	301, 302, 303, 304, 305, 306, 307, 308, 
	309, 310, 312, 313, 314, 315, 316, 317, 
	318, 319, 320, 321, 322, 323, 324, 16, 
	326, 327, 328, 329, 330, 331, 332, 333, 
	334, 335, 336, 337, 338, 339, 340, 341, 
	342, 341, 342, 343, 342, 16, 440, 354, 
	344, 354, 355, 352, 363, 384, 400, 414, 
	345, 346, 347, 348, 349, 350, 351, 353, 
	96, 356, 357, 358, 359, 360, 361, 362, 
	364, 365, 366, 367, 368, 369, 370, 371, 
	372, 373, 374, 375, 376, 377, 378, 379, 
	380, 381, 382, 383, 385, 386, 387, 388, 
	389, 390, 391, 392, 393, 394, 395, 396, 
	397, 398, 399, 401, 402, 403, 404, 405, 
	406, 407, 408, 409, 410, 411, 412, 413, 
	415, 416, 417, 418, 419, 420, 421, 422, 
	423, 424, 425, 426, 427, 428, 429, 430, 
	431, 432, 433, 434, 435, 436, 437, 438, 
	439, 441, 442, 443, 444, 445, 446, 447, 
	448, 449, 450, 451, 452, 453, 16, 455, 
	456, 457, 458, 459, 460, 461, 462, 463, 
	464, 465, 466, 467, 468, 469, 470, 471, 
	472, 473, 474, 475, 476, 477, 478, 479, 
	480, 481, 482, 483, 482, 483, 484, 483, 
	16, 570, 485, 514, 530, 544, 486, 487, 
	488, 489, 506, 490, 491, 492, 493, 494, 
	495, 496, 497, 498, 499, 500, 501, 502, 
	503, 504, 505, 96, 507, 508, 509, 510, 
	511, 512, 513, 515, 516, 517, 518, 519, 
	520, 521, 522, 523, 524, 525, 526, 527, 
	528, 529, 531, 532, 533, 534, 535, 536, 
	537, 538, 539, 540, 541, 542, 543, 545, 
	546, 547, 548, 549, 550, 551, 552, 553, 
	554, 555, 556, 557, 558, 559, 560, 561, 
	562, 563, 564, 565, 566, 567, 568, 569, 
	571, 572, 573, 574, 575, 576, 577, 578, 
	579, 580, 581, 582, 583, 16, 585, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 29, 0, 0, 54, 3, 1, 0, 
	29, 1, 35, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 0, 110, 23, 
	0, 0, 7, 135, 48, 0, 102, 9, 
	5, 45, 130, 45, 0, 33, 122, 33, 
	33, 0, 11, 106, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 27, 
	118, 27, 51, 0, 0, 0, 37, 37, 
	54, 37, 87, 0, 0, 39, 0, 96, 
	0, 93, 90, 41, 96, 90, 99, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	84, 0, 72, 33, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 63, 31, 126, 
	60, 57, 31, 63, 57, 66, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 84, 0, 
	81, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	84, 0, 78, 33, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	140, 0, 54, 84, 0, 75, 33, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 140, 0, 54, 84, 0, 
	69, 33, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 586;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 1033 "lib/gherkin/rb_lexer/bg.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
        
# line 1042 "lib/gherkin/rb_lexer/bg.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1286 "lib/gherkin/rb_lexer/bg.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1325 "lib/gherkin/rb_lexer/bg.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/bg.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
