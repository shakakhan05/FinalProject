
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Ko #:nodoc:
      
# line 123 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/ko.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	14, 15, 4, 2, 14, 15, 18, 4, 
	3, 4, 14, 15, 4, 17, 0, 14, 
	15
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 15, 17, 18, 19, 21, 22, 
	23, 24, 25, 26, 28, 42, 46, 47, 
	48, 49, 51, 52, 53, 54, 55, 56, 
	57, 58, 59, 60, 61, 62, 63, 64, 
	76, 79, 81, 83, 86, 88, 90, 92, 
	94, 108, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 121, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 144, 
	147, 149, 151, 154, 156, 158, 160, 162, 
	164, 166, 168, 170, 172, 174, 176, 178, 
	180, 184, 186, 188, 190, 193, 195, 197, 
	199, 201, 203, 205, 208, 210, 212, 214, 
	216, 218, 220, 222, 224, 226, 228, 230, 
	232, 234, 236, 238, 240, 242, 244, 246, 
	248, 250, 252, 254, 256, 258, 260, 262, 
	264, 266, 268, 270, 272, 274, 276, 278, 
	280, 281, 282, 294, 297, 299, 301, 304, 
	306, 308, 310, 312, 314, 316, 318, 320, 
	322, 324, 326, 328, 330, 335, 337, 339, 
	341, 344, 346, 348, 350, 352, 354, 356, 
	358, 360, 362, 364, 367, 369, 371, 373, 
	375, 377, 379, 381, 383, 385, 387, 390, 
	392, 394, 396, 398, 400, 402, 404, 406, 
	408, 410, 412, 414, 416, 418, 420, 422, 
	424, 426, 428, 430, 432, 434, 436, 438, 
	440, 442, 444, 446, 448, 450, 452, 454, 
	455, 456, 457, 458, 465, 467, 469, 471, 
	473, 475, 477, 478, 479, 480, 481, 482, 
	483, 484, 485, 486, 487, 488, 489, 490, 
	492, 494, 499, 504, 509, 514, 518, 522, 
	524, 525, 526, 527, 528, 529, 530, 531, 
	532, 533, 534, 535, 536, 537, 538, 539, 
	540, 545, 552, 557, 561, 567, 570, 572, 
	578, 592, 594, 596, 598, 600, 602, 604, 
	606, 608, 610, 614, 616, 618, 620, 623, 
	625, 627, 629, 631, 633, 635, 638, 640, 
	642, 644, 646, 648, 650, 652, 654, 656, 
	658, 661, 663, 665, 667, 669, 671, 673, 
	675, 677, 679, 681, 683, 685, 687, 689, 
	691, 693, 695, 697, 699, 701, 703, 705, 
	707, 709, 711, 713, 715, 717, 719, 721, 
	723, 725, 726, 727, 728, 729, 730, 731, 
	732, 733, 734, 735, 736, 746, 748, 750, 
	752, 754, 756, 758, 760, 762, 764, 766, 
	768, 771, 773, 775, 777, 779, 781, 783, 
	785, 787, 789, 791, 794, 796, 798, 800, 
	802, 804, 806, 808, 810, 812, 814, 816, 
	818, 820, 822, 824, 826, 828, 830, 832, 
	834, 836, 837, 838
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-22, -21, -20, -19, -17, 10, 32, 34, 
	35, 37, 42, 64, 124, 9, 13, -73, 
	-72, -72, -21, -97, -90, -84, -21, -87, 
	-76, 10, 10, 13, -22, -21, -20, -19, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -117, -89, -88, -80, -88, -116, 
	-20, -107, -99, -67, -68, -68, -20, -96, 
	-128, -80, -22, -78, -67, 58, 10, 10, 
	-22, -21, -20, -19, 10, 32, 35, 37, 
	42, 64, 9, 13, -73, -72, 10, -72, 
	10, -21, 10, -97, -90, 10, -84, 10, 
	-21, 10, -87, 10, -76, 10, -22, -21, 
	-20, -19, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -117, -104, -95, -100, 
	-21, -126, -104, -21, -90, -84, -20, -104, 
	-92, 32, 58, -22, -80, -100, -20, -102, 
	-108, 58, 10, 10, -22, -21, -20, -19, 
	10, 32, 35, 37, 42, 64, 9, 13, 
	-73, -72, 10, -72, 10, -21, 10, -97, 
	-90, 10, -84, 10, -21, 10, -87, 10, 
	-76, 10, -84, 10, -22, 10, -77, 10, 
	-96, 10, -80, 10, -21, 10, -118, 10, 
	-91, 10, 10, 58, -117, -89, -88, 10, 
	-88, 10, -116, 10, -20, 10, -107, -99, 
	10, -67, 10, -68, 10, -68, 10, -20, 
	10, -96, 10, -128, 10, -117, -95, 10, 
	-100, 10, -21, 10, -126, 10, -104, 10, 
	-21, 10, -90, 10, -84, 10, -20, 10, 
	-104, 10, -92, 10, -80, 10, -22, 10, 
	-79, 10, -107, 10, -104, 10, -20, 10, 
	-89, 10, -128, 10, -21, 10, -89, 10, 
	-116, 10, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 10, -22, -21, -20, -19, 10, 32, 
	35, 37, 42, 64, 9, 13, -73, -72, 
	10, -72, 10, -21, 10, -97, -90, 10, 
	-84, 10, -21, 10, -87, 10, -76, 10, 
	-84, 10, -22, 10, -77, 10, -96, 10, 
	-80, 10, -21, 10, -118, 10, -91, 10, 
	10, 58, -117, -89, -88, -80, 10, -88, 
	10, -116, 10, -20, 10, -107, -99, 10, 
	-67, 10, -68, 10, -68, 10, -20, 10, 
	-96, 10, -128, 10, -80, 10, -22, 10, 
	-78, 10, -67, 10, -117, -95, 10, -100, 
	10, -21, 10, -126, 10, -104, 10, -21, 
	10, -90, 10, -84, 10, -20, 10, -104, 
	10, -92, 10, 10, 32, 58, -22, 10, 
	-80, 10, -100, 10, -20, 10, -102, 10, 
	-108, 10, -80, 10, -22, 10, -79, 10, 
	-107, 10, -104, 10, -20, 10, -89, 10, 
	-128, 10, -21, 10, -89, 10, -116, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, -120, 58, 
	10, 10, -22, 10, 32, 35, 124, 9, 
	13, -72, 10, -80, 10, -21, 10, -118, 
	10, -91, 10, 10, 58, -80, -22, -79, 
	-107, -104, -20, -89, -128, -21, -89, -116, 
	34, 34, 10, 13, 10, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 9, 13, 10, 32, 
	9, 13, 10, 13, 10, 95, 70, 69, 
	65, 84, 85, 82, 69, 95, 69, 78, 
	68, 95, 37, 32, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, -22, -21, -20, -19, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	-84, 10, -22, 10, -77, 10, -96, 10, 
	-80, 10, -21, 10, -118, 10, -91, 10, 
	10, 58, -117, -89, -88, 10, -88, 10, 
	-116, 10, -20, 10, -107, -99, 10, -67, 
	10, -68, 10, -68, 10, -20, 10, -96, 
	10, -128, 10, -117, -95, 10, -100, 10, 
	-21, 10, -126, 10, -104, 10, -21, 10, 
	-90, 10, -84, 10, -20, 10, -104, 10, 
	-92, 10, 10, 32, 58, -22, 10, -80, 
	10, -100, 10, -20, 10, -102, 10, -108, 
	10, -80, 10, -22, 10, -79, 10, -107, 
	10, -104, 10, -20, 10, -89, 10, -128, 
	10, -21, 10, -89, 10, -116, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, -84, -22, -77, 
	-96, -80, -21, -118, -91, 58, 10, 10, 
	-22, -21, -20, 10, 32, 35, 37, 64, 
	9, 13, -72, 10, -80, 10, -21, 10, 
	-118, 10, -91, 10, 10, 58, -80, 10, 
	-80, 10, -22, 10, -78, 10, -67, 10, 
	-117, -104, 10, -100, 10, -21, 10, -126, 
	10, -104, 10, -21, 10, -90, 10, -84, 
	10, -20, 10, -104, 10, -92, 10, 10, 
	32, 58, -22, 10, -80, 10, -100, 10, 
	-20, 10, -102, 10, -108, 10, -120, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -69, -65, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 13, 2, 1, 1, 2, 1, 1, 
	1, 1, 1, 2, 12, 4, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 10, 
	3, 2, 2, 3, 2, 2, 2, 2, 
	12, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 10, 3, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 10, 3, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 5, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 3, 3, 3, 3, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 5, 3, 2, 4, 3, 2, 4, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 8, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 15, 18, 20, 22, 25, 27, 
	29, 31, 33, 35, 38, 52, 57, 59, 
	61, 63, 66, 68, 70, 72, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	104, 108, 111, 114, 118, 121, 124, 127, 
	130, 144, 148, 150, 152, 154, 156, 158, 
	160, 162, 164, 166, 168, 171, 173, 175, 
	177, 179, 181, 183, 185, 187, 189, 201, 
	205, 208, 211, 215, 218, 221, 224, 227, 
	230, 233, 236, 239, 242, 245, 248, 251, 
	254, 259, 262, 265, 268, 272, 275, 278, 
	281, 284, 287, 290, 294, 297, 300, 303, 
	306, 309, 312, 315, 318, 321, 324, 327, 
	330, 333, 336, 339, 342, 345, 348, 351, 
	354, 357, 360, 363, 366, 369, 372, 375, 
	378, 381, 384, 387, 390, 393, 396, 399, 
	402, 404, 406, 418, 422, 425, 428, 432, 
	435, 438, 441, 444, 447, 450, 453, 456, 
	459, 462, 465, 468, 471, 477, 480, 483, 
	486, 490, 493, 496, 499, 502, 505, 508, 
	511, 514, 517, 520, 524, 527, 530, 533, 
	536, 539, 542, 545, 548, 551, 554, 558, 
	561, 564, 567, 570, 573, 576, 579, 582, 
	585, 588, 591, 594, 597, 600, 603, 606, 
	609, 612, 615, 618, 621, 624, 627, 630, 
	633, 636, 639, 642, 645, 648, 651, 654, 
	656, 658, 660, 662, 669, 672, 675, 678, 
	681, 684, 687, 689, 691, 693, 695, 697, 
	699, 701, 703, 705, 707, 709, 711, 713, 
	716, 719, 724, 729, 734, 739, 743, 747, 
	750, 752, 754, 756, 758, 760, 762, 764, 
	766, 768, 770, 772, 774, 776, 778, 780, 
	782, 787, 794, 799, 803, 809, 813, 816, 
	822, 836, 839, 842, 845, 848, 851, 854, 
	857, 860, 863, 868, 871, 874, 877, 881, 
	884, 887, 890, 893, 896, 899, 903, 906, 
	909, 912, 915, 918, 921, 924, 927, 930, 
	933, 937, 940, 943, 946, 949, 952, 955, 
	958, 961, 964, 967, 970, 973, 976, 979, 
	982, 985, 988, 991, 994, 997, 1000, 1003, 
	1006, 1009, 1012, 1015, 1018, 1021, 1024, 1027, 
	1030, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 
	1047, 1049, 1051, 1053, 1055, 1065, 1068, 1071, 
	1074, 1077, 1080, 1083, 1086, 1089, 1092, 1095, 
	1098, 1102, 1105, 1108, 1111, 1114, 1117, 1120, 
	1123, 1126, 1129, 1132, 1136, 1139, 1142, 1145, 
	1148, 1151, 1154, 1157, 1160, 1163, 1166, 1169, 
	1172, 1175, 1178, 1181, 1184, 1187, 1190, 1193, 
	1196, 1199, 1201, 1203
]

class << self
	attr_accessor :_lexer_indicies
	private :_lexer_indicies, :_lexer_indicies=
end
self._lexer_indicies = [
	1, 2, 3, 4, 5, 7, 6, 8, 
	9, 10, 11, 12, 13, 6, 0, 14, 
	15, 0, 16, 0, 17, 0, 18, 19, 
	0, 20, 0, 21, 0, 22, 0, 23, 
	0, 0, 24, 26, 27, 25, 1, 2, 
	3, 4, 7, 6, 8, 9, 10, 11, 
	12, 13, 6, 0, 28, 29, 30, 31, 
	0, 23, 0, 32, 0, 33, 0, 34, 
	35, 0, 23, 0, 23, 0, 36, 0, 
	37, 0, 38, 0, 23, 0, 39, 0, 
	40, 0, 41, 0, 42, 0, 43, 0, 
	45, 44, 47, 46, 48, 49, 50, 51, 
	47, 52, 53, 54, 55, 53, 52, 46, 
	56, 57, 47, 46, 58, 47, 46, 59, 
	47, 46, 60, 61, 47, 46, 62, 47, 
	46, 63, 47, 46, 64, 47, 46, 65, 
	47, 46, 66, 67, 68, 69, 71, 70, 
	72, 73, 74, 75, 76, 77, 70, 0, 
	78, 79, 80, 0, 81, 0, 82, 0, 
	83, 0, 84, 0, 85, 0, 86, 0, 
	87, 0, 88, 0, 89, 0, 90, 0, 
	91, 92, 0, 93, 0, 94, 0, 95, 
	0, 96, 0, 97, 0, 98, 0, 99, 
	0, 101, 100, 103, 102, 104, 105, 106, 
	107, 103, 108, 109, 110, 111, 109, 108, 
	102, 112, 113, 103, 102, 114, 103, 102, 
	115, 103, 102, 116, 117, 103, 102, 118, 
	103, 102, 119, 103, 102, 120, 103, 102, 
	121, 103, 102, 122, 103, 102, 123, 103, 
	102, 124, 103, 102, 121, 103, 102, 125, 
	103, 102, 126, 103, 102, 127, 103, 102, 
	128, 103, 102, 103, 121, 102, 129, 130, 
	131, 103, 102, 121, 103, 102, 132, 103, 
	102, 133, 103, 102, 134, 135, 103, 102, 
	121, 103, 102, 121, 103, 102, 136, 103, 
	102, 137, 103, 102, 138, 103, 102, 121, 
	103, 102, 139, 140, 103, 102, 141, 103, 
	102, 142, 103, 102, 143, 103, 102, 144, 
	103, 102, 145, 103, 102, 146, 103, 102, 
	147, 103, 102, 148, 103, 102, 149, 103, 
	102, 128, 103, 102, 150, 103, 102, 151, 
	103, 102, 120, 103, 102, 152, 103, 102, 
	153, 103, 102, 154, 103, 102, 155, 103, 
	102, 156, 103, 102, 157, 103, 102, 158, 
	103, 102, 121, 103, 102, 103, 159, 102, 
	103, 160, 102, 103, 161, 102, 103, 162, 
	102, 103, 163, 102, 103, 164, 102, 103, 
	165, 102, 103, 166, 102, 103, 167, 102, 
	103, 168, 102, 103, 169, 102, 103, 170, 
	102, 103, 171, 102, 103, 172, 102, 103, 
	121, 102, 174, 173, 176, 175, 177, 178, 
	179, 180, 176, 181, 182, 183, 184, 182, 
	181, 175, 185, 186, 176, 175, 187, 176, 
	175, 188, 176, 175, 189, 190, 176, 175, 
	191, 176, 175, 192, 176, 175, 193, 176, 
	175, 194, 176, 175, 195, 176, 175, 196, 
	176, 175, 197, 176, 175, 194, 176, 175, 
	198, 176, 175, 199, 176, 175, 200, 176, 
	175, 201, 176, 175, 176, 194, 175, 202, 
	203, 204, 205, 176, 175, 194, 176, 175, 
	206, 176, 175, 207, 176, 175, 208, 209, 
	176, 175, 194, 176, 175, 194, 176, 175, 
	210, 176, 175, 211, 176, 175, 212, 176, 
	175, 194, 176, 175, 213, 176, 175, 214, 
	176, 175, 215, 176, 175, 201, 176, 175, 
	216, 217, 176, 175, 218, 176, 175, 219, 
	176, 175, 220, 176, 175, 221, 176, 175, 
	222, 176, 175, 223, 176, 175, 224, 176, 
	175, 225, 176, 175, 226, 176, 175, 227, 
	176, 175, 176, 228, 194, 175, 229, 176, 
	175, 230, 176, 175, 231, 176, 175, 232, 
	176, 175, 233, 176, 175, 201, 176, 175, 
	234, 176, 175, 235, 176, 175, 193, 176, 
	175, 236, 176, 175, 237, 176, 175, 238, 
	176, 175, 239, 176, 175, 240, 176, 175, 
	241, 176, 175, 242, 176, 175, 194, 176, 
	175, 176, 243, 175, 176, 244, 175, 176, 
	245, 175, 176, 246, 175, 176, 247, 175, 
	176, 248, 175, 176, 249, 175, 176, 250, 
	175, 176, 251, 175, 176, 252, 175, 176, 
	253, 175, 176, 254, 175, 176, 255, 175, 
	176, 256, 175, 176, 194, 175, 257, 0, 
	258, 0, 260, 259, 262, 261, 263, 262, 
	264, 265, 265, 264, 261, 266, 262, 261, 
	267, 262, 261, 268, 262, 261, 269, 262, 
	261, 270, 262, 261, 262, 271, 261, 272, 
	0, 273, 0, 22, 0, 274, 0, 275, 
	0, 276, 0, 277, 0, 278, 0, 279, 
	0, 280, 0, 23, 0, 281, 0, 282, 
	0, 284, 285, 283, 287, 288, 286, 291, 
	290, 292, 290, 289, 295, 294, 296, 294, 
	293, 295, 294, 297, 294, 293, 295, 294, 
	298, 294, 293, 300, 299, 299, 0, 7, 
	301, 301, 0, 303, 304, 302, 7, 0, 
	305, 0, 306, 0, 307, 0, 308, 0, 
	309, 0, 310, 0, 311, 0, 312, 0, 
	313, 0, 314, 0, 315, 0, 316, 0, 
	317, 0, 318, 0, 23, 0, 0, 0, 
	0, 0, 319, 320, 321, 320, 320, 323, 
	322, 319, 7, 324, 12, 324, 0, 325, 
	326, 325, 0, 329, 328, 330, 331, 328, 
	327, 0, 333, 334, 332, 0, 333, 332, 
	329, 335, 333, 334, 335, 332, 336, 337, 
	338, 339, 329, 340, 341, 342, 343, 344, 
	345, 346, 340, 0, 347, 47, 46, 348, 
	47, 46, 349, 47, 46, 65, 47, 46, 
	350, 47, 46, 351, 47, 46, 352, 47, 
	46, 353, 47, 46, 47, 65, 46, 354, 
	355, 356, 47, 46, 65, 47, 46, 357, 
	47, 46, 358, 47, 46, 359, 360, 47, 
	46, 65, 47, 46, 65, 47, 46, 361, 
	47, 46, 362, 47, 46, 363, 47, 46, 
	65, 47, 46, 364, 365, 47, 46, 366, 
	47, 46, 367, 47, 46, 368, 47, 46, 
	369, 47, 46, 370, 47, 46, 371, 47, 
	46, 372, 47, 46, 373, 47, 46, 374, 
	47, 46, 375, 47, 46, 47, 376, 65, 
	46, 377, 47, 46, 378, 47, 46, 379, 
	47, 46, 380, 47, 46, 381, 47, 46, 
	353, 47, 46, 382, 47, 46, 383, 47, 
	46, 64, 47, 46, 384, 47, 46, 385, 
	47, 46, 386, 47, 46, 387, 47, 46, 
	388, 47, 46, 389, 47, 46, 390, 47, 
	46, 65, 47, 46, 47, 391, 46, 47, 
	392, 46, 47, 393, 46, 47, 394, 46, 
	47, 395, 46, 47, 396, 46, 47, 397, 
	46, 47, 398, 46, 47, 399, 46, 47, 
	400, 46, 47, 401, 46, 47, 402, 46, 
	47, 403, 46, 47, 404, 46, 47, 65, 
	46, 405, 0, 406, 0, 407, 0, 23, 
	0, 408, 0, 409, 0, 410, 0, 411, 
	0, 412, 0, 414, 413, 416, 415, 417, 
	418, 419, 416, 420, 421, 422, 421, 420, 
	415, 423, 416, 415, 424, 416, 415, 425, 
	416, 415, 426, 416, 415, 427, 416, 415, 
	416, 428, 415, 429, 416, 415, 430, 416, 
	415, 431, 416, 415, 432, 416, 415, 427, 
	416, 415, 433, 434, 416, 415, 435, 416, 
	415, 436, 416, 415, 437, 416, 415, 438, 
	416, 415, 439, 416, 415, 440, 416, 415, 
	441, 416, 415, 442, 416, 415, 443, 416, 
	415, 444, 416, 415, 416, 445, 428, 415, 
	446, 416, 415, 447, 416, 415, 448, 416, 
	415, 449, 416, 415, 450, 416, 415, 427, 
	416, 415, 427, 416, 415, 416, 451, 415, 
	416, 452, 415, 416, 453, 415, 416, 454, 
	415, 416, 455, 415, 416, 456, 415, 416, 
	457, 415, 416, 458, 415, 416, 459, 415, 
	416, 460, 415, 416, 461, 415, 416, 462, 
	415, 416, 463, 415, 416, 464, 415, 465, 
	0, 6, 0, 466, 0
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	0, 2, 13, 41, 221, 385, 12, 12, 
	229, 239, 241, 255, 256, 259, 3, 333, 
	4, 5, 6, 329, 7, 8, 9, 10, 
	11, 11, 12, 240, 14, 15, 20, 24, 
	16, 17, 18, 19, 21, 22, 23, 25, 
	26, 27, 28, 29, 30, 31, 30, 31, 
	32, 274, 285, 306, 31, 12, 314, 328, 
	33, 269, 34, 35, 36, 265, 37, 38, 
	39, 40, 2, 13, 41, 221, 12, 12, 
	229, 239, 241, 255, 256, 259, 42, 207, 
	218, 43, 44, 45, 46, 47, 48, 49, 
	50, 51, 52, 53, 128, 54, 55, 56, 
	57, 58, 59, 60, 61, 62, 61, 62, 
	63, 80, 91, 105, 62, 12, 113, 127, 
	64, 75, 65, 66, 67, 71, 68, 69, 
	70, 40, 72, 73, 74, 76, 77, 78, 
	79, 81, 82, 87, 83, 84, 85, 86, 
	88, 89, 90, 92, 102, 93, 94, 95, 
	96, 97, 98, 99, 100, 101, 103, 104, 
	106, 107, 108, 109, 110, 111, 112, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 12, 129, 130, 129, 
	130, 131, 148, 163, 184, 130, 12, 192, 
	206, 132, 143, 133, 134, 135, 139, 136, 
	137, 138, 40, 140, 141, 142, 144, 145, 
	146, 147, 149, 150, 155, 159, 151, 152, 
	153, 154, 156, 157, 158, 160, 161, 162, 
	164, 181, 165, 166, 167, 168, 169, 170, 
	171, 172, 173, 174, 175, 176, 177, 178, 
	179, 180, 182, 183, 185, 186, 187, 188, 
	189, 190, 191, 193, 194, 195, 196, 197, 
	198, 199, 200, 201, 202, 203, 204, 205, 
	12, 208, 209, 210, 211, 210, 211, 212, 
	211, 12, 213, 214, 215, 216, 217, 40, 
	219, 220, 222, 223, 224, 225, 226, 227, 
	228, 230, 231, 232, 233, 232, 232, 233, 
	232, 234, 234, 234, 235, 234, 234, 234, 
	235, 236, 237, 238, 12, 238, 239, 12, 
	240, 242, 243, 244, 245, 246, 247, 248, 
	249, 250, 251, 252, 253, 254, 387, 257, 
	258, 12, 257, 256, 258, 259, 260, 261, 
	263, 264, 262, 260, 261, 262, 260, 263, 
	2, 13, 41, 221, 264, 229, 239, 241, 
	255, 256, 259, 266, 267, 268, 270, 271, 
	272, 273, 275, 276, 281, 277, 278, 279, 
	280, 282, 283, 284, 286, 303, 287, 288, 
	289, 290, 291, 292, 293, 294, 295, 296, 
	297, 298, 299, 300, 301, 302, 304, 305, 
	307, 308, 309, 310, 311, 312, 313, 315, 
	316, 317, 318, 319, 320, 321, 322, 323, 
	324, 325, 326, 327, 12, 330, 331, 332, 
	334, 335, 336, 337, 338, 339, 340, 339, 
	340, 341, 347, 352, 340, 12, 371, 342, 
	343, 344, 345, 346, 40, 348, 349, 350, 
	351, 353, 370, 354, 355, 356, 357, 358, 
	359, 360, 361, 362, 363, 364, 365, 366, 
	367, 368, 369, 372, 373, 374, 375, 376, 
	377, 378, 379, 380, 381, 382, 383, 384, 
	12, 386, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	43, 29, 29, 29, 29, 0, 0, 54, 
	3, 1, 0, 29, 1, 35, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 0, 110, 23, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	84, 84, 84, 84, 0, 72, 33, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 63, 63, 63, 63, 31, 126, 
	60, 57, 31, 63, 57, 66, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 140, 0, 54, 
	84, 84, 84, 84, 0, 78, 33, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 57, 140, 0, 
	54, 84, 84, 84, 84, 0, 75, 33, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 0, 0, 57, 140, 0, 54, 84, 
	0, 81, 0, 0, 0, 0, 0, 21, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 135, 48, 0, 102, 
	9, 5, 45, 130, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 118, 27, 51, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	96, 96, 96, 96, 0, 93, 90, 41, 
	96, 90, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 140, 0, 
	54, 84, 84, 84, 0, 69, 33, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 387;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 128 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 755 "lib/gherkin/rb_lexer/ko.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 138 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
        
# line 764 "lib/gherkin/rb_lexer/ko.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _lexer_indicies[_trans]
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          @docstring_content_type_start = p
        		end
when 4 then
# line 27 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          @docstring_content_type_end = p
        		end
when 5 then
# line 31 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          con_type = utf8_pack(data[@docstring_content_type_start...@docstring_content_type_end]).strip
          @listener.doc_string(con_type, con, @current_line) 
        		end
when 6 then
# line 36 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 7 then
# line 40 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 8 then
# line 44 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 9 then
# line 48 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 10 then
# line 52 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 11 then
# line 56 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 12 then
# line 61 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 13 then
# line 67 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 14 then
# line 73 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          @line_number += 1
        		end
when 15 then
# line 77 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 16 then
# line 81 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 17 then
# line 85 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 18 then
# line 90 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 19 then
# line 94 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 20 then
# line 100 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          @content_start = p
        		end
when 21 then
# line 104 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 22 then
# line 109 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1008 "lib/gherkin/rb_lexer/ko.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 23 then
# line 113 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1047 "lib/gherkin/rb_lexer/ko.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 139 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/ko.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
